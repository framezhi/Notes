<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://notes.yuyzzz.top</id>
    <title>Yuyzzz&apos;notes</title>
    <updated>2021-12-08T06:14:50.434Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://notes.yuyzzz.top"/>
    <link rel="self" href="https://notes.yuyzzz.top/atom.xml"/>
    <subtitle>遊生夢死</subtitle>
    <logo>https://notes.yuyzzz.top/images/avatar.png</logo>
    <icon>https://notes.yuyzzz.top/favicon.ico</icon>
    <rights>All rights reserved 2021, Yuyzzz&apos;notes</rights>
    <entry>
        <title type="html"><![CDATA[6. 存储器]]></title>
        <id>https://notes.yuyzzz.top/post/6-cun-chu-qi/</id>
        <link href="https://notes.yuyzzz.top/post/6-cun-chu-qi/">
        </link>
        <updated>2021-12-06T08:56:07.000Z</updated>
        <summary type="html"><![CDATA[<p>简单介绍了半导体存储器；存储器的扩展、译码；CPU与存储器的连接</p>
]]></summary>
        <content type="html"><![CDATA[<p>简单介绍了半导体存储器；存储器的扩展、译码；CPU与存储器的连接</p>
<!-- more -->
<h2 id="61-半导体存储器的分类">6.1 半导体存储器的分类</h2>
<p>内存储器一般半导体存储器组成</p>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gwmv4aqbdbj30v90f7jy6.jpg" alt="image.png" style="zoom:67%;" />
<h2 id="62-半导体存储器的主要技术指标">6.2 半导体存储器的主要技术指标</h2>
<ul>
<li>
<p><strong>存储容量</strong>: 存储容量就是以字或字节为单位来表示存储器存储单元的总数。</p>
</li>
<li>
<p><strong>读写速度</strong>: 半导体存储器的速度一般用<strong>存取时间</strong>和<strong>存储周期</strong>两个指标来衡量。</p>
</li>
<li>
<p><strong>可靠性</strong>: 通常指存储器对温度、电磁场等环境变化的抵抗能力和工作寿命。</p>
</li>
<li>
<p>存取时间：从启动一次存储器操作到完成该操作所经历的时间</p>
</li>
<li>
<p>存取周期：连续启动两次独立的存储器操作(例如连续两次读操作)所需间隔的最小时间。</p>
</li>
</ul>
<h2 id="63-存储器与系统的连接">6.3 存储器与系统的连接</h2>
<p>CPU对存储器进行读/写操作时，首先由地址总线给出地址信号，然后要对存储器发出读操作或写操作的控制信号，最后在数据总线上进行信息交换</p>
<h3 id="631-存储器扩展">6.3.1 存储器扩展</h3>
<ul>
<li>位扩展</li>
<li>子扩展</li>
<li>字位扩展</li>
</ul>
<ol>
<li>
<p>位扩展：</p>
<ul>
<li>用多个存储器器件对字长进行扩充。一个地址同时控制多个存储器芯片</li>
<li>扩展条件：设目标容量为M字×N位，存储器芯片容量为m字×n位，M＝m ，N&gt;n，则需要的存储器芯片数＝N/n。</li>
</ul>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gwmvua0ycfj30qm0j1jwl.jpg" alt="image.png" style="zoom: 70%;" />
</li>
<li>
<p>子扩展：</p>
<ul>
<li>
<p>增加存储器中字的数量</p>
</li>
<li>
<p>设目标容量为M字×N位，存储器芯片容量为m字×n位，M&gt;m ，N＝n，则需要的存储器芯片数＝M/m。</p>
</li>
</ul>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gwmvxgf5pyj30tj0eudm7.jpg" alt="image.png" style="zoom:67%;" />
</li>
<li>
<p>字位扩展</p>
<ul>
<li>字向和位向同时扩充</li>
<li>目标容量为M字×N位，存储器芯片容量为m字×n位，M&gt;m ，N&gt;n，则需要的存储器芯片数＝（M/m）×（N/n）</li>
</ul>
</li>
</ol>
<h3 id="632-存储器地址译码">6.3.2 存储器地址译码</h3>
<p>存储单元地址由片内地址信号和片选信号线状态共同决定</p>
<p>常用片选信号产生方法：</p>
<ul>
<li>
<p><strong>全地址译码</strong>：</p>
<ul>
<li>片选信号由除片内寻址外的<strong>全部高位地址线</strong>产生</li>
<li>特点：寻址范围大，地址连续，不会发生因高位地址不确定而产生的地址重复现象</li>
</ul>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gwmwjr91h9j30jk0ck43f.jpg" alt="image.png" style="zoom:80%;" />
</li>
<li>
<p><strong>部分地址译码</strong>：</p>
<ul>
<li>用除片内寻址外的<strong>高位地址的一部分</strong>来译码产生片选信号</li>
<li>特点：某些高位地址线被省略而不参加地址译码，简化了地址译码电路，但地址空间有重叠。</li>
</ul>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gwmwjcqz8mj30j50biwii.jpg" alt="image.png" style="zoom:80%;" />
</li>
<li>
<p><strong>线选择译码</strong>：</p>
<ul>
<li>直接用高位地址线中的某一条作为存储器芯片的片选控制信号</li>
<li>特点：选择芯片不需要外加逻辑电路，译码线路简单。地址重叠区域多，适用于扩展容量较小的系统。</li>
</ul>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gwmwijfvs2j30go0csadv.jpg" alt="image.png" style="zoom: 80%;" />
</li>
</ul>
<h3 id="633-8086cpu与存储器的连接">6.3.3 8086CPU与存储器的连接</h3>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gwn246wistj30tv0gb0yj.jpg" alt="image.png" style="zoom: 50%;" />
<ul>
<li>空间1MB，分为两个512KB存储体</li>
<li>奇体与数据线D8-15连接，偶体与数据线D0-7连接</li>
<li>地址线A0和控制线/BHE分别作为存储体的选择控制线</li>
</ul>
<ol>
<li>
<p>CPU与存储器的接口</p>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gwn2hyamc1j30vl0g6juk.jpg" alt="image.png" style="zoom: 67%;" /></li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[4. 8086汇编语言程序设计]]></title>
        <id>https://notes.yuyzzz.top/post/4-8086-hui-bian-yu-yan-cheng-xu-she-ji/</id>
        <link href="https://notes.yuyzzz.top/post/4-8086-hui-bian-yu-yan-cheng-xu-she-ji/">
        </link>
        <updated>2021-12-06T08:51:38.000Z</updated>
        <summary type="html"><![CDATA[<p>汇编语言是介于机器语言和高级语言之间的计算机语言，是一种用符号表示的面向机器的程序设计语言。本章主要介绍汇编语言的基础知识、什么是伪指令、系统功能调用、汇编语言程序设计（流程）等</p>
]]></summary>
        <content type="html"><![CDATA[<p>汇编语言是介于机器语言和高级语言之间的计算机语言，是一种用符号表示的面向机器的程序设计语言。本章主要介绍汇编语言的基础知识、什么是伪指令、系统功能调用、汇编语言程序设计（流程）等</p>
<!-- more -->
<h2 id="41-汇编语言基础知识">4.1 汇编语言基础知识</h2>
<h3 id="411-概述">4.1.1 概述</h3>
<ul>
<li>汇编语言（Assembly Language）是一种用符号表示的面向机器的程序设计语言,不同CPU的计算机有不同的汇编语言。</li>
<li>比机器语言易于阅读、编写和修改，能充分利用计算机的硬件资源，占用内存空间少。</li>
<li>常用于计算机控制系统的开发和高级语言编译程序的编制等应用场合。</li>
</ul>
<img src="https://tva1.sinaimg.cn/large/006pkgSjly1gwh1fal2ktj30mo0760up.jpg" alt="image.png" style="zoom:80%;" />
<h3 id="412-汇编语言源程序结构">4.1.2 汇编语言源程序结构</h3>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gwmuxmgrqtj30is087tbf.jpg" alt="image.png" style="zoom:67%;" />
<p>例：编写汇编程序，计算2010H+2011H，并把和存入RESULT单元</p>
<pre><code class="language-assembly">DATA  SEGMENT		;定义数据段
    X  DW  2010H     	;定义被加数
    Y  DW  2011H	;定义加数
    RESULT  DW   ? 	;分配和数存放单元
DATA  ENDS       	;数据段定义结束
CODE  SEGMENT
            MAIN  PROC  FAR
	ASSUME  CS:CODE，DS:DATA 
START:  PUSH  DS
        MOV   AX,0
        PUSH  AX
        MOV   AX,DATA 
        MOV   DS,AX
        MOV  AX,X
        ADD  AX,Y
        MOV  RESULT,AX
        RET 
        MAIN  ENDP
CODE  ENDS
    END  START
</code></pre>
<h3 id="413-汇编语言语句">4.1.3 汇编语言语句</h3>
<ol>
<li>
<p>指令性语句：CPU执行的语句，能够生成目标代码，每条指令语句表达了计算机具有的一种基本能力,</p>
<p>格式：<code>[标号:] [前缀] 助记符 [操作数]，[操作数] [;注释]</code></p>
</li>
<li>
<p>指示性语句：CPU不执行，而由汇编程序执行的语句，不生成目标代码，仅仅告诉汇编程序哪些语句属于一个段、是什么类型的段等等</p>
<p>格式：<code>[名字] 伪指令助记符 操作数 [,操作数,] [;注释]</code></p>
</li>
</ol>
<p>标号与符号名都称为名字。标号是可选项，一般设置在程序的入口处或程序跳转点处，表示一条指令的符号地址，在代码段中定义，后面必须跟上冒号“:”。符号名也是一个可选项，可以是常量、变量、段名、过程名、宏名，后面不能跟冒号。</p>
<h3 id="414-汇编语言的数据">4.1.4 汇编语言的数据</h3>
<ol>
<li>常量：
<ul>
<li>数字常量</li>
<li>字符串常量：用引号引起的字符或字符串，如'A'等，汇编时被译成对应的ASCII码</li>
</ul>
</li>
<li>变量：<strong>存储单元的符号地址</strong>，其存储单元的内容在程序运行时可以被修改。变量有如下属性
<ul>
<li>段属性：变量所在段的段地址</li>
<li>偏移属性：变量所在段的段内偏移量</li>
<li>类型属性：变量所占单元的字节数（字节、字和双字）</li>
</ul>
</li>
<li>标号：<strong>指令的符号地址</strong>，可用作控制转移指令的操作数。标号有如下属性：
<ul>
<li>段属性:标号所在段的段地址。</li>
<li>偏移属性:标号所在段的段内偏移地址。</li>
<li>类型属性:也叫距离属性,表示标号可作为段内或段间的转移特性</li>
</ul>
</li>
</ol>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gwi65mb7buj30mo08fjtf.jpg" alt="image.png" style="zoom:80%;" />
<h3 id="415-汇编语言的操作符与表达式">4.1.5 汇编语言的操作符与表达式</h3>
<ol>
<li>
<p>算数运算符和逻辑运算符</p>
<ul>
<li>算术运算符：+，-，*，/，MOD</li>
<li>逻辑运算符：AND，OR，NOT，XOR</li>
</ul>
</li>
<li>
<p>关系运算符</p>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gwi67wa4qzj30fa05440j.jpg" alt="image.png" style="zoom:80%;" />
</li>
<li>
<p>位移运算符：SHL/SHR, 按位操作</p>
</li>
<li>
<p>数值回送操作符</p>
<ul>
<li>
<p>OFFSET   取得其后变量或标号的偏移地址</p>
<p>SEG        取得其后变量或标号的段地址</p>
</li>
<li>
<p>TYPE       取变量的类型</p>
<p>LENGTH   取所定义存储区的长度</p>
<p>SIZE     	取所定义存储区的字节数</p>
</li>
</ul>
</li>
<li>
<p>属性操作符</p>
<ul>
<li>
<p>PTR，格式: <code>类型 PTR 变量/标号</code>，返回具有规定属性的变量或编号，典型应用如下：</p>
<ul>
<li>
<p>重新指定变量类型：</p>
<pre><code class="language-assembly">BUFW DW 1234H,5678H

MOV AX, BUFW

MOV AL, BYTE PTR BUFW ;临时改变BUFW的字属性为字节属性
</code></pre>
</li>
<li>
<p>指定内存操作数的类型：</p>
<pre><code class="language-assembly">INC BYTE PTR [BX] ;字节属性

INC WORD PTR [BX][SI] ;子属性
</code></pre>
</li>
<li>
<p>和EQU一起定义一个新类型变量: 新变量或新标号的段属性、偏移属性与前一个已定义的变量或标号段属性、偏移属性相同</p>
<pre><code class="language-assembly">BUFW DW 1234H, 5678H

BUFB EQU BYTE PTR BUFW 
</code></pre>
</li>
</ul>
</li>
<li>
<p>THIS，格式：<code>THIS 类型</code>，可以像PTR一样建立一个指定类型的地址操作数，该操作数的段地址和偏移地址与下一个存储单元地址相同。</p>
<pre><code class="language-assembly">BUFB EQU THIS BYTE

BUFW DW 1234H,5678H
</code></pre>
</li>
<li>
<p>SHORT，格式：<code>SHORT 标号</code>， 用于JMP指令，即:JMP SHORT 标号，指明是短转移。</p>
</li>
<li>
<p>字节分离字符 HIGH/LOW，返回表达式的高字节或低字节</p>
<pre><code class="language-assembly">CONST EQU 0ABCDH

MOV AH,HIGH CONST ;(AH)=OABH

MOV CL,LOW CONST  ;(CL)=0CDH
</code></pre>
</li>
</ul>
</li>
<li>
<p>其他运算符</p>
<ul>
<li>方括号：<code>[]</code>, 方括号中内容为操作数的偏移地址</li>
<li>段重设符: <code>段寄存器名:[]</code>, 用于修改默认的段基地址</li>
</ul>
</li>
</ol>
<h2 id="42-伪指令">4.2 伪指令</h2>
<p>伪指令作用：用于定义变量、分配存储区、定义逻辑段、指示程序开始和结束等</p>
<h3 id="421-变量定义伪指令">4.2.1 变量定义伪指令</h3>
<ul>
<li>
<p>用于定义数据区中变量的类型</p>
</li>
<li>
<p>格式: <code>变量名 伪指令助记符 操作数, … ;注释</code>，变量名某些情况下可省略</p>
</li>
<li>
<p>伪指令助记符：</p>
<ul>
<li>DB    定义的变量为字节型</li>
<li>DW    定义的变量为字类型（双字节)</li>
<li>DD    定义的变量为双字型（4字节）</li>
<li>DQ    定义的变量为4字型（8字节）</li>
<li>DT    定义的变量为10字节型</li>
</ul>
<p>定义字符串必须用DB伪指令</p>
<pre><code class="language-assembly">DATA1 DB 'ABCD', 66H
</code></pre>
</li>
<li>
<p>重复操作符：为一个数据区的个单元设置相同的初值</p>
<p>格式：<code>[变量名] 伪指令助记符 n DUP（初值，…）</code></p>
<img src="https://tva1.sinaimg.cn/large/006pkgSjly1gwj8nrrpnlj30ii04wq4d.jpg" alt="image.png" style="zoom:80%;" />
</li>
<li>
<p>用&quot;?&quot;预留存储空间</p>
<pre><code class="language-assembly">MEM1      DB  34H, ’A’, ?, ?, ?

          DW  20  DUP(?) ; 预留40个字节单元
</code></pre>
</li>
</ul>
<h3 id="422-符号定义伪指令">4.2.2 符号定义伪指令</h3>
<ul>
<li>符号包括汇编语言的变量名、标号名、过程名等。</li>
<li>常用符号定义伪指令有：EQU, &quot;=&quot;, LABEL</li>
</ul>
<ol>
<li>
<p>EQU伪指令</p>
<ul>
<li>
<p>格式：<code>名字 EQU 表达式</code></p>
</li>
<li>
<p>功能：给表达式赋予一个名字。定义后，可用名字代替表达式。在同一源程序中，一个名字只能用EQU定义一次</p>
<pre><code class="language-assembly"></code></pre>
</li>
</ul>
<p>A    EQU  7</p>
<p>B    EQU  A-2</p>
<pre><code>
</code></pre>
</li>
<li>
<p>&quot;=&quot;伪指令</p>
<ul>
<li>
<p>格式：<code>名字=表达式</code></p>
</li>
<li>
<p>功能：与EQU基本相同，不同的是它可以对一个名字重新定义</p>
<pre><code class="language-assembly"></code></pre>
</li>
</ul>
<p>COUNT = 10</p>
<p>MOV  AL,COUNT</p>
<p>…</p>
<p>COUNT = 5</p>
<pre><code>
</code></pre>
</li>
<li>
<p>LABEL伪指令</p>
<ul>
<li>
<p>格式：<code>变量/标号 LABEL 类型</code></p>
<ul>
<li>变量的类型有：BYTE、WORD、DWORD、DQ、DT</li>
<li>标号的类型有：NEAR、FAR。</li>
</ul>
</li>
<li>
<p>功能：定义变量或标号的属性类型，而变量或标号的段属性和偏移属性由该语句所处的位置确定<br>
例: 用LABEL使同一个数据区有一个或一个以上的类型和相关属性</p>
<pre><code class="language-assembly"></code></pre>
</li>
</ul>
<p>AREAW  LABEL  WORD     ;AREAW与AREAB指向相同的数据区,</p>
<p>;AREAW类型为字,AREAB类型为字节</p>
<p>AREAB  DB  100 DUP(?)<br>
…<br>
MOV  AX,2011H</p>
<p>MOV  AREAW,AX  ;(AREAW)=2011H<br>
…</p>
<p>MOV  BL,AREAB   ;BL=11H</p>
<pre><code>


</code></pre>
</li>
</ol>
<h3 id="423-段定义伪指令">4.2.3 段定义伪指令</h3>
<ol>
<li>
<p>段定义伪指令</p>
<ul>
<li>
<p>说明段的开始和结束</p>
</li>
<li>
<p>说明不同程序模块中同类逻辑段之间的联系形态</p>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gwjb4x1r73j30km09fwjc.jpg" alt="image.png" style="zoom:80%;" />
<p>定位类型：说明段的起始地址有应有怎样的边界值</p>
<ul>
<li>BYTE： 段的起点从存储器任何地址开始,这种类型段间不留空隙，存储器利用率高。</li>
<li>WORD： 段的起点从偶地址开始</li>
<li>PARA：<strong>定位类型的默认值为PARA</strong>。段的起点从节边界开始（16个字节为1节）,所以起始地址必为16的倍数, 段间往往有空隙。</li>
<li>PAGE：段的起点从页边界开始（256个字节为1页），其起始地址必为256的倍数。</li>
</ul>
<p>组合类型：</p>
<ul>
<li>PUBLIC：本段与其他模块中说明为PUBLIC的<strong>同名同类别的段</strong>链接起来，公用一个段地址，形成一个新的逻辑段，所有偏移量调整为相对于新逻辑段起始地址的值。</li>
<li>STACK：本段与其他模块中说明为STACK的<strong>同名的堆栈段</strong>链接起来，公用一个段地址，形成一个新的逻辑段。同时，系统自动初始化SS及SP。</li>
<li>COMMON：同名段从同一个内存地址开始装入。所以，各个逻辑段将发生覆盖。连接以后，该段长度取决于同名段中最长的那个，而内容有效的是最后装入的那个。</li>
<li>MEMORY：与PUBLIC同义，只不过MEMORY定义的段装在所有同名段的最后。若连接时出现多个MEMORY，则最先遇到的段按组合类型MEMORY处理，其他段组合类型按PUBLIC处理。</li>
<li>PRIVATE：不组合，该段与其他段逻辑上不发生关系，即使同名，各段拥有各自的段基值。组合类型的默认值为PRIVATE。</li>
<li>AT exp：段地址为表达式exp的值（长度为16位）。此项不能用于代码段。例如：AT 0530H，表示本段从物理地址0530H开始。</li>
</ul>
<p>类别：必须用单引号括起来</p>
<ul>
<li>当几个程序模块进行连接时，其中具有相同类别名的段按出现的先后顺序被装入连续的内存区。</li>
<li>没有类别名的段，与其他无类别名的段一起连续装入内存。</li>
<li>典型的类型名有：“STACK”，“CODE”，“DATA”</li>
</ul>
<pre><code class="language-assembly">DATA  SEGMENT  PUBLIC  'CODE'

   MEM1  DB  11H，22H

DATA  ENDS
</code></pre>
</li>
</ul>
</li>
<li>
<p>设定段寄存器伪指令：说明所定义逻辑段与段寄存器之间的关系</p>
<p>格式：<code>ASSUME 段寄存器名：段名[，段寄存器名：段名，…]</code></p>
<ul>
<li>段寄存器可以是：CS、DS、ES、SS。</li>
<li>ASSUME伪指令只是指示各逻辑段使用段寄存器的情况，<strong>并没有对段寄存器的内容进行赋值</strong>。</li>
<li>DS、ES的值必须在程序段中用指令语句进行赋值，而CS、SS由系统负责设置，程序中也可对SS进行赋值，<strong>但不允许对CS赋值</strong>。</li>
</ul>
</li>
</ol>
<h3 id="424-过程定义伪指令">4.2.4 过程定义伪指令</h3>
<ul>
<li>
<p>用于定义一个过程体</p>
</li>
<li>
<p>格式：</p>
<pre><code class="language-assembly">过程名   PROC  [ NEAR / FAR ]                     
┇                    
RET过程名   ENDP
</code></pre>
</li>
<li>
<p>过程名按汇编语言命名规则设定，汇编及链接后，该名称表示过程程序的入口地址，供调用使用</p>
</li>
</ul>
<h3 id="425-模块定义结束伪指令">4.2.5 模块定义结束伪指令</h3>
<ul>
<li>NAME: 为目标程序设定一个名字，格式: <code>NAME 模块名</code>, 如果程序中没有NAME伪指令，则汇编程序将TITLE伪指令定义的标题名前6个字符作为模块名; 如果程序中既没有NAME，又没有TITLE，则汇编程序将汇编语言程序的文件名作为目标程序的模块名。</li>
<li>TITLE: 指定每页上打印的标题，格式:<code>TITLE 标题</code></li>
<li>END: 表示汇编语言程序的结束, 格式: <code>END [标号]</code>，标号仅表示改程序的起始地址，多个模块连接时只有主程序要使用标号</li>
</ul>
<p>一个完整源程序实例：</p>
<pre><code class="language-assembly">DSEG    SEGMENT
DATA1   DB  1，2，
DATA2   DW  1234H
DSEG    ENDS
ESEG    SEGMENT
        DB  20  DUP(?)
ESEG    ENDS
SSEG    SEGMENT  STACK  'STACK'
        DB  200  DUP(?)
SSEG    ENDS

 CSEG SEGMENT
           ASSUME  CS：CSEG，DS：DSEG，
                             ES：ESEG，SS：SSEG
 START：MOV  AX，DSEG
                 MOV  DS，AX
                 MOV  AX，ESEG
                 MOV  ES，AX
                 MOV  AX，SSEG
                 MOV  SS，AX
          ┇
 CSEG  ENDS
       END  START
</code></pre>
<h2 id="43-系统功能调用">4.3 系统功能调用</h2>
<ul>
<li>DOS功能调用：高级调用，操作系统提供</li>
<li>BIOS功能调用：低级调用</li>
</ul>
<p>编程时遵循的原则：</p>
<ul>
<li>尽可能使用DOS的系统功能调用，以降低编程的复杂性。</li>
<li>在DOS功能不能实现情况下考虑用BIOS功能调用。</li>
<li>在DOS和BIOS的中断子程不能解决问题时使用IN/OUT指令直接控制硬件。</li>
</ul>
<h3 id="431-dos功能调用">4.3.1 DOS功能调用</h3>
<ul>
<li>
<p>包含多个子功能的功能包，各子功能采用功能号来区分</p>
</li>
<li>
<p>功能调用格式：</p>
<pre><code class="language-assembly">[置入口参数]

MOV AH, 功能号  ;功能调用号送入AH寄存器

INT 21H       ;执行软中断z
</code></pre>
</li>
</ul>
<ol>
<li>
<p><strong>从键盘输入单字符并显示</strong></p>
<ul>
<li>
<p>功能调用号：AH=01H</p>
</li>
<li>
<p>输入字符的ASCII码存入AL寄存器。若按下组合键Ctr+Break或CtrH+C，则程序返回DOS。</p>
</li>
</ul>
<pre><code class="language-assembly">MOV AH, 01H

INT 21H
</code></pre>
</li>
<li>
<p><strong>字符串输入</strong></p>
<ul>
<li>功能调用号：AH=0AH</li>
<li>DS, DX存放接收缓冲区首地址，分别存放段地址和偏移地址；缓冲区第一字节存放接收字符串最大字符个数</li>
<li>缓冲区第二字节存放实际输入的字符个数(不包括回车符)，第三字节开始存放接收的字符串</li>
<li>输入字符串以回车结束，回车符不计入字符数</li>
</ul>
<p>例: 如下代码允许输入的字符串长度不超过100</p>
<pre><code class="language-assembly"></code></pre>
</li>
</ol>
<p>DATA SEGMENT<br>
BUF DB 100<br>
DB ?<br>
DB 100 DUP(?)<br>
DATA ENDS</p>
<p>CODE SEGMENT<br>
...<br>
MOV DX,OFFSET BUF<br>
MOV AH,OAH<br>
INT	21H<br>
CODE ENDS</p>
<pre><code>
3. **单字符输出**

* 功能调用号：AH=02H
* 将要显示的字符的ASCII码保存于寄存器DL

```assembly
MOV DL,'2'
MOV AH,02H
INT 21H
</code></pre>
<ol start="4">
<li>
<p><strong>字符串输出显示</strong></p>
<ul>
<li>功能调用号：AH=9</li>
<li>寄存器DS和DX，分别存入被输出字符串首地址的段基值和偏移量。</li>
<li>要求字符串以“$”结束，该字符作为字符串结束符，不输出。</li>
</ul>
<pre><code class="language-assembly"> DATA	 SEGMENT
 MESS1  DB  'Input String:' 0DH，0AH,'$'	
                                                 ;被显示的字符串必须以‘$’结束
 DATA  ENDS
 CODE  SEGMENT
         ┇
 MOV	DX，SEG  MESS1 ;待输出字符串的偏移地址→ DS：DX
 MOV	DS，DX
 MOV	DX，OFFSET  MESS1
 MOV	AH，09		;功能号O9H→AH
 INT	21H
</code></pre>
</li>
<li>
<p><strong>进程终止</strong>:</p>
<ul>
<li>功能调用号AH=4CH</li>
<li>结束当前程序，返回DOS</li>
</ul>
<pre><code class="language-assembly">MOV AH,4CH
INT 21H
</code></pre>
</li>
</ol>
<h2 id="44-汇编语言程序设计">4.4 汇编语言程序设计</h2>
<p><strong>设计步骤：</strong></p>
<ul>
<li>根据实际问题抽象出数学模型</li>
<li>确定算法</li>
<li>画程序流程图</li>
<li>分配内存工作单元和寄存器</li>
<li>程序编码</li>
<li>调试</li>
<li>文档整理</li>
</ul>
<p>汇编语言程序的三种结构：</p>
<ul>
<li>顺序结构</li>
<li>分支结构</li>
<li>循环结构</li>
</ul>
<h3 id="441-顺序结构程序设计">4.4.1 顺序结构程序设计</h3>
<p>程序流程图符号</p>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gwlv4oefd8j30k60bx0tx.jpg" alt="image.png" style="zoom:80%;" />
<p>例：编程将内存数据段字节单元INDAT存放的一个数n (假设0≤ n ≤9)以十进制形式在屏幕上显示出来。</p>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gwlvd4aro6j308f0nyaej.jpg" alt="image.png" style="zoom: 50%;" />
<pre><code class="language-assembly">DATA SEGMENT
	INDAT DB 8
DATA ENDS

CODE SEGMENT
 ASSUME CS:CODE, DS:DATA
START:
	MOV AX,DATA
	MOV DS,AX ;初始化DS
	MOV DL,INDAT ;取操作数
	OR DL,30H ;与30H(0)作或运算，获取DL的ASCII码
	MOV AH,02H
	INT 21H
	MOV DL,'D'
	MOV AH,02H
	INT 21H
	MOV AH,4CH
	INT 21H
CODE ENDS
	END START
</code></pre>
<h3 id="442-分支结构">4.4.2 分支结构</h3>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gwlw4js8iwj30ys0egwl2.jpg" alt="image.png" style="zoom:80%;" />
<p>例：编程求分段函数Y的值。已知变量X为16位带符号数，分段函数的值要求保存到字单元Y中。函数定义如下<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gwlw7tryvsj3091044mxt.jpg" alt="image.png" style="zoom:80%;" /></p>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gwmuyj5zfaj30b10fbq3n.jpg" alt="image.png" style="zoom:80%;" />
<pre><code class="language-assembly">DATA SEGMENT
	X DW -128
	Y DW ?
DATA ENDS

CODE SEGMENT
 	ASSUME CS:CODE, DS:DATA
START:
	MOV AX, DATA
	MOV DS, AX
	MOV AX, X
	CMP AX, 0
	JG ISPN
	JZ ISZN
	MOV Y,-1
	JMP FINISH
ISPN:MOV Y,1
	JMP FINISH
ISZN:MOV Y,0
	JMP FINISH
FINISH:
	MOV AH,4CH
	INT 21H
CODE ENDS
	END START ;END START标签只是告诉编译器,从程序从这里结束,并且程序从START标号开始执行
</code></pre>
<h3 id="443-循环结构">4.4.3 循环结构</h3>
<p>循环程序由以下三个部分组成</p>
<ul>
<li>初始化部分:完成地址指针、循环计数、结束条件等初值的设置。</li>
<li>循环体部分：完成程序的基本操作；修改循环工作部分的变量地址等；检测和修改循环控制计数器，控制循环的运行和结束。</li>
<li>结束部分：完成循环结束后的处理，如数据分析、结果的存放等。</li>
</ul>
<p>循环程序结构：</p>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gwlx8gpfxrj30ys0kcn3r.jpg" alt="image.png" style="zoom: 50%;" />
<p>例1：编程显示以&quot;!&quot;结尾的字符串, 如'Welcome to MASM!'</p>
<img src="https://tva1.sinaimg.cn/large/006pkgSjly1gwlxdztk4ej30fw0qsq8c.jpg" alt="image.png" style="zoom: 50%;" />
<pre><code class="language-assembly">DATA SEGMENT
	MYSTR DB 'Welcome to MASM!'
DATA ENDS
CODE SEGMENT
	ASSUME CS:CODE, DS:DATA
START:
	MOV AX, DATA
	MOV DS, AX
	LEA SI, MYSTR
NEXTCHAR:
	MOV DL, [SI]
	CMP DL, '!'
	JZ FINISH
	MOV AH, 2
	INT 21H
	INT SI
	JMP NEXTCHAR
FINISH:
	MOV AH,2
	INT 21H ;输出'!'
	MOV AH,4CH
	INT 21H

CODE ENDS
	END START
</code></pre>
<p>例2：编程以二进制显示BX的值(假设为无符号数)，如果(BX)=20, 则显示: 0000000000010100B</p>
<pre><code class="language-assembly">CODE SEGMENT
	ASSUME CS:CODE
START:
	MOV BX,20
	MOV CX,16 ;LOOP隐含使用CX寄存器作为计数器
NEXTCHAR:
	ROL BX,1  ;从左到右取BX的最高位放在BX的最低位(循环左移)
	MOV DL,BL ;只取低八位就可以
	AND DL,1  ;BX最低位和1与运算,而D7-D1均为0
	OR DL,30H ;得到最低位ASCII码
	MOV AH,2
	INT 21H
	LOOP NEXTCHAR
FINISH:
	MOV DL,'B'
	MOV AH,2
	INT 21H
	MOV AH,4CH
	INT 21H
CODE ENDS
	END START
</code></pre>
<h3 id="444-子程序设计">4.4.4 子程序设计</h3>
<p>采用子程序进行程序设计的注意点:</p>
<ul>
<li>
<p>现场保护和恢复</p>
<ul>
<li>
<p>&quot;现场保护&quot;——子程序运行时，对可能破坏的主程序用到的寄存器、堆栈、标志位、内存数据值进行的保护。</p>
</li>
<li>
<p>&quot;现场恢复&quot;——子程序结束运行返回主程序时，对被保护的寄存器、堆栈、标志位、内存数据值的恢复。</p>
</li>
</ul>
</li>
<li>
<p>子程序可嵌套: 子程序中使用堆栈来保护断点，由堆栈操作的“后进先出”特性保证各个层次子程序断点的正确入栈和返回，实现嵌套。因此在子程序中对堆栈的操作要精确控制。</p>
</li>
<li>
<p>参数传递，主要方法有<strong>寄存器传递、内存变量传递和堆栈传递。</strong></p>
</li>
<li>
<p>编写子程序调用方法说明, 子程序调用方法说明包括</p>
<ul>
<li>子程序功能</li>
<li>入口参数</li>
<li>出口参数</li>
<li>使用的寄存器或存储器及调用实例</li>
</ul>
</li>
</ul>
<p>例1：利用寄存器传递参数。编写子程序，实现以二进制形式显示BX的值（假设为无符号数）</p>
<pre><code class="language-assembly">;-------------------------
;子程序名:DISP_BINARY
;功能:以二进制形式显示BX的值(假设为无符号数)
;入口参数:BX
;出口参数:无
;------------------------
DISP_BINARY  PROC
	PUSH  CX		 ;保护现场
	PUSH  DX
	PUSH  AX
	PUSHF
	MOV  CX,16
NEXTCHAR:
	ROL  BX,1	
	MOV  DL,BL
	AND  DL,1
	OR   DL,30H
   	MOV  AH,2
	INT  21H
	LOOP  NEXTCHAR
FINISH:
    MOV  DL,'B'
    MOV  AH,2
    INT  21H
    POPF			;恢复现场
    POP  AX		
    POP  DX
    POP  CX
    RET
DISP_BINARY  ENDP
</code></pre>
<ul>
<li>作为入口参数的寄存器可以保护也可以不保护</li>
<li><strong>作为出口参数的寄存器是不能保护的</strong></li>
<li>寄存器数量有限，只适合少量数据传递</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[3. 8086寻址方式和指令系统]]></title>
        <id>https://notes.yuyzzz.top/post/3-8086-xun-zhi-fang-shi-he-zhi-ling-xi-tong/</id>
        <link href="https://notes.yuyzzz.top/post/3-8086-xun-zhi-fang-shi-he-zhi-ling-xi-tong/">
        </link>
        <updated>2021-12-06T08:47:05.000Z</updated>
        <summary type="html"><![CDATA[<p>本章主要介绍8086的7种寻址方式，和8086的指令系统（即各种指令的功能和用法）</p>
]]></summary>
        <content type="html"><![CDATA[<p>本章主要介绍8086的7种寻址方式，和8086的指令系统（即各种指令的功能和用法）</p>
<!-- more -->
<h2 id="31-概述"><strong>3.1</strong> 概述</h2>
<p>一条指令包括操作数和操作码</p>
<p>指令的一般格式：</p>
<ul>
<li>没有操作数的指令：无操作数指令</li>
<li>两个操作数的指令称为双操作数或二地址指令。</li>
</ul>
<h2 id="32-8086寻址方式">3.2 8086寻址方式</h2>
<h3 id="321-立即寻址">3.2.1 立即寻址</h3>
<ul>
<li>
<p>操作数直接出现在指令中，此时操作数也叫立即数</p>
</li>
<li>
<p>操作数存放在代码段中，操作数紧跟在操作码后面，例如：</p>
</li>
</ul>
<pre><code>MOV AX, 2010H 
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gvymvhe7mej30al07fq33.jpg" alt="image.png" loading="lazy"></figure>
<p>约束条件：</p>
<ul>
<li>立即数只能作源操作数，不能作目标操作数</li>
<li>立即数应和目标操作数长度一致</li>
<li>立即数默认十进制，十六进制加H，八进制加Q，若十六进制以字母开头需加0为前缀</li>
<li>立即数可以用表示+、-、×、/表示的算术表达式，也可以用括号改变运算顺序</li>
<li>立即数是整数</li>
</ul>
<h3 id="322-寄存器寻址">3.2.2 寄存器寻址</h3>
<ul>
<li>操作数在指定寄存器(CPU内部寄存器)中</li>
<li>由于寄存器号较短，故采用寄存器寻址的指令的机器码长度较短</li>
</ul>
<p>约束条件：</p>
<ul>
<li>在一条指令中，寄存器寻址方式既可用于源操作数，也可用于目标操作数，还可以两者都用寄存器寻址方式。</li>
<li>源操作数与目标操作数的长度应一致。</li>
<li>两个操作数不能同时为段寄存器。</li>
<li>目标操作数不能是代码段寄存器。</li>
</ul>
<p>接下来的五种寻址方式的操作数都在存储器中，因此称为存储器寻址，其操作数称为内存操作数</p>
<h3 id="323-直接寻址">3.2.3 直接寻址</h3>
<ul>
<li>指令中<strong>给出操作数的有效地址</strong>，为了与立即数区别，该有效地址必须用<code>[]</code>括起</li>
<li><strong>操作数在存储器中</strong></li>
</ul>
<pre><code>MOV AX, [2010H]
</code></pre>
<p>若:(DS)=2000H, 指令执行后(AX)=1225H</p>
<figure data-type="image" tabindex="2"><img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gw0tog3tr3j30ca0almxm.jpg" alt="image.png" loading="lazy"></figure>
<p>约束条件：</p>
<ul>
<li>若没有前缀指明操作数在哪个段，则默认放在数据段</li>
<li>允许操作数存放在代码段、堆栈段或附加段。此时就需要在指令中指明段超越,如：MOV ES:[1225H], AX</li>
<li>在汇编语言指令中，可以用符号地址代替数值地址</li>
</ul>
<h3 id="324-寄存器间接寻址">3.2.4 寄存器间接寻址</h3>
<ul>
<li>操作数的有效地址放在基址寄存器BX, BP或变址寄存器SI, DI中，指令中指定的寄存器名要用<code>[]</code>括起来</li>
<li>如果有效地址在SI、DI和BX中，则以DS段寄存器的内容为段值；如果有效地址在BP中，则以SS段寄存器的内容为段值</li>
</ul>
<pre><code>MOV AX, [SI]
</code></pre>
<p>若 (DS)=2000H, (SI) = 2010H, 则执行后(AX)=1225H</p>
<figure data-type="image" tabindex="3"><img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gw0u3c9nyhj30dv0bnjrx.jpg" alt="image.png" loading="lazy"></figure>
<h3 id="325-寄存器相对寻址">3.2.5 寄存器相对寻址</h3>
<ul>
<li>
<p>操作数在存储器中，有效地址是基址或变址寄存器与偏移量之和</p>
</li>
<li>
<p>操作数的物理地址=(DS)x 10H+(SI)/(DI)/(BX)+8位或16位偏移量</p>
<p>或：操作数的物理地址=(SS)x 10H+(BP)+8位或16位偏移量</p>
</li>
<li>
<p>8位偏移量的取值范围为：00～0FFH(即+127D～-128D)</p>
</li>
<li>
<p>16位位移量的取值范围为：0000～0FFFFH(即+32767D～-32768D)</p>
</li>
<li>
<p>8086允许以下三种方式表示寄存器相对寻址，他们是等效的</p>
<pre><code>MOV AX，[BX]+8 
MOV AX，8[BX] 
MOV AX，[BX+8]
</code></pre>
</li>
</ul>
<p>若(DS)=2000H, (BX)=2008H,则执行后(AX)=1225H</p>
<figure data-type="image" tabindex="4"><img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gw0uzukszzj30dv0b174t.jpg" alt="image.png" loading="lazy"></figure>
<h3 id="326-基址变址寻址">3.2.6 基址变址寻址</h3>
<ul>
<li>
<p>有效地址是指令中基址寄存器和变址寄存器的和</p>
</li>
<li>
<p>操作数在内存，使用基址寄存器BX时，操作数默认存放在数据段中；使用基址寄存器BP时，操作数默认存放在堆栈段中，允许段超越</p>
<p>操作数的物理地址=（DS）×10H+（SI）/（DI）+（BX）</p>
<p>或 =（SS）×10H+（SI）/（DI）+（BP）</p>
</li>
</ul>
<pre><code>MOV AX, [BX][SI]
</code></pre>
<p>若(DS)=2000H, (BX)=2008H, (SI)=8H, 则执行后(AX)=1225H</p>
<h3 id="327-相对基址变址寻址">3.2.7 相对基址变址寻址</h3>
<ul>
<li>
<p>有效地址是指令中基址寄存器值和变址寄存器值及8位或16位偏移量偏移量之和</p>
</li>
<li>
<p>使用基址寄存器BX时，操作数默认存放在数据段中；使用基址寄存器BP时，操作数默认存放在堆栈段中，允许段超越</p>
<p>操作数的物理地址=（DS）×10H+ (SI)/(DI) +（BX）+ 8位或16位偏移量</p>
<p>或 =（SS）×10H+ (SI)/(DI) +（BP）+ 8位或16位偏移量</p>
</li>
</ul>
<pre><code>MOV AX, 3[BX][SI]
</code></pre>
<p>若(DS)=2000H, (BX)=2008H, (SI)=5H, 则执行后(AX)=1225H</p>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gw0vkfk4orj30re0mcgp9.jpg" alt="image.png" style="zoom:50%;" />
<h2 id="33-8086指令系统">3.3 8086指令系统</h2>
<p>六大指令类型：数据传送指令、算术运算指令、位运算指令、串操作指令、控制转移指令、处理器控制指令</p>
<h3 id="331-数据传送指令">3.3.1 数据传送指令</h3>
<p>指将数据或地址传送到寄存器，存储单元或I/O端口中</p>
<p><strong>数据传送指令的特点：</strong></p>
<ul>
<li>除了POPF和SAHF指令外，其他的数据传送指令的执行结果都不影响标志位</li>
<li>指令中如果列出两个操作数，则指令的执行过程是：目标操作数←源操作数。指令中如果仅列出一个操作数，则另一个操作数为隐含操作数</li>
</ul>
<ol>
<li>
<p>通用数据传送指令</p>
<ul>
<li>
<p><strong>传送指令</strong></p>
<pre><code>MOV 目标操作数, 源操作数
</code></pre>
<p>说明：</p>
<ul>
<li>源操作数可以是立即数、寄存器或内存操作数</li>
<li>目的操作数可以是寄存器、内存操作数</li>
<li>立即数和CS寄存器只能成为源操作数，不能成为目标操作数</li>
<li>IP和FR都不允许成为源操作数和目标操作数</li>
<li>立即数不允许传送到DS、ES或SS</li>
<li>源操作数和目标操作数不能同时是内存操作数，也不能同时是段寄存器</li>
<li>源操作数和目标操作数类型必须相同，为字节或字类型</li>
</ul>
</li>
<li>
<p><strong>数据交换指令</strong>：源操作数与目标操作数的内容互换</p>
<pre><code>XCHG 目标操作数, 源操作数
</code></pre>
<p>说明：</p>
<ul>
<li>源操作数和目标操作数都可以是寄存器或内存操作数</li>
<li>不能同时是内存操作数、不能同时是寄存器AX</li>
<li>段寄存器、寄存器IP或立即数不能作为源操作数和目标操作数</li>
</ul>
</li>
<li>
<p><strong>堆栈操作指令</strong>：操作数的类型只能是<strong>字(两个字节)</strong>，而不是字节，并且不能是立即数</p>
<ul>
<li>
<p><strong>进栈指令</strong>：源操作数入栈，且栈指针SP－2</p>
<pre><code>PUSH 源操作数
</code></pre>
<p>SP = SP -1 操作低字节</p>
<p>SP = SP -2 操作高字节</p>
<p>说明：</p>
<ul>
<li>PUSH命令总是把两个字节一起推入堆栈</li>
<li>源操作数可以是寄存器或内存操作数</li>
</ul>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gw238xakx3j31aw0sih0p.jpg" alt="image.png" style="zoom:43%;" />
</li>
<li>
<p>出栈指令：弹出栈顶两个字节</p>
<pre><code>POP 目标操作数
</code></pre>
<p>说明：</p>
<ul>
<li>执行后SS:SP指针指向目标操作数</li>
<li>SP = SP + 2</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>累加器专用传送指令</p>
<p>XLAT, 将内存表格中指定单元值送入寄存器AL, 把数据段中偏移地址为BX+AL的内存单元的内容送到AL中，即：AL← (BX + AL)</p>
<pre><code>XLAT
XLAT 表格首地址
</code></pre>
<p>约束：</p>
<ul>
<li>BX保存内存表格的首地址；寄存器AL保存表格中某单元在此表格中的偏移量</li>
<li>该指令能访问的内存表格中的数据只能是字节类型的</li>
<li>该指令能访问的内存表格的最大容量是256字节</li>
</ul>
</li>
<li>
<p>地址传送指令</p>
<ul>
<li>
<p>取有效地址指令LEA: 取内存单元mem的<strong>有效地址</strong>，送入16位寄存器中</p>
<pre><code>LEA r16, mem
</code></pre>
</li>
<li>
<p>地址指针装入DS指令LDS: 将内存中32位(逻辑地址)源操作数的低16位送入指定寄存器r16中，高16送入段寄存器DS中</p>
<pre><code>LDS r16, m32
</code></pre>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gw32yzvn21j311y0swwwy.jpg" alt="image.png" style="zoom:40%;" />
</li>
<li>
<p>地址指针装入ES指令LES: 将上述DS换成ES</p>
</li>
</ul>
</li>
<li>
<p>标志传送指令</p>
<ul>
<li>取标志指令LAHF(Load AH from flags): 源操作数隐含为标志寄存器PSW的低8位，目标操作数隐含为寄存器AH</li>
<li>置标志指令SAHF(Store AH onto flags): 将AH的内容写入标志寄存器的0-7位</li>
<li>标志入栈指令PUSHF: 将标志寄存器入栈, ① SP ← SP–2; ② (SP + 1，SP) ← FLAG</li>
<li>标志出栈指令POPF: 将数据出栈到标志寄存器，① FLAG ← (SP+1，SP); ② SP ← SP + 2</li>
</ul>
</li>
<li>
<p>数据类型转换指令</p>
<ul>
<li>
<p>字节转换为字指令CBW：将寄存器AL中数据的符号位扩展到AH中，使字节转换为字</p>
<p>当：(AL)&lt;80H, AH&lt;-00H, (AL)&gt;=80H, AH&lt;-FFH</p>
</li>
<li>
<p>字转换为双字指令CWD: 将寄存器AX中数据的符号位扩展到DX，使字转换为双字</p>
<p>当：(AX)&lt;8000H, DX&lt;-0000H; (AX)&gt;=8000H, DX&lt;-FFFFH</p>
</li>
</ul>
</li>
</ol>
<h3 id="332-算术运算指令">3.3.2 算术运算指令</h3>
<ul>
<li>双操作数指令中，除了源操作数是立即数这种情况外， 其余情况下，必须有一个操作数在寄存器中</li>
<li>单操作数指令中的操作数不允许是立即数</li>
</ul>
<ol>
<li>
<p>加法指令</p>
<ul>
<li>
<p>不带进位的加法指令 ADD；AF、CF、OF、PF、SF、ZF受影响</p>
<pre><code>ADD dest, src
;即(dest)&lt;- (dest)+(src)
</code></pre>
</li>
<li>
<p>带进位的加法指令 ADC；AF、CF、OF、PF、SF、ZF受影响</p>
<pre><code>ADC dest, arc
;即(dest)&lt;- (dest)+(src)+CF
</code></pre>
</li>
<li>
<p>加1指令 INC；AF、OF、PF、SF、ZF受影响</p>
<pre><code>INC dest
;即(dest)&lt;-(dest)+1
</code></pre>
</li>
</ul>
</li>
<li>
<p>减法指令</p>
<ul>
<li>
<p>不带借位的减法指令SUB，当减去一个立即数字节时，应先扩展为16位操作数</p>
<pre><code>SUB dest, arc
</code></pre>
</li>
<li>
<p>带借位的减法SBB：进行减法时同时减去CF；AF、CF、OF、PF、SF、ZF受影响</p>
<pre><code>SBB dest, arc
</code></pre>
</li>
<li>
<p>减1指令DEC, AF、OF、PF、SF、ZF受影响</p>
<pre><code>DEC dest
</code></pre>
</li>
<li>
<p>比较指令CMP，从目的操作数（左边）中减去源操作数(右边)，但结果不送回，而只按减的结果影响标志</p>
<p>AF、CF、OF、PF、SF、ZF受影响，源操作数和目标操作数类型要相同</p>
<pre><code>CMP dest, src
</code></pre>
</li>
<li>
<p>求补指令NEG</p>
<pre><code>NEG dest
</code></pre>
</li>
</ul>
</li>
<li>
<p>乘法指令：字节乘时，高8位存放在AH中，低8位存放在AL中；字乘时，被乘数隐含为AX，高16位存放于DX中，低16位存放于AX中</p>
<ul>
<li>
<p>无符号数乘法指令</p>
<pre><code>MUL src
</code></pre>
<p>CF、OF受影响, AF、PF、SF、ZF 不受影响，DX和AH中分别为乘积高位，如乘积高位不为0，CF和OF为1，表示结果为有效数；若运算结果OF=CF=0，表示其为无效数据。</p>
</li>
<li>
<p>有符号数乘法指令</p>
<pre><code>IMUL src
</code></pre>
<p>CF、OF 受影响，AF、PF、SF、ZF 无意义。如果乘积的高一半为低一半的符号扩展，则CF和OF置0，表示其为无效数据。当CF和OF为1 时，说明AH 或DX 中的内容是乘积的高位</p>
</li>
</ul>
</li>
<li>
<p>除法指令：要求被除数是除数的双倍字长</p>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gw3gb8wuk0j30ts0e6ahb.jpg" alt="image.png" style="zoom:50%;" />
</li>
<li>
<p>BCD码调整指令:</p>
<p>6条，均为隐含寻址方式，隐含操作数为AL或AL、AH；</p>
<p>不能单独使用，要紧跟在相应算术运算指令之后；</p>
<p>执行结果为压缩BCD码和扩展BCD码表示的十进制数</p>
<ul>
<li>
<p>压缩BCD码的加减法调整：</p>
<ul>
<li>DAA: 若AL的低4位&gt;9或AF=1，则进行AL&lt;-(AL)+06H修正，同时AF置1。若AL的高4位&gt;9或CF=1，则进行AL&lt;-(AL)+60H修正，同时CF置1。</li>
<li>DAS: 若AL的低4位&gt;9或AF=1，则进行AL&lt;-(AL)-06H修正，同时AF置1。若AL的高4位&gt;9或CF=1，则进行AL-(AL)-60H修正，同时CF置1。</li>
</ul>
</li>
<li>
<p>非压缩BCD码的加减乘除调整：</p>
<ul>
<li>
<p>AAA: 加法调整</p>
<p>①若AL中低4位&lt;9且AF=0，则跳过②;</p>
<p>②若AL中的低4位&gt;9或AF=1，则进行AL&lt;-(AL)+06H修正，同时，AH&lt;-(AH)+1，AF置1。</p>
<p>③清除AL寄存器的高4位。</p>
<p>④AF值送CF。</p>
</li>
<li>
<p>AAS：减法调整</p>
<p>①若AL中低4位&lt;9且AF=0，则跳过②;</p>
<p>②若AL中的低4位&gt;9或AF=1，则减6，AF置1。</p>
<p>③清除AL寄存器的高4位。AF值送CF。</p>
</li>
<li>
<p>AAM：乘法调整，把AL寄存器的内容除以10，商放在AH寄存器中，余数保存在AL寄存器中，用于MUL之后，把AL中的乘积调整成非压缩BCD码，结果存于寄存器AX中。</p>
</li>
<li>
<p>AAD：除法调整，将AH寄存器的内容乘以10后加上AL的内容，结果回送AL，同时将AH清0。</p>
</li>
</ul>
</li>
</ul>
</li>
</ol>
<h3 id="333-位运算指令">3.3.3 位运算指令</h3>
<ol>
<li>
<p>逻辑运算：按位进行，NOT不影响标志位，其他指令：CF, OF为0，AF无意义，SF, ZF, PF被影响</p>
<ul>
<li>AND：按位与</li>
<li>OR：按位或</li>
<li>NOT：按位非，操作数不能是立即数</li>
<li>XOR：按位异或</li>
<li>TEST：执行与操作，影响标志位，但不保留结果</li>
</ul>
</li>
<li>
<p>位移指令：CF值由运算结果定；移动一位时由指令直接给出，此时OF的值根据符号位确定；两位及以上时移动次数由寄存器CL指定</p>
<ul>
<li>
<p>SHL: 逻辑左移</p>
</li>
<li>
<p>SAL: 算数左移</p>
</li>
<li>
<p>SHR: 逻辑右移</p>
</li>
<li>
<p>SAR: 算数右移</p>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gwf2nyrvgej30m706075f.jpg" alt="image.png" style="zoom: 80%;" />
</li>
<li>
<p>ROL: 循环左移</p>
</li>
<li>
<p>ROR: 循环右移</p>
</li>
<li>
<p>RCL: 带进位循环左移</p>
</li>
<li>
<p>RCR: 带进位循环右移</p>
</li>
</ul>
</li>
</ol>
<h3 id="334-串操作指令">3.3.4 串操作指令</h3>
<p>串操作指令的特点:</p>
<ul>
<li>源串一般存放在数据段，偏移地址由SI指定,允许段重设。</li>
<li>目标串必须在附加段，偏移地址由DI指定。</li>
<li>指令自动修改地址指针，修改方向由DF决定。DF=0 增地址方向；DF=1 减地址方向。</li>
<li>数据块长度值由CX指定。</li>
<li>可增加自动重复前缀以实现自动修改CX内容</li>
</ul>
<ol>
<li>
<p>串传送指令：MOVSB/MOVSW</p>
<ul>
<li>
<p>将源字节（字）串传送给目的字节串（或字串）</p>
</li>
<li>
<p>源字节串（字串）的地址由DS:SI 提供，</p>
<p>目的字节串（字串）的地址由ES:DI 提供。</p>
</li>
<li>
<p>方向标志DF为0，则SI和DI做自动增量变化，即每传送1个字节，自动加1，而每传送1个字, 自动减2；如果DF为1，则SI和DI作自动减量变化，即每传送1个字节，自动减1，而每传送1个字，自动减2</p>
</li>
</ul>
</li>
<li>
<p>串装入指令：LODSB/LODSW</p>
<ul>
<li>将源操作数提供的字节（字）取到AL（AX），所有标志位不受影响</li>
<li>每次重复执行指令会把累加器的内容冲掉，因此，这两条指令只用于循环程序中，而不加重复前缀</li>
</ul>
</li>
<li>
<p>重复前缀：用于重复执行某些指令</p>
<img src="C:\Users\framezhi\AppData\Roaming\Typora\typora-user-images\image-20211115165033876.png" alt="image-20211115165033876" style="zoom:80%;" />
</li>
<li>
<p>串扫描指令：SCASB/SCASW</p>
<ul>
<li>
<p>按照累加器中给出的字节或字对ES:DI所指的字节串或字串进行检索，每检索一次，便对DI作一次修改</p>
</li>
<li>
<p>影响AF、CF、OF、PF、SF、ZF</p>
</li>
<li>
<p>通过加重复前缀实现在字节串中或字串中检索和累加器内容相同的或不同的字节或字</p>
</li>
<li>
<p>REPE SCASB 用来检索和AL内容不同的字节，</p>
<p>REPNZ SCASW 用来检索和AX内容相同的字。</p>
</li>
</ul>
</li>
<li>
<p>串送存指令：STOSB/STOSW</p>
<ul>
<li>将AL（AX）中的字节（或字）存入ES:DI 所指单元</li>
<li>用于将输入的一串数据填入内存一个区域；STOSB和STOSW指令前加重复前缀时，可以使内存一个区域填满某个值。</li>
</ul>
</li>
<li>
<p>串比较指令：CMPSB/CMPSW</p>
<ul>
<li>功能：CMPSB/CMPSW指令对存储器内的2个字节/字串进行比较。</li>
<li>AF、CF、OF、PF、SF、ZF受影响</li>
<li>串比较指令常与条件重复前缀连用，指令的执行不改变操作数，仅影响标志位。</li>
</ul>
</li>
</ol>
<h3 id="335-程序控制指令">3.3.5 程序控制指令</h3>
<ol>
<li>
<p>转移指令：修改指令的<u>偏移地址</u>或<u>段地址及偏移地址</u>实现程序的转移</p>
<p>无条件转移指令：JMP。IP←(IP)+以标号或立即数给出的偏移量，(CS)不变。可以为段内直接转移、段内间接转移、段间直接转移、段间间接转移。</p>
<ul>
<li>
<p>段内转移：转移的目标地址在当前代码段内</p>
<ul>
<li>
<p>段内直接转移：指令中直接给出目标地址</p>
<img src="https://tva1.sinaimg.cn/large/006pkgSjly1gwfyiomzuqj30mi028js5.jpg" alt="image.png" style="zoom:80%;" />
</li>
<li>
<p>段内间接转移：由指令中的寄存器或存储器操作数指出目标地址</p>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gwfyjjxd3tj30ba01mweh.jpg" alt="image.png" style="zoom:80%;" />
</li>
</ul>
</li>
<li>
<p>段间转移：转移的目标地址不在当前代码段内</p>
<ul>
<li>
<p>段间直接转移：指令中直接给出目标地址；IP&lt;-标号所在存储单元的偏移地址，CS&lt;-标号所在存储单元的段地址。格式: JMP FAR PTR 标号</p>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gwfyn1e3bsj30k300z74e.jpg" alt="image.png" style="zoom:80%;" />
</li>
<li>
<p>段间间接转移：由指令中的32位存储器操作数指出目标地址, IP&lt;-操作数指出的双字存储单元的低16位数值，CS&lt;-操作数指出的双字存储单元的高16位数值。格式: JMP DWORD PTR 存储单元</p>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gwfyndlm0vj30hw00tjrd.jpg" alt="image.png" style="zoom:80%;" />
</li>
</ul>
</li>
</ul>
<p>条件转移指令：</p>
<ul>
<li>
<p>根据单个标志位状态判断的转移指令</p>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gwfytl3iobj30i10dljvg.jpg" alt="image.png" style="zoom:80%;" />
</li>
<li>
<p>根据两个无符号数的比较结果判断的转移指令</p>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gwfyu32s9mj30jr0awad0.jpg" alt="image.png" style="zoom:80%;" />
</li>
</ul>
</li>
<li>
<p>循环控制指令</p>
<ul>
<li>
<p>控制程序在以当前IP为中心的-128~+127范围内循环</p>
</li>
<li>
<p>循环次数由CX寄存器指定</p>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gwgy7ae5y1j30hc03s404.jpg" alt="image.png" style="zoom:80%;" />
</li>
</ul>
</li>
<li>
<p>过程调用和返回</p>
<p>调用指令的执行过程</p>
<ul>
<li>将调用指令的下一条指令的地址（断点）压入堆栈</li>
<li>获取子过程的入口地址（子过程第1条指令的偏移地址）</li>
<li>（执行子过程，含相应参数的保存及恢复）</li>
<li>将断点偏移地址由堆栈弹出，返回原程序</li>
</ul>
<p>段内调用：子过程与原调用程序在同一代码段，在调用之前只需保护断点的偏移地址(IP)。直接调用时，转移地址不能用变量，而只能用相对于IP的标号</p>
<ul>
<li>段内直接调用：格式：<code>CALL 过程名</code>；①SP&lt;-(SP)-2; ②SS:SP&lt;-(IP); ③IP&lt;-(IP)+16位偏移量。</li>
<li>段内间接调用：格式：<code>CALL 寄存器</code>；①SP&lt;-(SP)-2; ②SS:SP&lt;-(IP); ③IP&lt;-寄存器的值</li>
</ul>
<p>段间调用：子过程与原调用程序不在同一代码段，在调用之前需保护断点的段基地址和偏移地址。先将断点的CS压栈，再压入IP</p>
<ul>
<li>
<p>段间直接调用：格式：<code>CALL FAR PTR 过程名</code></p>
<p>①SP&lt;-(SP)-2;②SS:SP&lt;-(CS); ③SP&lt;-(SP)-2;④SS:SP&lt;-(IP); ⑤IP&lt;-过程入口偏移地址; ⑥CS&lt;-过程入口段地址</p>
</li>
<li>
<p>段间间接调用：格式：<code>CALL DWORD PTR 存储单元地址</code></p>
<p>①SP&lt;-(SP)-2; ②SS:SP&lt;-(CS); ③SP&lt;-(SP)-2; ④SS:SP&lt;-(IP);</p>
<p>⑤IP&lt;-双字存储单元低16位数据; ⑥CS&lt;-双字存储单元高16位数据</p>
</li>
</ul>
<p>返回指令：从堆栈中弹出断点地址，返回原程序，RET指令一般位于子程序的最后。RET指令的类型和过程调用指令CALL的类型(段内返回类型/段间返回类型)要一致。</p>
<ul>
<li>无参数段内返回</li>
<li>有参数段内返回</li>
<li>无参数段间返回</li>
<li>有参数段间返回</li>
</ul>
</li>
<li>
<p>中断指令</p>
<ul>
<li>中断指令：格式：<code>INT n</code>，产生一个中断类型号为n的软中断</li>
<li>溢出中断指令：格式：<code>INTO</code>, 当OF=1，产生中断类型号为4的中断</li>
<li>中断返回指令：格式：<code>IRET</code>, 从中断服务程序返回断点处，并将标志寄存器的值从堆栈弹出，继续执行原程序。</li>
</ul>
</li>
</ol>
<h3 id="336-处理器控制指令">3.3.6 处理器控制指令</h3>
<ol>
<li>
<p>标志位操作指令</p>
<img src="https://tva1.sinaimg.cn/large/006pkgSjly1gwh199jchej30mc0botc5.jpg" alt="image.png" style="zoom:80%;" />
</li>
<li>
<p>外部同步指令</p>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[三、数据链路层]]></title>
        <id>https://notes.yuyzzz.top/post/san-shu-ju-lian-lu-ceng/</id>
        <link href="https://notes.yuyzzz.top/post/san-shu-ju-lian-lu-ceng/">
        </link>
        <updated>2021-11-10T08:52:50.000Z</updated>
        <summary type="html"><![CDATA[<p>数据链路层为OSI模型中的第二层，位于物理层和网络层之间。本章主要说明如何实现数据链路层的功能：<strong>成帧，差错控制，流量控制，透明传输，链路控制</strong>等</p>
]]></summary>
        <content type="html"><![CDATA[<p>数据链路层为OSI模型中的第二层，位于物理层和网络层之间。本章主要说明如何实现数据链路层的功能：<strong>成帧，差错控制，流量控制，透明传输，链路控制</strong>等</p>
<!-- more -->
<p>数据链路层的功能：在不可靠的物理链路上实现可靠的数据传输</p>
<ul>
<li>数据成帧：传输单位：帧，帧同步</li>
<li>差错控制：纠错；检错</li>
<li>流量控制：收、发方速率适配</li>
<li>透明传输：无论上层什么数据，链路层都可同样传输</li>
<li>链路控制：收发方确认对方是否准备好；数据链路的建立、维持、释放</li>
<li>寻址：MAC地址</li>
</ul>
<h2 id="31-成帧">3.1 成帧</h2>
<ul>
<li>帧定界问题（将比特流分成帧）</li>
<li>透明传输（任意字符都可以传输）</li>
</ul>
<h3 id="311-字符计数法">3.1.1 字符计数法</h3>
<p>在帧头部使用一个字符来标识帧内字符数目，出错后难以纠错</p>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gw4dyjr3vdj30wq0cidq8.jpg" alt="image.png" style="zoom:50%;" />
<h3 id="312-带字符填充的首尾定界法">3.1.2 带字符填充的首尾定界法</h3>
<p>填充ASCII字符：</p>
<ul>
<li>ASCII字符：帧头DLE STX，帧尾DLE ETX
<ul>
<li>DLE (Data Link Escape);</li>
<li>STX (Start of Text);</li>
<li>ETX (End of Text)</li>
</ul>
</li>
<li>如果字符中出现DLE，就添一个DLE，称为字符填充。</li>
<li>缺点：完全依赖8位字符，特别是ASCII字符。</li>
</ul>
<h3 id="313-带位填充的首尾定界法">3.1.3 带位填充的首尾定界法</h3>
<ul>
<li>特殊位模式01111110作为定界符</li>
<li>规定：
<ul>
<li>数据中若有连续5个“1”，发方就添“0”。</li>
<li>收方遇到01111110知帧始或帧尾，遇到连续5个“1”，则去掉后面的一个“0”。</li>
</ul>
</li>
</ul>
<h3 id="314-物理层编码违例定界法">3.1.4 物理层编码违例定界法</h3>
<p>适用于在传输编码策略中采用冗余技术的网络。</p>
<p>例如：用两个物理位译码成数据的一位</p>
<ul>
<li>数据位1：高－低电平对</li>
<li>数据位0：低—高电平对</li>
<li>无效物理编码：高—高电平对、低—低电平对</li>
<li>使用无效物理编码作为定界符</li>
</ul>
<h2 id="32-差错校验和校正">3.2 差错校验和校正</h2>
<h3 id="321-产生差错的原因">3.2.1 产生差错的原因</h3>
<ul>
<li>噪声干扰</li>
<li>数据处理引起：
<ul>
<li>压缩、解压</li>
<li>调制、解调</li>
</ul>
</li>
<li>信道失真</li>
<li>其他原因</li>
</ul>
<p>差错类型：</p>
<ul>
<li>单个错误：分散在各个块中</li>
<li>突发错误：集中在某个块中</li>
</ul>
<h3 id="322-处理策略差错编码">3.2.2 处理策略(差错编码)</h3>
<ul>
<li>检错码: 加入冗余位，使接收方知道有差错发生，但不知是什么差错，然后让发送方重传。</li>
<li>纠错码: 在每一个要发送的数据块上附加足够的冗余信息, 使接收方能够推导出已发出字符应该是什么.纠错码要比检错码增加更多的冗余位。</li>
</ul>
<h3 id="323-海明码">3.2.3 海明码</h3>
<p>海明距离：两个码字中不同位的个数。 D(1101, 0111)=2</p>
<ul>
<li>检错：为检测出d比特错，需使用海明距离为d+1的编码</li>
<li>纠错：为纠正d比特错，需使用海明距离为2d+1的编码</li>
</ul>
<p>海明码编码：</p>
<ul>
<li>
<p>海明码只能检测出2位错，纠1位错</p>
</li>
<li>
<p>海明码默认进行偶校验(1的个数如果为奇数则在前面加个1，使1的个数变成偶数，否则加0)</p>
</li>
<li>
<p>设要传输的数据位是m位，冗余位是r位，则总传输位数<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>=</mo><mi>m</mi><mo>+</mo><mi>r</mi></mrow><annotation encoding="application/x-tex">n=m+r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span></span></span></span>, 应满足, $ 2^{r} \geq m+r+1$</p>
</li>
<li>
<p>编码格式：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>r</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>r</mi><mn>2</mn></msub><mo separator="true">,</mo><msub><mi>m</mi><mn>3</mn></msub><mo separator="true">,</mo><msub><mi>r</mi><mn>4</mn></msub><mo separator="true">,</mo><msub><mi>m</mi><mn>5</mn></msub><mo separator="true">,</mo><msub><mi>m</mi><mn>6</mn></msub><mo separator="true">,</mo><msub><mi>m</mi><mn>7</mn></msub><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">r_1, r_2, m_3, r_4, m_5, m_6, m_7...</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">7</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span></span></span></span>；其中r为校验位，m为信息位，信息位第k位，和相应2的整次幂的校验位有关。</p>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gw6k5qntfpj30qs0eaafv.jpg" alt="image.png" style="zoom:50%;" />
<p>校验位<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>r</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">r_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的计算：各相关信息位的异或</p>
<p>收方：</p>
<ul>
<li>设C=0，</li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>r</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">r_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>与相关信息位的异或为0，C+=0</li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>r</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">r_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 与相关信息位的异或为1，C+=i</li>
<li>C为出错位置。</li>
</ul>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gw6kn5mn3ij31180nq487.jpg" alt="image.png" style="zoom:50%;" />
</li>
</ul>
<h3 id="324-crc编码法">3.2.4 CRC编码法</h3>
<p>CRC码即多项式编码，也称<strong>循环冗余码</strong>，k+1位编码可写成k阶多项式</p>
<p>CRC编码法：</p>
<ul>
<li>发收方规定一个生成多项式G(x)，设为r阶，规定最高阶和最低阶系数为1</li>
<li>将要发送的帧表示成M(x)多项式</li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>x</mi><mi>r</mi></msup><mi>M</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">x^rM(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span>对应于帧的二进制数后加r个0</li>
<li>用G(x)模2除<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>x</mi><mi>r</mi></msup><mi>M</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">x^rM(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span>，得商和余数</li>
<li>采用“模2减”，用<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>x</mi><mi>r</mi></msup><mi>M</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">x^rM(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span>减去余数作为M(x)按G(x)的CRC校验码。</li>
</ul>
<p>关于模2运算</p>
<img src="https://img-blog.csdnimg.cn/20181112111518141.png"  />
<p>模2除法：采用模2减法，不借位</p>
<ol>
<li>除数与被除数最高几位（与除数位数相同）做异或，商1。（除数首位必须为1）</li>
<li>余数先去掉首位，若此时余数最高位为1，商1，并对以它为除数继续模2除。 若最高位为0，则商0，重复步骤2。</li>
<li>直到余数位数小于除数位数时，运算结束。</li>
</ol>
<h2 id="33-停止等待协议">3.3 停止等待协议</h2>
<h3 id="331-无限制单向数据传输协议">3.3.1 无限制单向数据传输协议</h3>
<p>条件：</p>
<ol>
<li>一个机器发数据，另一机器收数据；</li>
<li>网络层总是准备好分组传送</li>
<li>通道无错</li>
<li>DLL层处理速度无穷大。</li>
</ol>
<h3 id="332-单向停-等协议">3.3.2 单向停-等协议</h3>
<p>条件：</p>
<ol>
<li>一个机器发数据，另一机器收数据</li>
<li>网络层总是准备好分组传送</li>
<li>通道无错</li>
<li>DLL层处理速度有限</li>
</ol>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gw6nrzb9kej314u0pun0z.jpg" alt="image.png" style="zoom:50%;" />
<h3 id="333-有错-单向数据传输协议">3.3.3 有错、单向数据传输协议</h3>
<p>条件：</p>
<ol>
<li>一个机器发数据，另一机器收数据</li>
<li>网络层总是准备好分组传送</li>
<li>通道有错</li>
<li>DLL层处理速度有限</li>
</ol>
<p>数据帧或确认帧丢失：超时重传</p>
<p>收到重复帧：可给帧独一无二的序号</p>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gw6nwzk51pj31280r0q7z.jpg" alt="image.png" style="zoom:50%;" />
<img src="/Users/zhaoyuan/Library/Application Support/typora-user-images/image-20211107162433929.png" alt="image-20211107162433929" style="zoom:50%;" />
<ul>
<li>此图中没有表示出当收方又到一个错帧，向发方回应NAK帧</li>
<li>计数器为了解决死锁问题，重发时间选择重要，一般选为略 大于“从发完数据帧到收到回答帧所需的平均时间”。</li>
<li>超时重传时间设置太短，解决办法：对发送的每一帧加序号。</li>
<li>本协议只需一位做序号。</li>
</ul>
<p>确认帧必须表明这样两个含义：</p>
<ul>
<li>第n – 1号帧和这以前的各帧都收到了</li>
<li>我期望收到第n号帧。确认帧还可能包含这样的含义：当A和B都有数据帧向对方发送时，确认信息可以放 在数据帧中捎带地发送给对方。</li>
</ul>
<p>捎带确认：为了减少发送确认帧，可以暂时延迟确认，以便将确认帧钩在一个外发的数据帧，若无法捎带，当一个控制捎带确认的计时器超时后，单独发送确认帧</p>
<h2 id="34-窗口滑动协议">3.4 窗口滑动协议</h2>
<p>条件：</p>
<ol>
<li>双向传输数据</li>
<li>网络层总是准备好分组传送</li>
<li>通道有错</li>
<li>DLL层处理速度有限</li>
</ol>
<h3 id="341-窗口任何一端都有两个窗口">3.4.1 窗口(任何一端都有两个窗口)</h3>
<p><strong>发送窗口(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>W</mi><mi>T</mi></msub></mrow><annotation encoding="application/x-tex">W_T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>)：存放着已发送但还未确认的帧序号</strong></p>
<ol>
<li>发帧(帧存入缓冲区)，上界加1</li>
<li>收到窗口下界ACK信息，下界加1</li>
<li>收到窗口外的ACK信息，丢掉</li>
</ol>
<p><strong>接收窗口(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>W</mi><mi>R</mi></msub></mrow><annotation encoding="application/x-tex">W_R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.00773em;">R</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>)：存放应接收的帧序号</strong></p>
<ol>
<li>
<p>收到接收窗口外的序号帧，丢掉</p>
</li>
<li>
<p>收到接收窗口下界序号帧，接收窗口向前移一步</p>
</li>
</ol>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gw7rvullggj30wk0non2q.jpg" alt="image.png" style="zoom:67%;" />
<ul>
<li>
<p>每个待发送的帧被赋予一个序列号Seq，取值范围为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn><mo>∼</mo><msup><mn>2</mn><mi>n</mi></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">0\sim2^{n}-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.747722em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>(n位字段)</p>
</li>
<li>
<p>建立缓冲区：</p>
<p>发送窗口：缓存已发送、待确认的帧</p>
<ul>
<li>顺序接收来自网络层的分组，成帧，赋予序列号</li>
<li>最多保存w个已发送、待确认的帧</li>
<li>窗口达到最大值W时强制关闭网络层</li>
</ul>
<p>接收窗口：缓存期待接收帧（序号）</p>
<ul>
<li>对进入窗口的帧顺序提交网络层，进行确认</li>
<li>落在窗口外的帧被丢弃</li>
</ul>
</li>
</ul>
<h3 id="342-三种窗口滑动协议">3.4.2 三种窗口滑动协议</h3>
<ol>
<li>
<p>一位滑动窗口协议(停止等待协议)</p>
<ul>
<li>发送窗口(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>W</mi><mi>T</mi></msub></mrow><annotation encoding="application/x-tex">W_T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>)=1</li>
<li>接收窗口(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>W</mi><mi>R</mi></msub></mrow><annotation encoding="application/x-tex">W_R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.00773em;">R</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>)=1</li>
</ul>
<p>信道利用率：$ U=\frac{T_f}{T_f+R}<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">，</mi></mrow><annotation encoding="application/x-tex">，</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0em;vertical-align:0em;"></span><span class="mord cjk_fallback">，</span></span></span></span>T_f<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">为</mi><mi mathvariant="normal">帧</mi><mi mathvariant="normal">传</mi><mi mathvariant="normal">输</mi><mi mathvariant="normal">时</mi><mi mathvariant="normal">间</mi><mi mathvariant="normal">，</mi></mrow><annotation encoding="application/x-tex">为帧传输时间，</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0em;vertical-align:0em;"></span><span class="mord cjk_fallback">为</span><span class="mord cjk_fallback">帧</span><span class="mord cjk_fallback">传</span><span class="mord cjk_fallback">输</span><span class="mord cjk_fallback">时</span><span class="mord cjk_fallback">间</span><span class="mord cjk_fallback">，</span></span></span></span>T_f=\frac{L}{B}$, L为帧长度, B为数据传输速率，R为RTT(来回时间)</p>
<p>提高信道利用率的方法：增加滑动窗口的长度W，即：$ U=\frac{W*T_f}{T_f+R}$</p>
<img src="/Users/zhaoyuan/Library/Application Support/typora-user-images/image-20211108160316913.png" alt="image-20211108160316913" style="zoom:50%;" />
</li>
<li>
<p>连续ARQ协议(又称Go-Back-N)</p>
<ul>
<li>发送窗口(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>W</mi><mi>T</mi></msub></mrow><annotation encoding="application/x-tex">W_T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>)&gt;1：缓存在发送窗口中的出错帧及后续帧全部重发</li>
<li>接收窗口(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>W</mi><mi>R</mi></msub></mrow><annotation encoding="application/x-tex">W_R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.00773em;">R</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>)=1：对出错帧不确认，丢弃错帧和后续帧</li>
</ul>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gw7tpfb08qj30xs0gytdq.jpg" alt="image.png" style="zoom:50%;" />
<img src="/Users/zhaoyuan/Library/Application Support/typora-user-images/image-20211108170022116.png" alt="image-20211108170022116" style="zoom:50%;" />
</li>
<li>
<p>选择重传ARQ协议(SR)</p>
<ul>
<li>发送窗口(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>W</mi><mi>T</mi></msub></mrow><annotation encoding="application/x-tex">W_T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>)&gt;1：缓存在发送窗口中的出错帧及后续帧全部重发</li>
<li>接收窗口(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>W</mi><mi>R</mi></msub></mrow><annotation encoding="application/x-tex">W_R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.00773em;">R</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>)&gt;1：对出错帧不确认，丢弃错帧和后续帧</li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>W</mi><mi>T</mi></msub><mo>≤</mo><msup><mn>2</mn><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup><mo separator="true">,</mo><msub><mi>W</mi><mi>R</mi></msub><mo>≤</mo><msup><mn>2</mn><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup><mi mathvariant="normal">；</mi><msub><mi>W</mi><mi>T</mi></msub><mo>+</mo><msub><mi>W</mi><mi>R</mi></msub><mo>≤</mo><msup><mn>2</mn><mi>n</mi></msup><mo separator="true">,</mo><msub><mi>W</mi><mi>T</mi></msub><mo>≤</mo><msub><mi>W</mi><mi>R</mi></msub><mi mathvariant="normal">。</mi><msub><mi>W</mi><mi>T</mi></msub><mi mathvariant="normal">最</mi><mi mathvariant="normal">大</mi><mi mathvariant="normal">时</mi><mi mathvariant="normal">有</mi><msub><mi>W</mi><mi>T</mi></msub><mo>=</mo><msub><mi>W</mi><mi>R</mi></msub><mo>=</mo><mo>(</mo><msup><mn>2</mn><mi>n</mi></msup><mo>)</mo><mi mathvariant="normal">/</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">W_T≤ 2^{n-1}, W_R≤ 2^{n-1}； W_T+W_R ≤ 2^n , W_T ≤ W_R 。W_T 最大时有W_T =W_R =(2^n)/2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.008548em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.00773em;">R</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.964108em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mord cjk_fallback">；</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.00773em;">R</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.00773em;">R</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">。</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">最</span><span class="mord cjk_fallback">大</span><span class="mord cjk_fallback">时</span><span class="mord cjk_fallback">有</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.00773em;">R</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord">/</span><span class="mord">2</span></span></span></span> (见习题)</li>
</ul>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gw7u2qnv8bj30v20b80xv.jpg" alt="image.png" style="zoom:50%;" />
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gw7udao80nj30xe0f4n1y.jpg" alt="image.png" style="zoom:50%;" />
<p>否定确认NAK: 对出错帧回送否定确认，使发放不必等到超时重传，加快出错帧的重传</p>
</li>
</ol>
<h3 id="343-arq协议的作用">3.4.3 ARQ协议的作用</h3>
<p>(Automatic Repeat-reQuest)：</p>
<ul>
<li>在不可靠的链路上实现可靠交付，所有重传对上面透明</li>
<li>支持流量控制: 当收方来不及接收可以暂时不发送确认帧</li>
</ul>
<p>差错控制策略比较：</p>
<ul>
<li>Go-back-n：
<ul>
<li>发送方需要较大缓冲区，便于重传</li>
<li>重传帧较多，因此适合信道出错率较小的情况</li>
</ul>
</li>
<li>选择重传
<ul>
<li>接收方需要较大缓冲区，以便将按正确顺序将帧提交到网络层</li>
<li>重传帧较少，使用于信道质量不好的情况</li>
</ul>
</li>
</ul>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gwa5bkbeodj310u0n2gwj.jpg" alt="image.png" style="zoom:50%;" />
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[2. 8086微型计算机系统]]></title>
        <id>https://notes.yuyzzz.top/post/2-8086-wei-xing-ji-suan-ji-xi-tong/</id>
        <link href="https://notes.yuyzzz.top/post/2-8086-wei-xing-ji-suan-ji-xi-tong/">
        </link>
        <updated>2021-10-31T08:01:17.000Z</updated>
        <summary type="html"><![CDATA[<p>介绍了微型计算机的概念、8086的结构、寻址方式、引脚功能、硬件组成等</p>
]]></summary>
        <content type="html"><![CDATA[<p>介绍了微型计算机的概念、8086的结构、寻址方式、引脚功能、硬件组成等</p>
<!--more-->
<h2 id="21-概述">2.1 概述</h2>
<ol>
<li>微型计算机（简称微机）：将计算机的核心器件中央处理器（运算器和控制器）集成在一块半导体芯片上，配以存储器、I/O接口电路及系统总线等设备的计算机</li>
<li>微型计算机系统：以微型计算机系统为主体，配以系统软件和外设后成为微型计算机系统</li>
</ol>
<h3 id="211-微型计算机系统的硬件组成">2.1.1 微型计算机系统的硬件组成</h3>
<ol>
<li>
<p><strong>冯·诺伊曼</strong>计算机的特点：硬件由<strong>运算器、控制器、存储器、输入设备和输出设备</strong>五大基本部件组成</p>
<ul>
<li>运算器（ALU）：运算器的核心是算术逻辑单元，是完成各种<strong>算术和逻辑</strong>运算的部件。</li>
<li>控制器（CU）：发出各种控制信息。</li>
<li>存储器（M）：记忆程序和数据的部件。</li>
<li>输入设备（IN）：将程序和数据输入的部件。</li>
<li>输出设备（OUT）：将结果数据和其它信息输出的部件。</li>
</ul>
</li>
<li>
<p>五大部件之间的信息流动：</p>
<ul>
<li><strong>数据信息</strong>：用双线表示，包括原始数据、中间结果、计算结果和程序指令</li>
<li><strong>控制信息</strong>：用单线表示，它是由控制器发出，指挥和协调其它各部件动作的信号</li>
</ul>
</li>
<li>
<p>现代微计算机系统硬件组成：</p>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gvtzqqh2gkj30t00eogpg.jpg" alt="image-20211011161129147.png" style="zoom:67%;" />
<ul>
<li>微处理器：包括运算器和控制器</li>
<li>协处理器：用于特定任务的处理，以减轻微处理器的负担</li>
<li>总线控制逻辑：总线是连接计算机各部分的数据通路，分为：<strong>片内总线，片级总线，系统总线</strong>，系统总线包含的信号线必须满足下列各种输入/输出操作的需要：
<ul>
<li>访问分布于主板之外的存储器；</li>
<li>访问I/O接口；</li>
<li>适应外部中断方式；</li>
<li>适应存储器直接与外部设备交换信息。</li>
</ul>
</li>
</ul>
</li>
</ol>
<h3 id="212-微型计算机系统的工作原理">2.1.2 微型计算机系统的工作原理</h3>
<ol>
<li><strong>指令、指令系统和程序</strong>
<ul>
<li>指令：二进制代码，由**操作码(操作类型)和操作数(操作对象或其地址)**组成</li>
<li>指令系统：一台计算机所能识别和执行的全部指令的集合，是表征计算机性能的重要因素</li>
<li>程序：一个指令序列</li>
</ul>
</li>
<li><strong>机器语言、汇编语言和高级语言</strong>
<ul>
<li>机器语言：由二进制代码组成，计算机能够直接识别，故机器语言程序被称为目标程序</li>
<li>汇编语言：由字母和符号表示的二进制代码，能够直接访问与硬件相关的存储器或I/O端口，汇编语言必须翻译成机器语言程序才能执行，这个翻译过程称为“汇编”，这种<strong>把汇编源程序翻译成目标程序的语言加工程序称为汇编程序。</strong></li>
<li>高级语言</li>
</ul>
</li>
<li>微机系统的工作原理：存储程序和程序控制</li>
</ol>
<h3 id="213-微型计算机系统的启动过程">2.1.3 微型计算机系统的启动过程</h3>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gvtzr3fnyxj317q0nme2j.jpg" alt="image-20211011170200071.png" style="zoom:47%;" />
<h2 id="22-8086微处理器的结构">2.2 8086微处理器的结构</h2>
<p>8086是Intel系列的16位微处理器，有16根数据线和20根地址线</p>
<h3 id="221-8086的内部结构">2.2.1 8086的内部结构</h3>
<p>按照功能分成<strong>总线接口部件BIU(Bus Interface Unit)和指令执行部件EU(Excution Unit)</strong></p>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gvtzn7hr5xj30x00qeguz.jpg" alt="image-20211011232337646.png" style="zoom:67%;" />
<ol>
<li>BIU
<ul>
<li>组成：
<ul>
<li>4个16位的<strong>段地址寄存器</strong>CS、DS、ES、SS</li>
<li>1个16位的<strong>指令指针寄存器</strong>IP：保存下一条要取出的指令所在存储单元的<strong>16位偏移地址</strong></li>
<li>一个20位的<strong>地址加法器</strong>：将20位地址寻址的1MB的物理空间划分成由16位地址寻址的不超过64KB的逻辑空间，逻辑空间就是逻辑段，简称段；存储物理地址，可根据<strong>16位段地址和16位段内偏移地址</strong>计算得到</li>
<li>一个可以预存4字节/6字节（8088/8086）指令的<strong>指令队列缓冲器</strong>：FIFO，暂存BIU从存储器预取的指令</li>
<li>总线控制逻辑：发出总线控制信号</li>
</ul>
</li>
<li>作用：根据指令的要求合成20位的地址信号，产生与外部总线数据传输需要的控制信号时序，实现与外部的数据交换</li>
</ul>
</li>
<li>EU
<ul>
<li>组成：
<ul>
<li>通用寄存器组</li>
<li>专用寄存器组</li>
<li>算术逻辑单元ALU</li>
<li>16位的标志寄存器</li>
<li>EU控制系统</li>
</ul>
</li>
<li>作用：执行指令</li>
</ul>
</li>
<li>指令流水线结构：在执行一条指令的同时又读取下一条指令的机制</li>
</ol>
<h3 id="222-8086微处理器寻址内存地址的方法">2.2.2 8086微处理器寻址内存地址的方法</h3>
<p><strong>将段地址寄存器的内容左移四位, 然后再与段内偏移地址值相加；</strong></p>
<p>可作为<strong>段地址寄存器的有：CS、DS、ES、SS；</strong></p>
<p>段内偏移地址值则可通过寻址方式得到。</p>
<h3 id="223-8086微处理器的内部寄存器">2.2.3 8086微处理器的内部寄存器</h3>
<ol>
<li><strong>通用寄存器</strong>：<strong>AX, BX, CX, DX</strong></li>
</ol>
<ul>
<li>
<p>共性：可按16位一次读写，也可按高8位低8位读写，可以存放数据、地址</p>
</li>
<li>
<p>个性：</p>
<ul>
<li>
<p>AX(AH+AL): 累加器(Accumulator)</p>
</li>
<li>
<p>BX(BH+BL): 基地址寄存器(Base), 在<strong>间接寻址中作为偏移地址寄存器</strong>；在<strong>基址寻址中作为基地址寄存器</strong></p>
</li>
<li>
<p>CX(CH+CL): 计数寄存器(Count)</p>
</li>
<li>
<p>DX(DH+DL): 数据寄存器(Data), 在乘除法指令中固定充当辅助的操作数寄存器；</p>
<p>​												  在输入/输出指令中固定作为外设口地址寄存器。</p>
</li>
</ul>
</li>
</ul>
<ol start="2">
<li>
<p><strong>专用寄存器</strong>：<strong>SP, BP, SI, DI</strong>, <strong>只能以16位为单位进行操作</strong></p>
<ul>
<li>SP: 栈顶指针(stack pointer), 寻址堆栈区栈顶的当前偏移地址。当执行完入栈/出栈指令后，SP的值会自动减2/加2。</li>
<li>BP: 基数指针(base pointer), 提供多种寻址方式的偏移地址或基地址，还用于配合SS提供堆栈区的非栈顶单元偏移地址。</li>
<li>SI: 源地址寄存器(Source Index)</li>
<li>DI: 目的地址寄存器(Destination Index)</li>
</ul>
</li>
<li>
<p><strong>指令指针 IP</strong>(Instruction Pointer): 固定配合CS来指定内存中将要执行的指令，用于提供相对于CS值的偏移地址。一条指令执行完后，IP的值会自动增加，以指向位于存储器中的下一条指令</p>
</li>
<li>
<p><strong>段寄存器</strong>: <strong>CS, SS, DS, ES</strong></p>
<ul>
<li>CS：代码段寄存器（Code Segment）,固定与IP一起寻址内存代码区。</li>
<li>SS：堆栈段寄存器(Stack Segment)，固定与SP或BP寻址内存的堆栈区。</li>
<li>DS：数据段寄存器(Data Segment)，可与SI、DI、BP等寻址内存数据区。</li>
<li>ES：附加段寄存器(Extra data Segment)，可与SI、DI、BP等寻址内存数据区</li>
</ul>
</li>
<li>
<p><strong>标志寄存器</strong>(Flag Register)</p>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gvu6z4ku6jj30y009ojsy.jpg" alt="image.png" style="zoom:67%;" />
<p>(1) 运算/操作结果标志位</p>
<ul>
<li>CF：进位标志(Carry Flag),运算结果产生进/借位时CF=1，反之CF=0</li>
<li>PF：齐偶标志(Parity Flag),运算结果中低8位有偶数个1时PF=1，奇数个1时PF=0。</li>
<li>AF：辅助进位标志(Auxiliary Flag)：两个字节运算若结果中低半个字节有进/借位时(第3位向第四位发生了进位)AF=1。</li>
<li>ZF：零标志(Zero Flag),运算结果为0时ZF=1，反之=0。</li>
<li>SF：符号标志(Sign Flag),运算结果最高位为0时SF=0，反之=1。</li>
<li>OF：溢出标志(Overflow Flag),运算结果产生溢出时OF=1，反之=0。</li>
</ul>
<p>(2) 控制标志位(用户设置)</p>
<ul>
<li>DF：地址方向标志(Direction Flag)，用于数据块传送。DF=0，内存地址朝增加方向变化； DF=1，内存地址朝减小方向变化。</li>
<li>IF：中断允许标志(Iterrupt Flag)：用于响应中断，IF=0，只响应不可屏蔽中断；IF=1，那么会响应所有类型的中断。</li>
<li>TF：自陷标志(Trap Flag)：用于程序的单步调试。TF=1，每执行一条指令就中断一下，以便运行检测程序；TF=0连续执行。</li>
</ul>
</li>
</ol>
<h2 id="23-80868088引脚功能">2.3 8086/8088引脚功能</h2>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><msub><mi>D</mi><mn>0</mn></msub><mo>∼</mo><mi>A</mi><msub><mi>D</mi><mn>15</mn></msub></mrow><annotation encoding="application/x-tex">AD_{0} \sim AD_{15}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathdefault">A</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathdefault">A</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">5</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>低16位的地址/数据复用引脚线，双向，三态，采用分时复用来实现对数据线和地址线的复用</p>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gvuu4q0fxpj30ro0lmwiz.jpg" alt="image.png" style="zoom:50%;" />
<ul>
<li>最小工作模式：CPU控制总线</li>
<li>最大工作模式：总线控制器控制总线</li>
</ul>
<p>将<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>MN</mtext><mi mathvariant="normal">/</mi><mover accent="true"><mtext>MX</mtext><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\text{MN}/\overline{\text{MX}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.13333em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord">MN</span></span><span class="mord">/</span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord">MX</span></span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span>引脚接高电平(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>MN/MX=1</mtext></mrow><annotation encoding="application/x-tex">\text{MN/MX=1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord">MN/MX=1</span></span></span></span></span>)，CPU将工作于最小模式，反之它们将工作于最大模式。当CPU处于不同的工作模式时，部分控制引脚的作用将有所不同，而且构成的系统结构和规模也有所不同</p>
<h3 id="231-80868088最小工作模式下引脚功能">2.3.1 8086/8088最小工作模式下引脚功能</h3>
<ol>
<li>地址总线(Address Bus) ：A0~A19 (其中A0～A15与D0~D15复用, A16～A19与S3~S6复用)</li>
<li>数据总线：D0 ~ D15（8086与A0 ~ A15共用）</li>
<li>控制总线：
<ul>
<li>外部中断线：
<ul>
<li>INTR(Interrupt Request): 外部可屏蔽中断输入信号,由外部中断控制器提供</li>
<li>NMI(Nonmaskable Interrupt): 外部非屏蔽中断输入信号，由外部非屏蔽中断源提供</li>
<li>INTA(Interrput Acknowledge): CPU中断响应应答信号(输出)，回送给外部中断控制器</li>
</ul>
</li>
<li>数据传送控制信号线：
<ul>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>ALE</mtext><mo separator="true">,</mo><mover accent="true"><mtext>DEN</mtext><mo stretchy="true">‾</mo></mover><mo separator="true">,</mo><mtext>DT</mtext><mi mathvariant="normal">/</mi><mover accent="true"><mtext>R</mtext><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\text{ALE}, \overline{\text{DEN}}, \text{DT}/\overline{\text{R}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.13333em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord">ALE</span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord">DEN</span></span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord text"><span class="mord">DT</span></span><span class="mord">/</span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord">R</span></span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span>: 地址锁存器和数据收发器控制信号</li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mtext>RD</mtext><mo stretchy="true">‾</mo></mover><mi mathvariant="normal">；</mi><mover accent="true"><mtext>WR</mtext><mo stretchy="true">‾</mo></mover><mi mathvariant="normal">；</mi><mtext>M</mtext><mi mathvariant="normal">/</mi><mover accent="true"><mtext>IO</mtext><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{\text{RD}}；\overline{\text{WR}}；\text{M}/\overline{\text{IO}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.13333em;vertical-align:-0.25em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord">RD</span></span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mord cjk_fallback">；</span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord">WR</span></span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mord cjk_fallback">；</span><span class="mord text"><span class="mord">M</span></span><span class="mord">/</span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord">IO</span></span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span>：读/写控制信号及读写对象(存储器/外设)选择信号</li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mtext>RD</mtext><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{\text{RD}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8833300000000001em;vertical-align:0em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord">RD</span></span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span>：16位数据线结构下奇地址（高字节）存储单元选择信号，用于选通高8位数据（输出，8088无效）</li>
<li>READY：CPU等待存储器或外设就绪信号（输入）</li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mtext>TEST</mtext><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{\text{TEST}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8833300000000001em;vertical-align:0em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord">TEST</span></span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span>：清除WAIT指令产生的暂停态，使程序继续顺序执行（输入）</li>
</ul>
</li>
<li>总线请求/应答总线
<ul>
<li>HOLD：总线请求（输入）</li>
<li>HLDA：总线请求应答（输出）</li>
</ul>
</li>
</ul>
</li>
<li>状态信号线：S3；S4；S5；S6与A16~A19共用，在地址信号锁存后有效
<ul>
<li>S6：反映CPU目前是否占用总线。“0”= 占用；“1”= 没占用</li>
<li>S5：反映中断允许标志位IF的状态。S5 = IF</li>
<li>S4、S3：反映目前正在使用的段寄存器。00=ES；01=SS；10=CS；11=DS</li>
</ul>
</li>
<li>复位（RESET）线上维持四个时钟周期以上的高电平后，CPU内部的寄存器将处于复位态：DS=ES=SS=IP=FR=0；CS=FFFFH，指令队列空复位与开机时的状态相同,CPU首条指令的地址是FFFF0H</li>
</ol>
<h3 id="232-80868088最大工作模式下引脚功能">2.3.2 8086/8088最大工作模式下引脚功能</h3>
<ol>
<li>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Q</mi><msub><mi mathvariant="normal">S</mi><mn>1</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">Q</mi><msub><mi mathvariant="normal">S</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">\mathrm{QS_1, QS_2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathrm">Q</span><span class="mord"><span class="mord mathrm">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathrm mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathrm">Q</span><span class="mord"><span class="mord mathrm">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathrm mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span>: 指令状态信号(Queue Status), 反映指令队列的状态</p>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gvutz8phxsj30y60ayagl.jpg" alt="image.png" style="zoom:60%;" />
</li>
<li>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><msub><mi mathvariant="normal">S</mi><mn>2</mn></msub><mo stretchy="true">‾</mo></mover><mo separator="true">,</mo><mover accent="true"><msub><mi mathvariant="normal">S</mi><mn>1</mn></msub><mo stretchy="true">‾</mo></mover><mo separator="true">,</mo><mover accent="true"><msub><mi mathvariant="normal">S</mi><mn>0</mn></msub><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\mathrm{\overline{S_2}, \overline{S_1},\overline{S_0}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0777700000000001em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathrm mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathrm mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathrm mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>: 用于产生不同控制信号</p>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gvuu2k5d3tj30mc0io46c.jpg" alt="image.png" style="zoom:67%;" />
</li>
<li>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mtext>LOCK</mtext><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{\text{LOCK}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8833300000000001em;vertical-align:0em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord">LOCK</span></span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span>: 总线封锁信号，低电平有效。有效时：禁止其他总线主设备在以下两种情况下占用系统总线</p>
<ul>
<li>CPU执行带LOCK前缀的指令</li>
<li>中断响应未结束时</li>
</ul>
</li>
<li>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mrow><mi mathvariant="normal">R</mi><mi mathvariant="normal">Q</mi></mrow><mo stretchy="true">‾</mo></mover><mi mathvariant="normal">/</mi><mover accent="true"><mrow><mi mathvariant="normal">G</mi><msub><mi mathvariant="normal">T</mi><mn>0</mn></msub></mrow><mo stretchy="true">‾</mo></mover><mo separator="true">,</mo><mover accent="true"><mrow><mi mathvariant="normal">R</mi><mi mathvariant="normal">Q</mi></mrow><mo stretchy="true">‾</mo></mover><mi mathvariant="normal">/</mi><mover accent="true"><mrow><mi mathvariant="normal">G</mi><msub><mi mathvariant="normal">T</mi><mn>1</mn></msub></mrow><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\mathrm{\overline{{RQ}}/\overline{GT_0}, \overline{{RQ}}/\overline{GT_1}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.13333em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">R</span><span class="mord mathrm">Q</span></span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span><span class="mord mathrm">/</span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathrm">G</span><span class="mord"><span class="mord mathrm">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathrm mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">R</span><span class="mord mathrm">Q</span></span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span><span class="mord mathrm">/</span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathrm">G</span><span class="mord"><span class="mord mathrm">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathrm mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>: 总线请求/允许信号, 提供两个主控部件共享局部总线的请求/允许联络信号，请求和允许信号共用同一根引脚线。其中RQ/GT0 的优先权高于RQ/GT1。</p>
</li>
</ol>
<h2 id="24-8086微型计算机系统硬件组成">2.4 8086微型计算机系统硬件组成</h2>
<p>时钟发生器8284, 地址锁存器8282, 数据收发器8286</p>
<h3 id="241-最小模式系统硬件组成">2.4.1 最小模式系统硬件组成</h3>
<figure data-type="image" tabindex="1"><img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gvuukv4imnj30jn0acgmw.jpg" alt="image.png" loading="lazy"></figure>
<p>地址线与数据线复用的实现</p>
<ol>
<li>CPU先将20位地址信号送上地址线A0 ~ A19</li>
<li>产生地址锁存信号ALE将20位地址信号锁存在外部提供的地址锁存器中。</li>
<li>在CPU内部将部分地址线引脚切换到内部数据线（8086将A0 ~ A15切换为D0 ~ D15；8088则将A0 ~ A7切换为D0 ~ D7），还有部分切换为状态输出线（A16 ~ A19成为S3~S6）</li>
<li>在入/出控制信号<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">D</mi><mi mathvariant="normal">T</mi><mi mathvariant="normal">/</mi><mover accent="true"><mi mathvariant="normal">R</mi><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\mathrm {DT/\overline{R}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.13333em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathrm">D</span><span class="mord mathrm">T</span><span class="mord mathrm">/</span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathrm">R</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span></span>,数据选通信号<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mrow><mi mathvariant="normal">D</mi><mi mathvariant="normal">E</mi><mi mathvariant="normal">N</mi></mrow><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\mathrm{\overline{DEN}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8833300000000001em;vertical-align:0em;"></span><span class="mord"><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathrm">D</span><span class="mord mathrm">E</span><span class="mord mathrm">N</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span></span>作用下，选通外部数据线上的收发器使外部数据进入</li>
</ol>
<h3 id="242-最大模式系统硬件组成">2.4.2 最大模式系统硬件组成</h3>
<figure data-type="image" tabindex="2"><img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gvuux1iil2j30k00a7jsv.jpg" alt="image.png" loading="lazy"></figure>
<h3 id="243-8086的存储器结构">2.4.3 8086的存储器结构</h3>
<ol>
<li>
<p>8086存储器：</p>
<ul>
<li>存储单元：<strong>按字节编址</strong>，低字节在前，高字节在后</li>
<li>数据可以是字节，字(两个字节)，双字(四个字节)</li>
<li>存储容量为1MB，物理地址范围：00000H~FFFFFH</li>
</ul>
<p>如图：（20110H）=3412H表示字单元20110H的内容是3412H；（20110H）=78563412H表示双字单元20110H的内容是78563412H。</p>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gvv8b5va0kj30es0rat9y.jpg" alt="image.png" style="zoom: 50%;" />
</li>
<li>
<p>存储器的分段管理</p>
<ul>
<li>将整个存储器分为多个逻辑段</li>
<li>每个逻辑段容量<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>≤</mo><mn>64</mn><mi>K</mi><mi>B</mi></mrow><annotation encoding="application/x-tex">\leq64KB</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">6</span><span class="mord">4</span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span></span></span></span></li>
<li>各个逻辑段可以紧密连接，也可以重叠</li>
<li>寻址操作采用段地址加段内偏移地址的二级寻址方式，对任意一个地址，可以唯一地被包含在一个逻辑段中，也可以包含在多个相互重叠的逻辑段中</li>
</ul>
<figure data-type="image" tabindex="3"><img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gvyhdfp7knj309y09lwex.jpg" alt="image.png" loading="lazy"></figure>
</li>
<li>
<p>存储器的地址</p>
<ul>
<li>段地址
<ul>
<li>将16个字节的存储空间称为一节</li>
<li>分段时要求各个逻辑段从节的整数边界开始，这样段首地址低4位应该是“0000”，因此就把段首地址的高16位称为“段基址（段地址）”</li>
<li>段地址是无符号的16位二进制数，存放在段寄存器DS、CS、SS或ES中，这些段分别称为数据段、代码段、堆栈段和附加段。</li>
</ul>
</li>
<li>偏移地址
<ul>
<li>某一存储单元相对于段首地址的偏移量称为偏移地址（也称有效地址EA）</li>
<li>偏移地址也是无符号的16位二进制数，存放在IP、SP、BX、SI、DI、BP中或直接出现在指令中。</li>
</ul>
</li>
<li>逻辑地址：在分段存储器中，通过段地址和偏移地址来表示的存储单元的地址称为逻辑地址，记为：<code>段地址:偏移地址</code></li>
<li>物理地址：存储器的绝对地址，20位，8086存储器物理地址范围为00000H~FFFFFH</li>
</ul>
</li>
</ol>
<h3 id="244-寻址外设端口的方法">2.4.4 寻址外设端口的方法</h3>
<p>8086的I/O采用独立编址（I/O端口和存储单元分开编址），地址线<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><msub><mi>D</mi><mn>0</mn></msub><mo>∼</mo><mi>A</mi><msub><mi>D</mi><mn>15</mn></msub></mrow><annotation encoding="application/x-tex">AD_{0} \sim AD_{15}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathdefault">A</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathdefault">A</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">5</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>作为端口地址，访问I/O端口时，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><msub><mi>D</mi><mn>19</mn></msub><mo>∼</mo><mi>A</mi><msub><mi>D</mi><mn>16</mn></msub></mrow><annotation encoding="application/x-tex">AD_{19} \sim AD_{16}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathdefault">A</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">9</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathdefault">A</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">6</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>为0000</p>
<h2 id="25-8086微型计算机系统总线时序">2.5 8086微型计算机系统总线时序</h2>
<ul>
<li><strong>指令周期</strong>：CPU执行一条指令所需要的时间，由一个或多个总线周期组成</li>
<li><strong>总线周期</strong>：CPU每完成一次总线操作（与外部更换一次数据；一次读或一次写）称为一个“总线周期”</li>
<li><strong>时钟周期</strong>：CPU主时钟周期，是8086/8088CPU内部的最小计时单位</li>
</ul>
<h3 id="251-最小模式下周期时序">2.5.1 最小模式下周期时序</h3>
<ol>
<li>
<p>读周期时序：</p>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gvyj9a81igj311u0tik02.jpg" alt="image.png" style="zoom: 50%;" />
</li>
<li>
<p>写周期时序</p>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gvyjubky6rj30x00syn4n.jpg" alt="image.png" style="zoom:50%;" /></li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[1. 数和数制]]></title>
        <id>https://notes.yuyzzz.top/post/1-shu-he-shu-zhi/</id>
        <link href="https://notes.yuyzzz.top/post/1-shu-he-shu-zhi/">
        </link>
        <updated>2021-10-31T07:59:15.000Z</updated>
        <summary type="html"><![CDATA[<p>基本码值的转换</p>
]]></summary>
        <content type="html"><![CDATA[<p>基本码值的转换</p>
<!--more-->
<h2 id="11-带符号二进制数转换">1.1 带符号二进制数转换</h2>
<ol>
<li>
<p>原码：</p>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gvtzozlchbj30wi08kmxt.jpg" alt="image-20211011182445892.png" style="zoom:67%;" />
<p>表示整数范围：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>−</mo><mo>(</mo><msup><mn>2</mn><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>−</mo><mn>1</mn><mo>)</mo><mtext> </mtext><mo>+</mo><mo>(</mo><msup><mn>2</mn><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>−</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">-(2^{n-1}-1)~+(2^{n-1}-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord">−</span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mspace nobreak"> </span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></p>
</li>
<li>
<p>反码：</p>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gvtzpdbuluj30w805w3z6.jpg" alt="image-20211011184552708.png" style="zoom:67%;" />
<p>表示整数范围：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>−</mo><mo>(</mo><msup><mn>2</mn><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>−</mo><mn>1</mn><mo>)</mo><mtext> </mtext><mo>+</mo><mo>(</mo><msup><mn>2</mn><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>−</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">-(2^{n-1}-1)~+(2^{n-1}-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord">−</span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mspace nobreak"> </span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></p>
</li>
<li>
<p>补码：</p>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gvtzpo9f3yj30xy084gm7.jpg" alt="image-20211011184726932.png" style="zoom:67%;" />
<p>表示整数范围：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>−</mo><msup><mn>2</mn><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup><mtext> </mtext><mo>+</mo><mo>(</mo><msup><mn>2</mn><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>−</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">-2^{n-1}~+(2^{n-1}-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mspace nobreak"> </span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></p>
</li>
</ol>
<h2 id="12-十进制数的编码">1.2 十进制数的编码</h2>
<p>关于8421BCD码</p>
<ul>
<li>压缩8421BCD码：一个字节可以表示两位十进制数</li>
<li>非压缩8421BCD码：一个字节只能表示一位十进制数</li>
</ul>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gvtzpz5o6gj31a00tgayp.jpg" alt="image-20211011230609176.png" style="zoom:50%;" />
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[一、云计算概述]]></title>
        <id>https://notes.yuyzzz.top/post/yi-yun-ji-suan-gai-shu/</id>
        <link href="https://notes.yuyzzz.top/post/yi-yun-ji-suan-gai-shu/">
        </link>
        <updated>2021-10-27T08:54:22.000Z</updated>
        <summary type="html"><![CDATA[<p>介绍了云计算的定义、<strong>体系架构</strong>、服务类型、云计算优势和相关技术</p>
]]></summary>
        <content type="html"><![CDATA[<p>介绍了云计算的定义、<strong>体系架构</strong>、服务类型、云计算优势和相关技术</p>
<!--more -->
<h2 id="11-什么是云计算">1.1 什么是云计算</h2>
<p>大数据与云计算之间的关系：<br>
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>G</mi><mo>=</mo><mi>f</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo separator="true">,</mo><mi>G</mi><mi mathvariant="normal">为</mi><mi mathvariant="normal">目</mi><mi mathvariant="normal">标</mi><mi mathvariant="normal">，</mi><mi>f</mi><mi mathvariant="normal">为</mi><mi mathvariant="normal">云</mi><mi mathvariant="normal">计</mi><mi mathvariant="normal">算</mi><mi mathvariant="normal">，</mi><mi>x</mi><mi mathvariant="normal">为</mi><mi mathvariant="normal">大</mi><mi mathvariant="normal">数</mi><mi mathvariant="normal">据</mi></mrow><annotation encoding="application/x-tex">G=f(x), G为目标，f为云计算，x为大数据</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">G</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">G</span><span class="mord cjk_fallback">为</span><span class="mord cjk_fallback">目</span><span class="mord cjk_fallback">标</span><span class="mord cjk_fallback">，</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord cjk_fallback">为</span><span class="mord cjk_fallback">云</span><span class="mord cjk_fallback">计</span><span class="mord cjk_fallback">算</span><span class="mord cjk_fallback">，</span><span class="mord mathdefault">x</span><span class="mord cjk_fallback">为</span><span class="mord cjk_fallback">大</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">据</span></span></span></span></p>
<h3 id="111-云计算定义">1.1.1 云计算定义</h3>
<ul>
<li>商业计算模型，将计算任务分布在大量计算机构成的资源上</li>
<li>是分布式计算（Distributed Computing）、并行计算（Parallel Computing）、效用计算（Utility Computing）、网络存储（Network Storage Technologies）、虚拟化（Virtualization）、负载均衡 （Load Balance）、热备份冗余（High Available）等传统计算机网络和技术发展的产物</li>
<li>按网络按需提供可动态伸缩的廉价计算服务</li>
</ul>
<h3 id="112-云计算的体系架构">1.1.2 云计算的体系架构</h3>
<figure data-type="image" tabindex="1"><img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gvspmio8p0j317i0ikgvg.jpg" alt="image.png" loading="lazy"></figure>
<ul>
<li>SOA 构建层：封装云计算能力成标准的Web Services服务，并纳入到SOA体系</li>
<li>管理中间件层：云计算的资源管理，并对众多应用任务进行调度，使资源能够高效、安全地为应用提供服务</li>
<li>资源池层：将大量相同类型的资源构成同构或接近同构的资源池</li>
</ul>
<h3 id="113-云计算的服务类型">1.1.3 云计算的服务类型</h3>
<ul>
<li>软件即服务(SaaS):将某些特定应用软件功能封装成服务，向用户提供基于web的软件
<ul>
<li>可以使用先进的应用程序</li>
<li>只为自己使用的东西付费</li>
<li>免客户端软件使用</li>
<li>轻松增强员工移动性</li>
<li>从任何位置访问应用数据</li>
</ul>
</li>
<li>平台即服务(PaaS)：将服务器平台或者开发环境作为服务进行提供。开发简单、部署简单、维护简单
<ul>
<li>减少编码时间</li>
<li>无需增员便可提高开发能力</li>
<li>使用经济实惠的先进工具</li>
<li>支持地理位置分散的开发团队</li>
<li>有效管理应用程序生命周期</li>
</ul>
</li>
<li>基础设施即服务(IaaS, Infrastructure as a Service): 将多台服务器组成的“云端”服务作为计量服务提供给用户。
<ul>
<li>消除资金投入并降低后续费用</li>
<li>改进业务连续性和灾难恢复</li>
<li>快速创新</li>
<li>专注于核心业务</li>
<li>增强稳定性、可靠性和可支持性</li>
<li>更安全</li>
</ul>
</li>
</ul>
<p>容器即服务(CaaS): 以容器为资源分割和调度的基本单位，封装整个软件运行时环境</p>
<p>多租户：多个租户共享硬件资源，硬件资源提供一个共享的应用和数据库实例，租户间共享资源越多的架构，租户隔离难度越大，成 本越高。租户隔离难度越大， 应用开发难度，测试与维护成本都会上升。</p>
<h3 id="114-云部署模式">1.1.4 云部署模式</h3>
<ul>
<li>公有云：指为外部客户提供的云</li>
<li>私有云：企业内部使用的云</li>
<li>混合云：指供自己和客户共同使用的云，它所提供的服务既可以供别人使用，也可以供自己使用</li>
</ul>
<h2 id="12-云计算的优势">1.2 云计算的优势</h2>
<ul>
<li>
<p>提供弹性的服务，在超大资源池中动态分配和释放资源</p>
</li>
<li>
<p>云计算平台的规模极大，比较容易平稳整体负载</p>
</li>
<li>
<p>资源利用率达到80%左右，是传统模式5～7倍</p>
</li>
<li>
<p>降低了使用计算资源的成本</p>
</li>
</ul>
<h2 id="13-云计算的相关技术">1.3 云计算的相关技术</h2>
<ul>
<li>分布式计算：主要研究如何应用分布式系统(Distributed System)进行计算。分布式系统中的组件位于不同的计算机上，它们之间通过消息传递进行交流、协作，最终实现一个共同的目标</li>
<li>并行计算：在并行机上，将一个应用分解成多个子任务，分配给不同的处理器，各个处理器之间相互协同，并行地执行子任务。并行计算有多种形式</li>
<li>雾计算：数据、(数据)处理和应用 程序集中在网络边缘的设备中，而不是几乎全部保存在云中</li>
<li>边缘计算：靠近物或数据源头的一侧，采用网络、计算、存储、应用核心能力为一体的开放平台，就近提供最近端服务。其应用程序在边缘侧发起，产生更快的网络服务响应，满足行业在实时业务、应用智能、安全与隐私保护等方面的基本需求</li>
</ul>
<figure data-type="image" tabindex="2"><img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gvss1exx7dj31ai0ky1cr.jpg" alt="image.png" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[二、物理层]]></title>
        <id>https://notes.yuyzzz.top/post/er-wu-li-ceng/</id>
        <link href="https://notes.yuyzzz.top/post/er-wu-li-ceng/">
        </link>
        <updated>2021-10-27T08:53:00.000Z</updated>
        <summary type="html"><![CDATA[<p>物理层（Physical Layer）是计算机网络OSI模型中最低的一层，位于OSI参考模型的最底层，它直接面向实际承担数据传输的物理媒体（即通信通道）</p>
]]></summary>
        <content type="html"><![CDATA[<p>物理层（Physical Layer）是计算机网络OSI模型中最低的一层，位于OSI参考模型的最底层，它直接面向实际承担数据传输的物理媒体（即通信通道）</p>
<!-- more-->
<h2 id="21-物理层的基本概念">2.1 物理层的基本概念</h2>
<p>传输媒体接口的有关特性</p>
<ul>
<li>机械特性</li>
<li>电气特性：电压范围，编码等</li>
<li>功能特性：指明某一电平的电压表示的意义</li>
<li>过程特性：指不同功能的各种可能事件出现的顺序</li>
</ul>
<h2 id="22-数据通信的基础">2.2 数据通信的基础</h2>
<h3 id="221-基本概念">2.2.1 基本概念</h3>
<ol>
<li>
<p>信号分类</p>
<ul>
<li>基带(baseband)信号：将信号0或1用不同信号表示(低频信号，未调制)</li>
<li>宽带信号：将基带信号调制后形成的多路复用模拟信号</li>
</ul>
</li>
<li>
<p>信道分类：</p>
<ul>
<li>单工：单向通信</li>
<li>半双工：双向交替通信</li>
<li>全双工：双向同时通信</li>
</ul>
</li>
<li>
<p>同步通信和异步通信：目的都是为了同步，保证数据传输不出差错</p>
<p>异步通信：</p>
<ul>
<li>字符为单位：
<ul>
<li>发送的字符之间的<strong>时间间隔可以是任意的</strong></li>
<li>可以在<strong>任意时刻发送</strong>，故必须在每个字符的开头和结束的地方加上标志(起始位和停止位)</li>
</ul>
</li>
<li>帧为单位：
<ul>
<li><strong>帧定界</strong>：帧首部一些特殊的比特组合，用于识别帧的开始，还包含帧的结束位置(帧尾添加特殊比特组合或帧首设置帧的长度)</li>
</ul>
</li>
</ul>
<p>同步通信：双方建立同步，即双方的时钟频率要相同，收发双方不停接收和发送同步比特流</p>
</li>
</ol>
<h3 id="222-信道最大传输率">2.2.2 信道最大传输率</h3>
<ol>
<li>
<p>奈奎斯特采样定理：模拟信号经F频率采样称为离散信号，能够通过数字信道传送无失真恢复，则要求<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi><mo>≥</mo><mn>2</mn><mi>f</mi></mrow><annotation encoding="application/x-tex">F \geq 2f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8193em;vertical-align:-0.13597em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">2</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span></span></span></span>, f是模拟信号的最高频率</p>
<p>奈氏公式(理想信道)：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>C</mi><mo>=</mo><mn>2</mn><mi>H</mi><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>L</mi></mrow><annotation encoding="application/x-tex">C=2Hlog_{2}L</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">2</span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">L</span></span></span></span>(没有对信息传输速率bps给出限制)</p>
<ul>
<li>H: 低通信道的带宽(Hz)</li>
<li>L: 某给定时刻数字信号可能取的离散值个数</li>
<li>C: 信道最大数据传输率(b/s)</li>
</ul>
</li>
<li>
<p>Shannon公式：<strong>给出了信息传输速率的极限</strong></p>
<p>有噪声信道的最大数据传输率：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>C</mi><mo>=</mo><mi>H</mi><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mo>(</mo><mn>1</mn><mo>+</mo><mi>S</mi><mi mathvariant="normal">/</mi><mi>N</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">C=Hlog_{2}(1+S/N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord">/</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span></p>
<ul>
<li>H: 带宽</li>
<li>S/N：信道噪声比，常用<strong>分贝</strong>为计量单位，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>分贝数</mtext><mo>=</mo><mn>10</mn><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>S</mi><mi mathvariant="normal">/</mi><mi>N</mi></mrow><annotation encoding="application/x-tex">\text{分贝数}=10log_{2}S/N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord text"><span class="mord cjk_fallback">分贝数</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord">/</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span></li>
</ul>
<p>若想提高信息的传输速率：</p>
<ul>
<li>提高传输线路的带宽</li>
<li>提高信号的信噪比</li>
</ul>
</li>
<li>
<p>比特率C和波特率B：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>C</mi><mo>=</mo><mi>B</mi><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>L</mi></mrow><annotation encoding="application/x-tex">C=Blog_{2}L</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">L</span></span></span></span></p>
<ul>
<li>
<p>波特率B：每秒信号调制数(传输符号的个数)</p>
</li>
<li>
<p>比特率C：每秒传送的位数</p>
</li>
</ul>
</li>
</ol>
<h3 id="223-数据调制与编码">2.2.3 数据调制与编码</h3>
<ol>
<li>
<p>分类：传输的数据有模拟和数字之分</p>
</li>
<li>
<p>数字数据的数字信号编码</p>
<ul>
<li>要求：使用数字信号，包含比特同步信息</li>
<li>方法：双极性，单极性，归零RZ，不归零NRZ</li>
</ul>
<p><strong>归零编码RZ、不归零编码NRZ</strong>：逻辑1表示正电压下的信号，逻辑 0 表示负电压下的信号，在 NRZ 方法中，从逻辑0到逻辑1的转换（反之亦然），直接跨越零电压电平，而在 RZ 方法中，转换暂时停留在零电压电平上</p>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gvpe6rex0dj60su082jte02.jpg" alt="image-20211023175243393.png" style="zoom:67%;" />
<p><strong>曼切斯特编码</strong>:一个周期为T，将其分为前后T/2，前低后高为0，前高后低为1，也可反过来定义</p>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gvss5ysisuj30qo0b4ac9.jpg" alt="image.png" style="zoom:50%;" />
<p><strong>差分曼切斯特编码</strong>：每一位的中心处始终有跳变，位开始边界有跳变表示0，位开始边界没有跳变表示1</p>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gvtywfgaf6j30zo0ekdna.jpg" alt="image.png" style="zoom:60%;" />
</li>
</ol>
<h2 id="23-传输介质">2.3 传输介质</h2>
<p>传输介质不属于物理层</p>
<h3 id="231-有线传输介质">2.3.1 有线传输介质</h3>
<ol>
<li>双绞线</li>
<li>同轴电缆</li>
<li>光纤</li>
</ol>
<h3 id="232-无线传输介质">2.3.2 无线传输介质</h3>
<ol>
<li>无线电微波</li>
<li>地面微波</li>
<li>卫星微波</li>
</ol>
<h2 id="24-模拟传输与数字传输">2.4 模拟传输与数字传输</h2>
<h3 id="241-数字调制技术">2.4.1 数字调制技术</h3>
<ul>
<li>调幅：载波的振幅随着基带数字信号而变化</li>
<li>调频：载波的频率随着基带数字信号而变化</li>
<li>调相：载波的初始相位随着基带数字信号而变化</li>
</ul>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gvpepnere0j60xu0l8ag202.jpg" alt="image-20211023181052413.png" style="zoom: 50%;" />
<h3 id="242-传统com口调制解调器分类">2.4.2 传统COM口调制解调器分类</h3>
<ul>
<li>低速：小于600b/s</li>
<li>中速：600b/s~9600b/s</li>
<li>高速：大于9600b/s</li>
</ul>
<h3 id="243-数字传输系统">2.4.3 数字传输系统</h3>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gvpf5kmz4oj61380nc47502.jpg" alt="image-20211023182605550.png" style="zoom: 67%;" />]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[一、计网概述]]></title>
        <id>https://notes.yuyzzz.top/post/ji-wang-bi-ji-1/</id>
        <link href="https://notes.yuyzzz.top/post/ji-wang-bi-ji-1/">
        </link>
        <updated>2021-10-23T08:40:06.000Z</updated>
        <summary type="html"><![CDATA[<p>本章主要介绍计算机网络的定义和发展阶段，计算机网络的组成、<strong>分组交换、体系结构</strong>，以及<strong>计算机网络的性能指标</strong></p>
]]></summary>
        <content type="html"><![CDATA[<p>本章主要介绍计算机网络的定义和发展阶段，计算机网络的组成、<strong>分组交换、体系结构</strong>，以及<strong>计算机网络的性能指标</strong></p>
<!-- more-->
<h2 id="11-互联网概述">1.1 互联网概述</h2>
<h3 id="111-网络的网络">1.1.1 网络的网络</h3>
<p>互联网(Internet):全球最大的计算机网络，采用TCP/IP协议族</p>
<p>计算机网络(网络):由若干结点(node)和连接这些结点的链路(link)组成</p>
<p>互连网(internet)：泛指多个计算机网络互连而成的计算机网络，对网络间的协议没有要求。</p>
<h3 id="112-互联网基础结构发展的三个阶段">1.1.2 互联网基础结构发展的三个阶段</h3>
<ul>
<li>第一阶段：从单个网络ARPANET向互联网发展</li>
<li>第二阶段：建成了三级结构的互联网：主干网，地区网和校园网（或企业网）</li>
<li>第三阶段：形成了多层次ISP结构的互联网</li>
</ul>
<h3 id="113-互联网的标准化工作">1.1.3 互联网的标准化工作</h3>
<p>互联网标准以RFC的形式发表，成为标准需要三个阶段</p>
<ul>
<li>互联网草案：有效期6个月，此时不是RFC</li>
<li>建议标准：成为RFC文档</li>
<li>互联网标准：每个标准分配一个编号，一个标准可以对应多个RFC文档</li>
</ul>
<h2 id="12-互联网的组成">1.2 互联网的组成</h2>
<p>边缘：用户使用，资源共享（资源子网）</p>
<p>核心：由路由器组成，提供连通性和交换（通信子网）</p>
<h3 id="121-互联网的边缘部分">1.2.1 互联网的边缘部分</h3>
<p>主机又称为端系统（end system）</p>
<p>端系统之间的通信方式：</p>
<ul>
<li>客户/服务器（C/S）
<ul>
<li>客户主动向服务器发送请求</li>
<li>服务器被动等待请求</li>
</ul>
</li>
<li>对等方式（P2P）: Peer to Peer
<ul>
<li>平等、对等通信</li>
<li>每个主机既是客户机又是服务器</li>
</ul>
</li>
</ul>
<h3 id="121-互联网的核心部分">1.2.1 互联网的核心部分</h3>
<p>起特殊作用的是路由器（router），实现了分组交换</p>
<h4 id="电路交换circuit-switching">电路交换(circuit switching)</h4>
<ul>
<li>使用交换机</li>
<li>必定是<strong>面向连接</strong></li>
</ul>
<p>分为三个阶段：</p>
<ul>
<li>建立连接（专用物理线路）</li>
<li>通信（始终占用端到端资源）</li>
<li>释放连接</li>
</ul>
<p>缺点：</p>
<ul>
<li>建立连接时间长</li>
<li>信道利用率低</li>
</ul>
<h4 id="报文交换message-switching">报文交换(message switching)</h4>
<h4 id="分组交换packet-switching">分组交换(packet switching)</h4>
<p>存储转发，把报文分为较短、定长的数据段，在数据段前添加首部构成分组（packet），以分组作为数据传输单元</p>
<p>路由器：</p>
<ul>
<li>将收到分组放入缓存</li>
<li>查找转发表</li>
<li>将分组送到适当端口转发</li>
</ul>
<p>优点：</p>
<ul>
<li>动态分配资源</li>
<li>迅速、可靠</li>
</ul>
<p>带来的问题：</p>
<ul>
<li>存储转发需要排队，因此有时延</li>
<li>首部造成开销</li>
</ul>
<h2 id="13-计算机网络的类别">1.3 计算机网络的类别</h2>
<h3 id="131-计算机网络的定义">1.3.1 计算机网络的定义</h3>
<p>计算机网络主要是由一些通用的、可编程的硬件互连而成的，而这些硬件并非专门用来实现某一特定目的，这些可编程的硬件能够用来传送多种不同类型的数据，并能支持广泛的和日益增长的应用。</p>
<h3 id="132-计算机网络的分类">1.3.2 计算机网络的分类</h3>
<p>从网络的作用范围分类：</p>
<ul>
<li>广域网(LAN)</li>
<li>城域网(MAN)</li>
<li>局域网(LAN)</li>
<li>个人区域网(PAN)</li>
</ul>
<p>从网络的使用者进行分类：</p>
<ul>
<li>公用网</li>
<li>专用网</li>
</ul>
<p>用来把用户接入互联网的网络</p>
<ul>
<li>接入网AN(Access Network):用于将用户接入互联网，既不属于核心部分也不属于边缘部分</li>
</ul>
<h2 id="14-计算机网络的性能">1.4 计算机网络的性能</h2>
<h3 id="141-计算机网络的性能指标">1.4.1 计算机网络的性能指标</h3>
<ol>
<li>速率：也被称为<strong>数据率</strong>或比特率，单位：bit/s</li>
<li>带宽：在计算机网络中，表示某信道能通过的“<strong>最大数据率</strong>”，单位：bit/s</li>
<li>吞吐量：表示单位时间能通过某个网络（或者信道，接口）的数据量</li>
<li>时延(delay)：数据从网络的一端到另一端所需的时间，包括：发送试验，传播时延，处理时延，排队时延</li>
<li>时延带宽积：传播时延<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>×</mo></mrow><annotation encoding="application/x-tex">\times</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">×</span></span></span></span>带宽</li>
<li>往返时间RTT</li>
<li>利用率
<ul>
<li>信道利用率U，当增大时，该信道引起的时延迅速增加 ：$ D = \frac{D_0}{1-U}$，</li>
<li>网络利用率</li>
</ul>
</li>
</ol>
<h3 id="141-计算机网络的非性能特征">1.4.1 计算机网络的非性能特征</h3>
<p>费用，质量，标准化，可靠性，可扩展性和可升级性，易于管理和维护</p>
<h2 id="15-计算机网络的体系结构">1.5 计算机网络的体系结构</h2>
<p>计算机网络的各层及协议的集合就是网络的体系结构</p>
<h3 id="151-计算机体系机构的形成">1.5.1 计算机体系机构的形成</h3>
<p>OSI参考模型</p>
<h3 id="152-协议与划分层次">1.5.2 协议与划分层次</h3>
<p>协议：数据交换必须遵师事先约定的规则，这些规则明确了交换数据的格式和有关同步的问题</p>
<ul>
<li>语法：数据和控制信息的结构和格式</li>
<li>语义：控制信息的种类，作出响应与反应的类型</li>
<li>同步：事件实现顺序的说明</li>
</ul>
<p>协议的两种形式：</p>
<ul>
<li>文字描述</li>
<li>程序代码</li>
</ul>
<p>分层的好处：</p>
<ul>
<li>各层独立</li>
<li>灵活性好</li>
<li>结构上可分割开</li>
<li>易于实现和维护</li>
<li>促进标准化工作</li>
</ul>
<p>分层的缺点：</p>
<ul>
<li>降低效率</li>
<li>功能可能重复，产生额外开销</li>
</ul>
<p><strong>各层完成的主要功能</strong>：</p>
<p>①差错控制：使相应层次对等方的通信更加可靠。</p>
<p>②流量控制：发送端的发送速率必须使接收端来得及接收，不要太快。</p>
<p>③分段和重装：发送端将要发送的数据块划分为更小的单位，在接收端将其还原。</p>
<p>④复用和分用：发送端几个高层会话复用一条低层的连接，在接收端再进行分用。</p>
<p>⑤连接建立和释放：交换数据前先建立一条逻辑连接，数据传送结束后释放连接。</p>
<h3 id="153-具有五层协议的体系结构">1.5.3 具有五层协议的体系结构</h3>
<figure data-type="image" tabindex="1"><img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gvpc1lcr4qj60xa0k6grt02.jpg" alt="image-20211004171033999.png" loading="lazy"></figure>
<h3 id="154-实体-协议-服务和服务访问点">1.5.4 实体、协议、服务和服务访问点</h3>
<p>实体(entity)：表示任何可发送或接收信息的硬件或软件进程。</p>
<p>协议：控制两个对等实体(或多个实体)进行通信的规则的集合。</p>
<p>在协议的控制下，两个对等实体间的通信使得本层能够向上一层提供服务。要实现本层协议，还需要使用下面一层所提供的服务。</p>
<h3 id="155-tcpip的体系结构">1.5.5 TCP/IP的体系结构</h3>
<figure data-type="image" tabindex="2"><img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gvpc0yln7jj60t20g678f02.jpg" alt="image-20211004173604031.png" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://notes.yuyzzz.top/post/hello-gridea/</id>
        <link href="https://notes.yuyzzz.top/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>β</mi></mrow><annotation encoding="application/x-tex">\beta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span></span></span></span></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>