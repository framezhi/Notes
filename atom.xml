<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://notes.yuyzzz.top</id>
    <title>Yuyzzz&apos;s Notes</title>
    <updated>2021-12-30T02:47:56.534Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://notes.yuyzzz.top"/>
    <link rel="self" href="https://notes.yuyzzz.top/atom.xml"/>
    <logo>https://notes.yuyzzz.top/images/avatar.png</logo>
    <icon>https://notes.yuyzzz.top/favicon.ico</icon>
    <rights>All rights reserved 2021, Yuyzzz&apos;s Notes</rights>
    <entry>
        <title type="html"><![CDATA[11. 总线]]></title>
        <id>https://notes.yuyzzz.top/post/11-zong-xian/</id>
        <link href="https://notes.yuyzzz.top/post/11-zong-xian/">
        </link>
        <updated>2021-12-30T02:45:18.000Z</updated>
        <summary type="html"><![CDATA[<p>介绍了总线的类型、标准、特性、以及一些系统总线和外部总线</p>
]]></summary>
        <content type="html"><![CDATA[<p>介绍了总线的类型、标准、特性、以及一些系统总线和外部总线</p>
<!-- more -->
<h2 id="111-总线的概念">11.1 总线的概念</h2>
<ol>
<li>
<p>什么是总线：</p>
<ul>
<li>总线是连接计算机各组成部件的公用数据通路。连接在总线上的各个部件以分时的方式共享总线，实现数据传送。</li>
<li>计算机工作的过程，实质上就是数据流通过总线在各个部件之间流动的过程。因此，总线也是计算机系统中的重要组成部分。</li>
</ul>
<p>在微机系统中，总线的分类：</p>
<ul>
<li>片内总线：用以连接CPU内部的各个部件，比如ALU、通用寄存器、内部Cache等。</li>
<li>片级总线：用以连接CPU、存储器及I/O接口等电路，构成所谓的主机板</li>
<li>系统总线：主要用来连接外部设备。</li>
</ul>
</li>
<li>
<p>总线的作用：</p>
<ul>
<li>连接计算机的各组成部件，构成不同规模的计算机系统；</li>
<li>在各组成部件之间形成通路，实现各种数据信息的传送。</li>
</ul>
</li>
<li>
<p>总线的特性：</p>
<ul>
<li>分时：同一总线可由多个部件分时使用。但在同一时刻，只能有一个部件发送数据，可有多个部件接收数据</li>
<li>共享：总线为挂接在其上的多个部件所共有</li>
</ul>
</li>
<li>
<p>总线标准</p>
<ul>
<li>机械结构规范：模块尺寸、总线插头、总线接插件及安装尺寸均有统一规定。</li>
<li>功能规范：总线每条信号线（引脚的名称）、功能及工作过程要有统一规定。</li>
<li>电气规范：总线每条信号线的有效电平、动态转换时间、负载能力等。</li>
</ul>
</li>
<li>
<p>总线组成：</p>
<ul>
<li>数据总线：数据总线用来传送数据，其位数亦称为总线的宽度。它反映的是一次传送数据的位数</li>
<li>地址总线：地址总线用来传送存储器或外设端口地址。无论是存储器还是外部设备，所有数据按地址存储</li>
<li>控制总线：用于传送各种控制信号。在不同的总线结构中，控制总线往往有较大的差异，但基本信号必不可少</li>
<li>电源线和地线：可能有多种电源线和多条地线</li>
</ul>
</li>
</ol>
<h2 id="112-系统总线">11.2 系统总线</h2>
<h3 id="1121-isa总线">11.2.1 ISA总线</h3>
<p>ISA（Industry Standard Architecture，工业标准体系结构）总线是IBM公司为PC/AT电脑而制定的总线标准，为16位体系结构，只能支持16位的I/O设备，数据传输速率大约是18MB/s，也称为AT标准。</p>
<p>接口信号如下：</p>
<img src="https://i0.hdslb.com/bfs/album/91bf56d6e24186b4c7adf13b60706e6dab792a51.png" alt="image-20211230103843103" style="zoom:80%;" />
<h3 id="1122-eisa总线">11.2.2 EISA总线</h3>
<p>EISA（Extended Industry Standard Architecture，扩展工业标准结构）是EISA集团为配合32位CPU而设计的总线扩展标准</p>
<p>EISA总线的输出/输出（I/O）总线和微处理总线是分离的，因此I/O总线可保持低时钟速率以支持ISA卡而微处理器总线则可以高速率运行。EISA机器可以向多个用户提供高速磁盘输出。</p>
<h3 id="1123-pci总线">11.2.3 PCI总线</h3>
<p>PCI有32位和64位两种，32位PCI有120个引脚，64位PCI有184个引脚，目前常用的是32位PCI</p>
<h2 id="113-外部总线">11.3 外部总线</h2>
<h3 id="1131-rs-232c串行总线">11.3.1 RS-232C串行总线</h3>
<p>EIA（Electronics Industries Association）RS（Recommended Standard）-232C是使用广泛的串行异步通信接口。实质上是一种标准</p>
<h3 id="1132-usb总线">11.3.2 USB总线</h3>
<p>USB（Universal Serial Bus）总线的中文含义是通用串行总线，它是一种快速同步传输的双向串行接口</p>
<p>USB硬件结构：</p>
<ul>
<li>USB主机（Host）</li>
<li>USB设备（USB Device）</li>
<li>USB集线器（HUB）：一个USB主机总与一个USB根集线器（USB root HUB）相连。</li>
</ul>
<p>USB数据传输方式：</p>
<ul>
<li>控制传输方式</li>
<li>等时传输方式</li>
<li>中断传输方式</li>
<li>数据块传输方式</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[10. 数模与模数转换及其应用]]></title>
        <id>https://notes.yuyzzz.top/post/10-shu-mo-yu-mo-shu-zhuan-huan-ji-qi-ying-yong/</id>
        <link href="https://notes.yuyzzz.top/post/10-shu-mo-yu-mo-shu-zhuan-huan-ji-qi-ying-yong/">
        </link>
        <updated>2021-12-29T15:23:52.000Z</updated>
        <summary type="html"><![CDATA[<p>本章主要介绍了数模转换的原理和方法，模数转换的原理和方法等</p>
]]></summary>
        <content type="html"><![CDATA[<p>本章主要介绍了数模转换的原理和方法，模数转换的原理和方法等</p>
<!-- more -->
<h2 id="101-物理信号到电信号的转换">10.1 物理信号到电信号的转换</h2>
<h3 id="1011-物理信号到电信号的转换">10.1.1 物理信号到电信号的转换</h3>
<p>模拟量：代表某种物理量的模拟电压（或模拟电流）</p>
<p>模/数（A/D）转换：把模拟量转换成数字量送到计算机进行处理</p>
<h2 id="102-数模转换及应用">10.2 数/模转换及应用</h2>
<h3 id="1021-数模转换基本原理">10.2.1 数模转换基本原理</h3>
<p>数/模（D/A）转换器是一种把数字量转换为模拟量的线性电子器件，它将输入的二进制数字量转换成模拟量，以电压或电流的形式输出，用于驱动外部执行机构。</p>
<p>常用方法：</p>
<ul>
<li>加权电阻网</li>
<li>T型电阻网</li>
</ul>
<ol>
<li>
<p>运算放大器：将<strong>模拟电流转换成模拟电压</strong>，这一步由运算放大器完成。有些D/A转换集成电路芯片中包含有运算放大器，有的没有，这时就需要外接运算放大器。</p>
</li>
<li>
<p>加权电阻网：</p>
<ul>
<li>
<p>数字量要转换成模拟量，必须把每一位上的代码按权转换成对应的模拟分量，再把各模拟分量相加，所得到的总的模拟量便对应于给出的数字量。</p>
</li>
<li>
<p>加权电阻网D/A转换就是用一个二进制数字的每一位代码产生一个与其相应权成正比的电压（或电流），然后将这些电压（或电流）叠加起来，就可得到该二进制数所对应的模拟量电压（或电流）信号。</p>
</li>
<li>
<p>加权电阻网D/A转换器由权电阻、位切换开关、运算放大器组成。 下图为4位二进制D/A转换的电路原理图。</p>
<img src="https://i0.hdslb.com/bfs/album/8dbca1f94af6b59fcc8c841da3481605f8e17f92.png" alt="image-20211229200809084" style="zoom:80%;" />
<img src="https://i0.hdslb.com/bfs/album/dbaef3f33ca20eaecd9a8fb7db13201221fce2a4.png" alt="image-20211229200908465" style="zoom:80%;" />
</li>
</ul>
</li>
<li>
<p>T型电阻网</p>
<ul>
<li>
<p>T型电阻网D/A转换器由位切换开关、R-2R电阻网络、运算放大器以及参考电压组成</p>
</li>
<li>
<p>整个网络中只有R和2R两种电阻。</p>
</li>
<li>
<p>与上述加权电阻网络法的主要区别在于电阻求和网络的形式不同，它<strong>采用分流原理</strong>来实现对相应数字位的转换。下图为4位二进制D/A转换的电路原理图。</p>
<img src="https://i0.hdslb.com/bfs/album/e2a211817b5d712fd6c6b43803d6095965642083.png" alt="image-20211229201350674" style="zoom:80%;" />
<img src="https://i0.hdslb.com/bfs/album/89d64d433855f6e8fdb7756e08f9fcde2868278d.png" alt="image-20211229201659119" style="zoom:80%;" />
</li>
</ul>
</li>
</ol>
<h3 id="1022-数模转换器的性能参数">10.2.2 数/模转换器的性能参数</h3>
<ol>
<li>分辨率:
<ul>
<li>分辨率是D/A转换器模拟输出电压可能被分离的等级数，输入数字量的位数越多，输出电压可分离的等级越多。</li>
<li>理论上以可分辨的最小输出电压与最大输出电压之比表示D/A转换器的分辨率；</li>
<li>通常以输入数字量的二进制位数表示分辨率。对于一个N位的D/A转换器，它的分辨率为1/(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mi>N</mi></msup></mrow><annotation encoding="application/x-tex">2^N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8413309999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span></span></span></span></span></span></span></span>－1)</li>
</ul>
</li>
<li>转换精度：某一数字量的理论输出值和经D/A转换器转换的实际输出值之差</li>
<li>建立时间：当DAC输入由最小的数字量变为最大的数字量时，DAC的输出达到稳定所需要的时间称为DAC的输出建立时间。建立时间反映了DAC的转换速度。</li>
<li>线性度：线性度指当数字量发生变化时，D/A转换器的输出量按比例关系变化的程度。理想的D/A转换器是线性的，但实际有误差。</li>
<li>温度系数：温度系数是指在输入不变的情况下，输出模拟电压随温度变化产生的变化量。一般用满刻度输出条件下温度每升高1℃，输出电压变化的百分数作为温度系数，主要用于说明转换器受温度变化影响的特性。</li>
<li>输入代码：有二进制码、BCD码和偏移二进制码等。</li>
<li>输出电平：一般为5V~10V</li>
</ol>
<h3 id="1023-8位da转换器dac0832">10.2.3 8位D/A转换器DAC0832</h3>
<p>D/A转换芯片是由集成在单一芯片上的解码网络和根据需要而附加上的一些功能电路构成的</p>
<ol>
<li>
<p>DAC0832的内部结构和引脚</p>
<img src="https://i0.hdslb.com/bfs/album/815a0adf80e9fe1f0751bb452c32f0020b532a3c.png" alt="image-20211229210609706" style="zoom:80%;" />
<ul>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mrow><mi>C</mi><mi>S</mi></mrow><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{CS}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8833300000000001em;vertical-align:0em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span>: 第一级数据缓冲器的片选信号，低电平有效</li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mrow><mi>X</mi><mi>F</mi><mi>E</mi><mi>R</mi></mrow><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{XFER}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8833300000000001em;vertical-align:0em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span>: 传送控制信号，控制从输入寄存器向DAC寄存器传送数据</li>
<li>ILE: 允许输入锁存，高电平有效</li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>I</mi><mrow><mi>o</mi><mi>u</mi><mi>t</mi><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">I_{out1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">u</span><span class="mord mathdefault mtight">t</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>I</mi><mrow><mi>o</mi><mi>u</mi><mi>t</mi><mn>2</mn></mrow></msub></mrow><annotation encoding="application/x-tex">I_{out2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">u</span><span class="mord mathdefault mtight">t</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>：DAC输出模拟电流，IOUT1+IOUT2=常数。IOUT1和IOUT2随DAC寄存器内容线性变化<br>
若需要电压输出，要通过运算放大器进行电流－电压转换</li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>R</mi><mrow><mi>F</mi><mi>B</mi></mrow></msub></mrow><annotation encoding="application/x-tex">R_{FB}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">F</span><span class="mord mathdefault mtight" style="margin-right:0.05017em;">B</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>​：反馈电阻, 供电流－电压转换电路使用, 该电阻被制作在芯片内</li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>V</mi><mrow><mi>R</mi><mi>F</mi><mi>E</mi></mrow></msub></mrow><annotation encoding="application/x-tex">V_{RFE}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.00773em;">R</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">F</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>​：基准电压输入端，为模拟电压输入，允许范围是：-10V ~+10V</li>
</ul>
</li>
<li>
<p>DAC0832的模拟输出</p>
<ul>
<li>
<p>单极性电压输出：输入数字为单极性数字时，典型的单极性电压输出电路如图所示，由运算放大器进行电流－电压转换，使用芯片内部的反馈电阻。</p>
<p>输出电压与输入数字D的关系：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>V</mi><mrow><mi>O</mi><mi>U</mi><mi>T</mi></mrow></msub><mi mathvariant="normal">＝</mi><mo>−</mo><msub><mi>V</mi><mrow><mi>R</mi><mi>E</mi><mi>F</mi></mrow></msub><mo>×</mo><mi>D</mi><mi mathvariant="normal">/</mi><mn>256</mn></mrow><annotation encoding="application/x-tex">V_{OUT} ＝ -V_{REF} × D / 256</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">O</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">U</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">＝</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.00773em;">R</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">F</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord">/</span><span class="mord">2</span><span class="mord">5</span><span class="mord">6</span></span></span></span></p>
<img src="https://i0.hdslb.com/bfs/album/de20a03900edf13b2a18304a21eb6930473c6940.png" alt="image-20211229212923920" style="zoom:80%;" />
</li>
<li>
<p>双极性电压输出：取电阻R2=R3=2R1，输出电压<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>V</mi><mrow><mi>O</mi><mi>U</mi><mi>T</mi></mrow></msub></mrow><annotation encoding="application/x-tex">V_{OUT}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">O</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">U</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>与输入数字D的关系为：</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>V</mi><mrow><mi>O</mi><mi>U</mi><mi>T</mi></mrow></msub><mi mathvariant="normal">＝</mi><mn>2</mn><mo>×</mo><msub><mi>V</mi><mrow><mi>R</mi><mi>E</mi><mi>F</mi></mrow></msub><mo>×</mo><mi>D</mi><mi mathvariant="normal">/</mi><mn>256</mn><mo>−</mo><msub><mi>V</mi><mrow><mi>R</mi><mi>E</mi><mi>F</mi></mrow></msub><mi mathvariant="normal">＝</mi><mi mathvariant="normal">（</mi><mn>2</mn><mi>D</mi><mi mathvariant="normal">/</mi><mn>256</mn><mi mathvariant="normal">—</mi><mn>1</mn><mi mathvariant="normal">）</mi><msub><mi>V</mi><mrow><mi>R</mi><mi>E</mi><mi>F</mi></mrow></msub></mrow><annotation encoding="application/x-tex">V_{OUT} ＝ 2 × V_{REF} × D / 256-V_{REF}
       ＝（2D / 256 — 1）V_{REF}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">O</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">U</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">＝</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.00773em;">R</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">F</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord">/</span><span class="mord">2</span><span class="mord">5</span><span class="mord">6</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.00773em;">R</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">F</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">＝</span><span class="mord cjk_fallback">（</span><span class="mord">2</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord">/</span><span class="mord">2</span><span class="mord">5</span><span class="mord">6</span><span class="mord" style="margin-right:0.02778em;">—</span><span class="mord">1</span><span class="mord cjk_fallback">）</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.00773em;">R</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">F</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p>
</li>
</ul>
</li>
<li>
<p>DAC0832的工作方式</p>
<ul>
<li>直通方式：即第一级、第二级数据缓冲器都直通。</li>
<li>单缓冲方式：两级数据缓冲器之一处于直通状态，输入数据只经过一级缓冲送入D/A转换电路</li>
<li>双缓冲方式：适用于系统中有多片DAC0832，特别是要求同时输出多个模拟量的场合。多片WR2与XFER，并联在一起。先分别将每一路的数据写入各个芯片的第一级数据缓冲器，然后同时将数据锁存到每一片0832的第二级数据缓冲器。</li>
</ul>
</li>
</ol>
<h2 id="103-模数转换及应用">10.3 模/数转换及应用</h2>
<p>A/D转换常用方式</p>
<ul>
<li>计数式：最简单，但转换速度很低,并行转换速率最快，但需要的器件多，价格高；</li>
<li>逐次逼近式：A/D转换器的速度较高，比较简单，而且价格适中；</li>
<li>双积分式：A/D转换器精度高，抗干扰能力强，但速度低，一般用在要求精度高，但速度不高的场合。</li>
</ul>
<h3 id="1031-模数转换器的基本原理">10.3.1 模/数转换器的基本原理</h3>
<ol>
<li>
<p>采样：将时间上连续变化的信号，转换为时间上离散的信号，采样脉冲宽度较短，在下一个采样脉冲到来之前，应暂时保持所取得的样值脉冲幅度，以便进行转换</p>
</li>
<li>
<p>采样保持：通过采样保持器来完成</p>
</li>
<li>
<p>量化：以一定的量化阶距为单位，把数值上连续的模拟量转变为数值上离散的量的过程</p>
<ul>
<li>如量化单位用q表示，量化过程为：
<ul>
<li>把要转换的模拟量除以q；</li>
<li>除法得到的整数部分，用二进制表示，即得转换数字量；</li>
<li>除法得到的余数部分，舍去；</li>
<li>因为舍去的余数是由于量化造成的，所以称为量化误差。</li>
</ul>
</li>
<li>量化误差处理手段（量化单位越小，量化误差也就越小）
<ul>
<li>四舍五入（误差小）</li>
<li>只舍不入（误差大）</li>
</ul>
</li>
</ul>
</li>
<li>
<p>输入极性与编码：编码便于微机读入和识别，输入极性不同时，编码方式也不同</p>
<ul>
<li>
<p>单极性输入：此时以二进制形式进行量化编码，以ADC0808为例，转换公式为</p>
<img src="https://i0.hdslb.com/bfs/album/0ad4fa3faec7e26f21d15fbe200ce03bdf990a61.png" alt="image-20211229223024952" style="zoom:60%;" />
<p>其中：</p>
<ul>
<li>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>V</mi><mrow><mi>I</mi><mi>N</mi></mrow></msub></mrow><annotation encoding="application/x-tex">V_{IN}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07847em;">I</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>为模拟电压输入</p>
</li>
<li>
<p>D为数字量输出</p>
</li>
<li>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>V</mi><mrow><mi>R</mi><mi>E</mi><mi>F</mi><mo>(</mo><mo>+</mo><mo>)</mo></mrow></msub></mrow><annotation encoding="application/x-tex">V_{REF(+)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.03853em;vertical-align:-0.3551999999999999em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.34480000000000005em;"><span style="top:-2.5198em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.00773em;">R</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">F</span><span class="mopen mtight">(</span><span class="mord mtight">+</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3551999999999999em;"><span></span></span></span></span></span></span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>V</mi><mrow><mi>R</mi><mi>E</mi><mi>F</mi><mo>(</mo><mo>−</mo><mo>)</mo></mrow></msub></mrow><annotation encoding="application/x-tex">V_{REF(-)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.03853em;vertical-align:-0.3551999999999999em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.34480000000000005em;"><span style="top:-2.5198em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.00773em;">R</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">F</span><span class="mopen mtight">(</span><span class="mord mtight">−</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3551999999999999em;"><span></span></span></span></span></span></span></span></span></span>为参考电压输入，假如V_REF(+)为+5V，V_REF(-)接地</p>
<img src="https://i0.hdslb.com/bfs/album/2d4b8898c6f0d97c66b8b1150cd8620a1600ae2e.png" alt="image-20211229223711079" style="zoom:60%;" />
</li>
</ul>
</li>
<li>
<p>双极性输入：输入信号的编码通常有以下三种方式</p>
<ul>
<li>
<p>偏移二进制码：以最高位为符号位，1表示正，0表示负；后面的各位表示幅值；相当于把单极性的ADC的输入输出特性曲线向左平移了一半。</p>
<img src="https://i0.hdslb.com/bfs/album/e0d5ef68bf70f6d093c10ef4ebae755d1990e71b.png" alt="image-20211229224044351" style="zoom:67%;" />
</li>
<li>
<p>原码：当输入为正时，符号位为0；当输入为负时，符号位为1。后面的各位表示其幅值。</p>
</li>
<li>
<p>补码：其符号位刚好与偏移二进制码的符号位相反，后面的各位相同。</p>
</li>
</ul>
</li>
</ul>
</li>
</ol>
<h3 id="1032-模数转换器的性能参数">10.3.2 模/数转换器的性能参数</h3>
<ul>
<li>量程：指A/D转换器能够实现转换的输入电压范围。</li>
<li>分辨率：指A/D转换器对输入模拟信号的分辨能力，以A/D转换器输出的二进制数的位数有关。<br>
理论上，n位输出的A/D转换器能区分2n个不同等级的输入模拟电压，能区分的输入电压的最小值（即量化阶距）为满量程输入电压的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mi mathvariant="normal">/</mi><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">1/2^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord">/</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span>。当满量程输入电压一定时，输出的位数越多，能区分的输入电压的最小值越小，即分辨率越高。</li>
<li>量化误差</li>
<li>转换误差：实际的输出数字量与理论上的输出数字量之间的差别，通常以整个输入范围内的最大输出误差表示。</li>
<li>转换精度：是指最低有效位对应的模拟量</li>
<li>转换时间：开始一次转换到完成转换得到相应的数字量输出所需的时间</li>
</ul>
<h3 id="1033-8位ad转换器adc08080809">10.3.3 8位A/D转换器ADC0808/0809</h3>
<p>ADC0808和ADC0809的主要区别是精度不同：</p>
<ul>
<li>ADC0808的误差为±1/2LSB</li>
<li>ADC0809的误差为±1LSB</li>
</ul>
<ol>
<li>
<p>ADC0808/0809内部结构与引脚</p>
<img src="https://i0.hdslb.com/bfs/album/7d42ea68fc798a2d3d48930f6b4372da954bf4f7.png" alt="image-20211229225803448" style="zoom:80%;" />
<ul>
<li>
<p>3个引脚分别为：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mi>D</mi><msub><mi>D</mi><mi>A</mi></msub><mi mathvariant="normal">/</mi><mi>A</mi><mi>D</mi><msub><mi>D</mi><mi>B</mi></msub><mi mathvariant="normal">/</mi><mi>A</mi><mi>D</mi><msub><mi>D</mi><mi>C</mi></msub></mrow><annotation encoding="application/x-tex">ADD_A/ADD_B/ADD_C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">A</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">/</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05017em;">B</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">/</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，8路模拟电压输入的选择，译码后选择8路模拟电压输入中的一路进行转换</p>
<img src="https://i0.hdslb.com/bfs/album/9c4a86830df4071af7d0aa194fc7629a6639fb09.png" style="zoom:80%;" />
</li>
<li>
<p>ALE: 地址锁存允许信号, 控制通道选择开关的打开与闭合</p>
<ul>
<li>ALE=1时,接通某一路的模拟信号</li>
<li>ALE=0时，锁存该路的模拟信号</li>
</ul>
</li>
<li>
<p>START: 转换启动信号</p>
</li>
<li>
<p>EOC: 转换结束信号，上升沿有效闭合</p>
</li>
<li>
<p>OE: 打开三态输出锁存器的门，把转换结果送到数据总线上</p>
</li>
</ul>
</li>
<li>
<p>ADC0808/0809工作过程和时序分析</p>
<ul>
<li>由ADD_A、ADD_B、ADD_C三位决定选择哪一路模拟信号；</li>
<li>ALE=1，该路模拟信号经选择开关到达比较器的输入端。</li>
<li>转换启动信号START紧随ALE之后（或与ALE同时）出现，START的上升沿将逐次逼近寄存器复位，下降沿启动A/D转换；</li>
<li>START的上升沿之后的2μs加8个时钟周期内（不定），EOC信号将变为低电平，表示正在转换，EOC再变高电平时说明转换结束；</li>
<li>此时转换结果已经保存到8位三态输出锁存器；</li>
<li>CPU获取转换结束信号EOC后，设置OE为高电平，打开三态输出锁存器，转换结果出现在数据总线上，CPU即可读取。</li>
</ul>
<img src="https://i0.hdslb.com/bfs/album/3d64cb7290e1ef5d5c079c7ed2135829e3676a7d.png" alt="image-20211229231105807" style="zoom:67%;" />
</li>
<li>
<p>CPU获取EOC的方式</p>
<ul>
<li>延时等待方式：
<ul>
<li>预先计算好A/D转换的时间。当CPU启动A/D转换后，执行一段略大于A/D转换时间的延迟程序后，即可读取数据。</li>
<li>采用软件延时方式，无需硬件连线，但要占用CPU大量的时间，而且无法精确计算A/D转换的时间，故多用于CPU处理任务较少的系统中。</li>
</ul>
</li>
<li>查询方式
<ul>
<li>CPU在启动A/D转换后，开始查询转换是否结束，一旦查到转换结束信号EOC有效（先低后高），便读取ADC中的数据。</li>
<li>这种方式程序设计比较简单，实时性也较强，是比较常用的一种方法。</li>
</ul>
</li>
<li>中断方式
<ul>
<li>EOC作为中断请求信号接到系统中的中断控制器，CPU响应中断后，在中断服务程序中读取数据。</li>
<li>在这种方式中，ADC与CPU同时工作，效率较高，接口简单。适用于实时性较强或参数较多的数据采集系统。</li>
</ul>
</li>
<li>DMA
<ul>
<li>转换结束信号EOC作为DMA请求信号接到系统中的DMAC，转换结束时，向CPU申请DMA传输，CPU响应后，通过DMAC直接将转换结果送入内存缓冲区。</li>
<li>这种方式不需要CPU的参与，特别适合要求高速采集大量数据的情况。</li>
</ul>
</li>
</ul>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[9. 中断与中断管理]]></title>
        <id>https://notes.yuyzzz.top/post/9-zhong-duan-yu-zhong-duan/</id>
        <link href="https://notes.yuyzzz.top/post/9-zhong-duan-yu-zhong-duan/">
        </link>
        <updated>2021-12-28T13:04:15.000Z</updated>
        <summary type="html"><![CDATA[<p>本章主要介绍了中断的概念、8086的中断系统以及中断控制器8259A的结构、功能、初始化编程等。</p>
]]></summary>
        <content type="html"><![CDATA[<p>本章主要介绍了中断的概念、8086的中断系统以及中断控制器8259A的结构、功能、初始化编程等。</p>
<!-- more -->
<h2 id="91-中断概念">9.1 中断概念</h2>
<h3 id="911-中断基本概念">9.1.1 中断基本概念</h3>
<p>由于发生某种随机事件导致CPU暂时中断正在运行的程序，转而去执行一段特殊的服务程序（中断服务程序），事件处理完后又返回被中断的程序继续执行，这一过程称为中断。</p>
<p>CPU与外设交换信息的方式，处理随机事件和外部请求</p>
<p><strong>中断源</strong>:  引起CPU中断的事件，发出中断请求的来源</p>
<img src="https://i0.hdslb.com/bfs/album/73e1175cdfc7d75db2fb7f3bef21c26049e22f89.png" alt="image-20211225221220522" style="zoom:80%;" />
<h3 id="912-中断系统的功能">9.1.2 中断系统的功能</h3>
<p><strong>中断请求</strong>：中断请求信号应保持到中断被处理为止，CPU响应中断后，中断请求信号应及时撤销</p>
<ul>
<li>非屏蔽中断NMI: 在当前指令执行结束之后，不受标志位IF的影响，无条件响应中断，中断类型号为2</li>
<li>可屏蔽中断INTR: 在当前指令执行结束之后，检查标志位IF，若为1，则进行响应，否则不予响应。IF标志位可以通过执行STI 指令和CLI指令设置。STI指令称为开中断命令，执行STI指令，IF标志位置1。CLI指令称为关中断命令,执行CLI指令，IF标志位清0。</li>
</ul>
<p><strong>中断源识别</strong>：CPU需确定是哪一个中断源提出了中断请求；找到该中断服务程序的入口地址。</p>
<ul>
<li>
<p>软件查询法：</p>
<ul>
<li>
<p>各中断源的中断请求信号相&quot;或&quot;作为INTR信号</p>
</li>
<li>
<p>各中断源的中断请求信号接到缓冲器的一位</p>
<img src="https://i0.hdslb.com/bfs/album/7ebfd16bafeb16ece0ad0e5fdeb8850394760ff7.png" alt="image-20211225225459204" style="zoom:80%;" />
</li>
<li>
<p>优点：硬件电路简单，无需硬件优先级排队电路，可随时修改优先级</p>
</li>
<li>
<p>缺点：中断源较多时，查询时间长，影响实时性</p>
</li>
</ul>
</li>
<li>
<p>中断向量法：要求中断源提供一个中断类型号，中断控制电路完成中断源识别后，将该中断源对应的中断类型号传送给CPU。CPU根据中断类型号可生成该中断源的中断向量，根据中断向量从中断向量表中取出相应的中断服务程序的入口地址</p>
<img src="https://i0.hdslb.com/bfs/album/c519cc0b72497e50a24789767d38b6fb97816966.png" alt="image-20211226135356971" style="zoom:67%;" />
<ul>
<li>优点：CPU可直接通过中断向量表转向相应的中断服务程序，大大加快了中断响应的速度。</li>
</ul>
</li>
</ul>
<p><strong>中断判优</strong>：根据优先级来执行中断</p>
<p>对非同时产生的中断，低优先级的中断程序允许被高优先级的中断源所中断，称为<strong>中断嵌套</strong></p>
<ul>
<li>
<p>软件判优</p>
<ul>
<li>
<p>当CPU接收到中断请求信号后，执行优先级判优的查询程序，逐个检测外设中断请求标志位的状态</p>
</li>
<li>
<p>最先检测到的中断源具有最高的优先级；最后检测到的中断源具有最低的优先级。</p>
<img src="https://i0.hdslb.com/bfs/album/b7b9ed03e4f93a584d8206106a2249b712896db7.png" alt="image-20211226141334227" style="zoom:50%;" />
</li>
</ul>
</li>
<li>
<p>硬件判优：菊花链逻辑电路</p>
</li>
</ul>
<p><strong>中断响应</strong>: 向中断源发出INTA中断响应信号；保护断点：包括FLAGS、 CS和IP；获得中断服务程序入口地址</p>
<p><strong>中断处理、中断返回</strong></p>
<ol>
<li>保护现场</li>
<li>开中断（STI）</li>
<li>中断处理</li>
<li>关中断（CLI）</li>
<li>恢复现场</li>
<li>中断返回：执行IRET指令，使IP、CS和FLAGS从堆栈弹出</li>
</ol>
<h2 id="92-8086的中断系统">9.2 8086的中断系统</h2>
<h3 id="921-8086的中断类型">9.2.1 8086的中断类型</h3>
<img src="https://i0.hdslb.com/bfs/album/d850e0cd0aa250078c189a9d8205eb2b789aadf1.png" alt="image-20211226145127697" style="zoom:57%;" />
<img src="https://i0.hdslb.com/bfs/album/5eecc2e4c571116b3c5b6ac8804bfe0371df3249.png" alt="image-20211226145202638" style="zoom:50%;" />
<ol>
<li>
<p>外部中断：硬件请求产生的中断（也称硬件中断）</p>
<ul>
<li>非屏蔽中断NMI: NMI引脚引入，上升沿触发；在当前指令执行结束之后，不受标志位IF的影响，无条件响应中断，中断类型号为2</li>
<li>可屏蔽中断INTR: INTR引脚引入，电平触发，高电平有效；在当前指令执行结束之后，检查标志位IF，若为1，则进行响应，否则不予响应。IF标志位可以通过执行STI 指令和CLI指令设置。STI指令称为开中断命令，执行STI指令，IF标志位置1。CLI指令称为关中断命令,执行CLI指令，IF标志位清0。</li>
</ul>
</li>
<li>
<p>内部中断：程序异常或执行内部程序调用引起（软中断），有以下几种</p>
<ul>
<li>除法错中断：执行除法指令时，若除数为0或商超过寄存器所能表达的范围，则CPU立即产生类型0中断。</li>
<li>溢出中断——如果上一条指令使溢出标志位OF为1，则执行INTO指令产生类型4中断。</li>
<li>INT n指令中断——8086的指令系统中有一条INT n指令，执行这条指令就会立即产生中断。</li>
<li>单步中断——当单步标志（陷阱标志）TF置“1”时，8086处于单步工作方式。在单步工作时，每执行完一条指令，CPU自动产生中断类型1的中断。可以用于调试</li>
<li>断点中断——断点中断是8086提供的一种调试程序的手段。用于设置程序中的断点，中断类型号为3。</li>
</ul>
</li>
<li>
<p>中断优先级</p>
<img src="https://i0.hdslb.com/bfs/album/64e8725515cf4fcb80a276fee55709575d5b6510.png" alt="image-20211226152335221" style="zoom:50%;" />
</li>
</ol>
<h3 id="922-中断向量和中断向量表">9.2.2 中断向量和中断向量表</h3>
<p><strong>概念</strong></p>
<ol>
<li>
<p>中断向量：</p>
<ul>
<li>中断服务程序在内存中的入口地址叫中断向量。</li>
<li>每个中断类型对应一个中断向量。</li>
<li>8086中断向量的字长是4个字节：2个字节的段地址，2个字节的偏移地址</li>
</ul>
</li>
<li>
<p>中断向量表：</p>
<ul>
<li>
<p>存放中断向量的存储区就叫中断向量表或中断服务程序入口地址表。</p>
</li>
<li>
<p>8086系统把中断向量表安排在内存地址00000H～003FFH区域（1KB）。</p>
</li>
<li>
<p>每四个连续字节存放一个中断向量：高地址2个字节单元放段地址（CS），低地址2个字节单元中放偏移地址(IP)。</p>
<img src="https://i0.hdslb.com/bfs/album/519f6a90739af49958ce68b1be0d8e42c6dd690e.png" alt="image-20211228210939129" style="zoom:80%;" />
</li>
</ul>
</li>
<li>
<p>中断向量表地址指针：存放中断向量的4个存储单元的最低地址称为向量表地址指针,计算方法：中断类型号×4</p>
<img src="https://i0.hdslb.com/bfs/album/bdb2687fea4719a6fb344dcf2a1ca56942f2557d.png" alt="image-20211226160949845" style="zoom:50%;" />
</li>
<li>
<p>8086中断向量表</p>
<img src="https://i0.hdslb.com/bfs/album/4e91b107d31b8a1842e94ca3e5a6efc418c44fcc.png" alt="image-20211227105252324" style="zoom: 67%;" />
</li>
</ol>
<p><strong>中断向量的设置</strong></p>
<ul>
<li>中断向量并非常驻内存，而是开机上电时，由程序装入指定的存储区内。</li>
<li>BIOS程序只负责中断类型号00H～1FH共32种中断的中断向量的装入。</li>
<li>用户使用中断时，需要在初始化程序中将中断服务子程序的入口地址装入中断向量表指定的存储单元中，以便在CPU响应中断请求后，由中断向量自动引导到中断服务子程序。</li>
</ul>
<p>(1) 用传输指令直接送入：</p>
<p>【例】：将中断向量码为48H的服务程序入口地址放入向量表</p>
<p>计算中断服务程序的入口地址: 48H*4=72*4=288=120H</p>
<pre><code>MOV  AX,0000H
MOV  DS,AX
MOV  SI,0120H
MOV  BX，OFFSET INT1
MOV  [SI],BX
MOV  BX,SEG INT1
MOV  [SI+2],BX
</code></pre>
<p>(2) 用DOS系统功能调用：在系统功能调用INT 21H中，25H调用可以设置中断向量</p>
<p>入口参数：</p>
<ul>
<li>AH= 25H;</li>
<li>AL=中断类型号;</li>
<li>DS =中断服务程序入口地址的段地址;</li>
<li>DX=中断服务程序入口地址的偏移地址</li>
</ul>
<p>【例】：将中断类型号为40H的服务程序入口地址放入向量表，中断服务程序入口地址为INT_P，调用25H功能如下:</p>
<pre><code>CLI
MOV AL,40H
MOV DX,SEG INT_P
MOV DS,DX
MOV DX,OFFSET INT_P
MOV AH,25H
INT 21H
STI
</code></pre>
<h3 id="923-8086的中断响应和处理过程">9.2.3 8086的中断响应和处理过程</h3>
<ol>
<li>中断源识别：通过中断向量识别</li>
<li>8086的中断优先级：按内部中断（除法出错、INT n、断点中断、溢出中断）、NMI、INTR、单步中断的顺序来逐个查询</li>
<li>由中断源提供中断类型号</li>
</ol>
<img src="https://i0.hdslb.com/bfs/album/5a32eefea6f375501b0d0b2aadf8f8bece55f8fd.png" alt="image-20211227112354164" style="zoom:57%;" />
<ol start="4">
<li>
<p>中断响应过程</p>
<p>内部中断特点：</p>
<ul>
<li>无INTA周期(?)</li>
<li>中断类型号固定或已给出</li>
</ul>
<p>内部中断响应过程：</p>
<ol>
<li>PUSH  FLAG</li>
<li>LET  TEMP = TF</li>
<li>CLEAR  IF，TF</li>
<li>PUSH  CS</li>
<li>PUSH  IP</li>
<li>(IP)=(TYPE*4+1):(TYPE*4+0)</li>
<li>(CS)=(TYPE*4+3):(TYPE*4+2)</li>
</ol>
<p>可屏蔽中断的响应过程:</p>
<ol>
<li>第1个INTA，中断控制器进行优先级排队判优处理</li>
<li>第1个INTA，中断控制器把中断类型码放到DB上，由CPU读入</li>
<li>PUSH  FLAG</li>
<li>LET  TEMP = TF</li>
<li>CLEAR  IF，TF</li>
<li>PUSH  CS</li>
<li>PUSH  IP</li>
<li>（IP）=（TYPE*4+1）:（TYPE*4+0）</li>
<li>（CS）=（TYPE*4+3）:（TYPE*4+2）<br>
NMI中断响应过程与内部中断类似</li>
</ol>
</li>
</ol>
<img src="https://i0.hdslb.com/bfs/album/3114d9020f4fe606e95fd8395143796aa9d7700b.png" alt="image-20211227162456544" style="zoom:57%;" />
<h2 id="93-8259中断控制器">9.3 8259中断控制器</h2>
<h3 id="931-8259a的结构">9.3.1 8259A的结构</h3>
<img src="https://i0.hdslb.com/bfs/album/3b79cc224f4658363fa7480e4c47c4ab04232c6f.png" alt="image-20211227163744043" style="zoom:57%;" />
<ol>
<li>中断请求寄存器(IRR):
<ul>
<li>8位，接受并锁存来自IR0～IR7的中断请求信号</li>
<li>第i位=1：IRi有请求；第i位=0：IRi没有请求</li>
<li>当中断请求响应后，IRR相应位复位</li>
</ul>
</li>
<li>中断屏蔽寄存器(IMR)(OCW1):
<ul>
<li>8位，存放CPU送来的屏蔽信号</li>
<li>第i位=1：屏蔽IRi的中断请求</li>
<li>第i位=0：开放IRi的中断请求</li>
</ul>
</li>
<li>中断服务寄存器(ISR):
<ul>
<li>8位，记录正在处理中的所有中断请求</li>
<li>第i位=1：IRi正在处理</li>
<li>在多重中断时，ISR中可能有多位同时被置“1”</li>
</ul>
</li>
<li>优先级判别器(PR): 8位, 管理和识别IRR中各个中断源的优先级别</li>
<li>数据总线缓冲器
<ul>
<li>8位，双向，三态</li>
<li>8259A和系统数据总线的接口，传输信号：
<ul>
<li>CPU对8259A的控制字</li>
<li>8259A送给CPU的状态信息</li>
<li>8259A送给CPU的中断向量</li>
</ul>
</li>
</ul>
</li>
<li>命令寄存器:编程角度看，8259A有7个8位的寄存器：
<ul>
<li>4个初始化命令字寄存器（ICW1～ICW4）, 系统初启时设定</li>
<li>3个操作命令字寄存器（OCW1～OCW3）, 系统运行时，由应用程序设定</li>
</ul>
</li>
</ol>
<h3 id="932-8259a的引脚">9.3.2 8259A的引脚</h3>
<img src="https://i0.hdslb.com/bfs/album/e3381f8464206ff49609a7db0c0e7e1212bca165.png" alt="image-20211227165049948" style="zoom:57%;" />
<ul>
<li>
<p>INT</p>
<ul>
<li>中断请求信号, 输出</li>
<li>单片时由8259A输出给CPU</li>
<li>级联时，主片INT连接CPU的INTR，从片INT连接主片的IRi</li>
</ul>
</li>
<li>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mtext>INTA</mtext><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{\text{INTA}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8833300000000001em;vertical-align:0em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord">INTA</span></span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span></p>
<ul>
<li>中断响应信号, 输入</li>
<li>CPU的中断应答信号输出给8259A</li>
</ul>
</li>
<li>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>C</mi><mi>A</mi><msub><mi>S</mi><mn>2</mn></msub><mo>∼</mo><mi>C</mi><mi>S</mi><msub><mi>A</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">CAS_2 \sim CSA_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault">A</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p>
<ul>
<li>级联信号, 主、从片的连接线</li>
<li>主片：输出; 从片：输入</li>
</ul>
</li>
<li>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mrow><mi>S</mi><mi>P</mi></mrow><mo stretchy="true">‾</mo></mover><mi mathvariant="normal">/</mi><mover accent="true"><mrow><mi>E</mi><mi>N</mi></mrow><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{SP}/\overline{EN}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.13333em;vertical-align:-0.25em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mord">/</span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span>:</p>
<ul>
<li>从片/缓冲器允许信号，双向双功能信号</li>
<li>缓冲方式：输出，控制收发器的接收或发送；</li>
<li>非缓冲方式：输入,主片该引脚=1 ，从片该引脚=0</li>
</ul>
</li>
</ul>
<h3 id="933-9259a中断处理过程">9.3.3 9259A中断处理过程</h3>
<ol>
<li>当有一条或若干条中断请求线（IR7～IR0）变为高电平，则中断请求寄存器IRR的相应位置位。</li>
<li>若中断请求线中至少有一条是中断允许的（中断屏蔽寄存器相应位开放，且请求中断的级别高于当前正在服务的中断或未处于中断服务程序中），则8259A通过INT引脚向CPU的INTR引脚发出中断请求信号。</li>
<li>CPU在当前指令执行完后，若检测到中断请求信号，且处于开中断状态（IF=1）则会暂停执行下一条指令，进入中断响应总线周期，发送两个<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mrow><mi>I</mi><mi>N</mi><mi>T</mi><mi>A</mi></mrow><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{INTA}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8833300000000001em;vertical-align:0em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord mathdefault">A</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span>信号给8259A作为响应。</li>
<li>8259A在接受到来自CPU的第一个<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mrow><mi>I</mi><mi>N</mi><mi>T</mi><mi>A</mi></mrow><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{INTA}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8833300000000001em;vertical-align:0em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord mathdefault">A</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span>信号后，使中断源中优先级最高的ISR位置位，而相应的IRR位被复位,在该周期中，<strong>8259A不向数据总线送任何内容</strong>。</li>
<li>在第二个<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mrow><mi>I</mi><mi>N</mi><mi>T</mi><mi>A</mi></mrow><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{INTA}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8833300000000001em;vertical-align:0em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord mathdefault">A</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span>脉冲期间，8259A向CPU发出中断类型号（8位的二进制数，其中高位T7～T3是8259A初始化时设置的，而低3位是8259A自动插入的）, CPU获得后，将此向量乘以4，在中断向量表中找到相应的中断服务程序入口地址。</li>
<li>中断响应周期结束后，CPU就转而执行中断服务程序。采用AEOI方式时，在第二个脉冲<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mrow><mi>I</mi><mi>N</mi><mi>T</mi><mi>A</mi></mrow><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{INTA}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8833300000000001em;vertical-align:0em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord mathdefault">A</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span>结束时，ISR位被复位。否则，在中断服务程序中，应在IRET指令加入相应的EOI指令，使ISR的相应位复位</li>
</ol>
<p>两个<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mrow><mi>I</mi><mi>N</mi><mi>T</mi><mi>A</mi></mrow><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{INTA}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8833300000000001em;vertical-align:0em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord mathdefault">A</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span>信号的作用：</p>
<p>第一个：</p>
<ul>
<li>在第二个INTA负脉冲到达之前，禁止中断请求寄存器IRR锁存新的中断请求。</li>
<li>使中断服务寄存器ISR的对应位置“1”，同时将IRR中的当前响应位清零。</li>
<li>把当前响应中断的编号（000B <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∼</mo></mrow><annotation encoding="application/x-tex">\sim</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">∼</span></span></span></span> 111B，对应IR0 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∼</mo></mrow><annotation encoding="application/x-tex">\sim</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">∼</span></span></span></span> IR7。）送入中断类型寄存器（ICW2）的低三位</li>
</ul>
<p>第二个：</p>
<ul>
<li>将 <strong>中断类型寄存器(ICW2)</strong> 的8位中断类型号送上数据总线，供CPU读取。</li>
<li>如果 <strong>命令寄存器(ICW4)</strong> 中的中断自动结束位为“1”（中断自动结束方式），则将第一个负脉冲到达时在中断服务寄存器ISR中设置的“1”清零。</li>
</ul>
<h3 id="934-8259的级联方式">9.3.4 8259的级联方式</h3>
<ol>
<li>
<p>8259级联结构</p>
<figure data-type="image" tabindex="1"><img src="https://i0.hdslb.com/bfs/album/cf589053412bb85459d24aead6d927454c70ff4e.png" alt="image-20211227184413485" loading="lazy"></figure>
</li>
<li>
<p>工作原理</p>
<ul>
<li>在级联方式下，当主片收到并选中某个中断请求时，
<ul>
<li>先要判别是否是级联端口（在ICW3中设置）</li>
<li>若不是级联端口，则由主8259提供中断类型号；</li>
<li>若是级联端口，则主8259启动CAS2~CAS0送出该级联从片的编号，编号相同的从8259将负责送出对应的中断类型号。</li>
</ul>
</li>
<li>从8259的编号按从片INT输出所接的主8259的输入端编号</li>
</ul>
</li>
</ol>
<h3 id="935-8259的工作方式">9.3.5 8259的工作方式</h3>
<ol>
<li>
<p>8259的优先级方式</p>
<img src="https://i0.hdslb.com/bfs/album/ad67021a203b626e10951d1d766b8dbc22c741e6.png" alt="image-20211227185841678" style="zoom:87%;" />
<ul>
<li>普通全嵌套方式
<ul>
<li>按固定优先级别高低来管理中断：IR0的优先级别最高，IR7最低。</li>
<li>允许优先级更高的中断请求进入，但不允许同级、或低级的中断请求进入.</li>
<li>此种方式用于单片8259或级联方式下的从片8259中。</li>
</ul>
</li>
<li>特殊全嵌套方式
<ul>
<li>按固定优先级别高低来管理中断：IR0的优先级别最高，IR7最低。</li>
<li>在处理某一级中断时，不但允许优先级更高的中断请求进入，也允许同级的中断请求进入。</li>
<li>主从结构的8259系统中，主片设置为特殊全嵌套方式。从主片看来，每个从片是同一优先级的</li>
<li><img src="https://i0.hdslb.com/bfs/album/b6b5164fee03d8ba5852c1b9bc4e45d271b8568b.png" alt="image-20211227190843307" loading="lazy"></li>
</ul>
</li>
<li>自动循环方式
<ul>
<li>初始状态下IR0优先级最高,IR1次之，IR7优先级最低。</li>
<li>一个设备的中断服务完成后，其优先级自动降为最低，而将最高优先级赋给原来比它低一级的中断请求。</li>
</ul>
</li>
<li>特殊循环方式
<ul>
<li>与优先级“自动循环方式”相比，只有一点不同：可以设置初始的最低优先级。</li>
<li>【例】设定IR4为最低优先级，那么IR5就是最高优先级，其余各级按循环方法类推。</li>
</ul>
</li>
</ul>
</li>
<li>
<p>8259屏蔽中断的方式：</p>
<img src="https://i0.hdslb.com/bfs/album/a2d23a8c86b667863f61514f4a2a74ab83cba7dc.png" alt="image-20211227191214278" style="zoom:80%;" />
<ul>
<li>普通中断屏蔽方式： 通过对中断屏蔽寄存器IMR中对应位置“1”来阻止中断请求寄存器IRR中记录的中断请求进入判优寄存器。</li>
<li>特殊中断屏蔽方式： 是用OCW1(IMR)屏蔽掉当前中断请求对应位后，再清零ISR中当前响应位来开放对低优先级的请求。（ 这是一种在当前中断处理程序中只屏蔽等优先级中断请求而允许其它高优先级和低优先级中断请求进行嵌套的方法）</li>
</ul>
</li>
<li>
<p>8259的中断结束方式</p>
<figure data-type="image" tabindex="3"><img src="https://i0.hdslb.com/bfs/album/5ce168e35b3cf4e35704ab61c33bde5d2ab3365a.png" alt="image-20211227191553641" loading="lazy"></figure>
<ul>
<li>自动中断结束(AEOI)方式
<ul>
<li>在第二个<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mrow><mi>I</mi><mi>N</mi><mi>T</mi><mi>A</mi></mrow><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{INTA}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8833300000000001em;vertical-align:0em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord mathdefault">A</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span>后沿，即完成对应的ISR位复位。<br>
注意：AEOI方式是<strong>在中断响应后，而不是在中断处理程序结束后将ISR位清0</strong>。这样，在中断处理过程中，8259A中就没有“正在处理”的标识。此时，若有中断请求出现，且IF＝1，则无论其优先级如何(比本级高、低或相同)，都将得到响应。尤其是当某一中断请求信号被CPU响应后，如不及时撤销，就会再次被响应－“二次中断”</li>
<li>AEOI方式只适合于中断请求信号的持续时间有一定限制以及<strong>不出现中断嵌套</strong>的场合。</li>
</ul>
</li>
<li>非自动中断结束(EOI)方式
<ul>
<li>EOI方式是指在中断服务程序末尾向8259A发出中断结束命令，清除ISR中的相应位，表示该级的中断服务程序已经结束。</li>
<li>EOI命令分为：普通EOI命令，特殊EOI命令
<ul>
<li>普通EOI命令：在全嵌套方式下，ISR中最高优先级的置“1”位，正对应于当前正在处理的中断，将其清“0”，就完成了当前正在处理中断的结束操作。</li>
<li>特殊EOI命令：在非全嵌套方式下，无固定的优先级序列(使用设置优先权命令或特殊屏蔽方式)，此时，根据ISR的内容就无法确定刚刚所响应(处理)的中断。这种情况下，就不能用上述的EOI方式进行中断结束处理，而必须用特殊的中断结束命令</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>8259A的中断触发方式</p>
<ul>
<li>电平触发方式：以IRi引脚上出现的高电平作为中断请求信号；请求一旦被响应，该高电平信号应及时撤除。</li>
<li>边沿触发方式：以IRi引脚上出现的由低电平向高电平的跳变作为中断请求信号，跳变后高电平一直保持，直到中断被响应。</li>
</ul>
</li>
<li>
<p>8259A的连接系统总线方式</p>
<ul>
<li>缓冲方式：主要用于多片8259A级联的大系统中；
<ul>
<li>8259A的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mrow><mi>S</mi><mi>P</mi></mrow><mo stretchy="true">‾</mo></mover><mi mathvariant="normal">/</mi><mover accent="true"><mrow><mi>E</mi><mi>N</mi></mrow><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{SP}/\overline{EN}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.13333em;vertical-align:-0.25em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mord">/</span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span>作为输出(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mrow><mi>E</mi><mi>N</mi></mrow><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{EN}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8833300000000001em;vertical-align:0em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span>有效，用此信号作为总线驱动器的启动信号)，此时，由ICW4的M/S位来定义(标识)本8259A是主片还是从片。</li>
<li>8259A通过总线收发器（如8286）和数据总线相连。</li>
</ul>
</li>
<li>非缓冲方式：主要用于单片8259A或片数不多的8259A级联的系统中。
<ul>
<li>8259A直接与数据总线相连。</li>
<li>8259A的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mrow><mi>S</mi><mi>P</mi></mrow><mo stretchy="true">‾</mo></mover><mi mathvariant="normal">/</mi><mover accent="true"><mrow><mi>E</mi><mi>N</mi></mrow><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{SP}/\overline{EN}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.13333em;vertical-align:-0.25em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mord">/</span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span>作为输出(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mrow><mi>S</mi><mi>P</mi></mrow><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{SP}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8833300000000001em;vertical-align:0em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span>有效)。</li>
<li>M/S位无意义。</li>
</ul>
</li>
</ul>
</li>
<li>
<p>8259A的中断查询方式：当出现如下两种情况时可以工作在查询方式</p>
<ul>
<li>8259A的INT引脚没连接到CPU的INTR引脚</li>
<li>CPU正处于关中断（IF=0），所以CPU不能响应从8259A来的中断请求</li>
</ul>
</li>
</ol>
<img src="https://i0.hdslb.com/bfs/album/ec3109d2c652d2dc86f726e34f395fcf15204307.png" alt="image-20211228114251971" style="zoom:67%;" />
<h3 id="936-8259a的编程与应用">9.3.6 8259A的编程与应用</h3>
<ul>
<li>初始化编程：在中断系统进入正常运行之前，通过设置初始化命令字（ICWl～ICW4）来预置工作方式；</li>
<li>工作方式编程：通过对设置操作命令字（OCW1～OCW3）来实现8259A运行中的操作控制，可在8259A被初始化之后的任何时候使用，可单独使用。</li>
</ul>
<ol>
<li>
<p>8259A初始化命令字ICW：按顺序ICW1-ICW4</p>
<ul>
<li>
<p>初始化命令字ICW1</p>
<img src="https://i0.hdslb.com/bfs/album/5a0f9dd3165c5ed0d785521cf8b37a168d5e85ea.png" alt="image-20211228140236702" style="zoom:77%;" />
</li>
<li>
<p>ICW2：设置中断类型（向量）号的高五位</p>
<img src="https://i0.hdslb.com/bfs/album/1ff81a62c51855b3f1c6add41984aa9b29bf0f17.png" alt="image-20211228160936221" style="zoom:80%;" />
<p>其中D2~D0为任意值，一般为000</p>
<img src="https://i0.hdslb.com/bfs/album/fceb187fa91303141b9b7eea8b8d69dd567772a9.png" alt="image-20211228161027116" style="zoom:80%;" />
</li>
<li>
<p>ICW3：只有在8259级联时才使用</p>
<ul>
<li>
<p>8259作为主片时的格式</p>
<img src="https://i0.hdslb.com/bfs/album/784dad059bed0aca9f42941ff0c0ddd85d78cc04.png" alt="image-20211228161358489" style="zoom:1000%;" />
</li>
<li>
<p>8259A作为从片时的格式：</p>
<p>D2～D0为IR0～IR7三位编码值；表示从片的INT输出与主片8259A中的哪一个IRi相连接。</p>
<figure data-type="image" tabindex="4"><img src="https://i0.hdslb.com/bfs/album/b81002e8735344645c7f936a0258756606c5993d.png" alt="" loading="lazy"></figure>
</li>
</ul>
</li>
<li>
<p>初始化命令字ICW4：</p>
<img src="https://i0.hdslb.com/bfs/album/643fceb9bed842e32b5a8c514f8a4dbf6a41333d.png" alt="image-20211228161829966" style="zoom:90%;" />
</li>
</ul>
</li>
<li>
<p>8259A的操作命令字</p>
<ul>
<li>
<p>OCW1(屏蔽操作命令字)：进行屏蔽操作，直接对IMR相应位置位或复位</p>
<figure data-type="image" tabindex="5"><img src="https://i0.hdslb.com/bfs/album/1b9e352732efb72db5fdab1d198b60adbfeeb9a1.png" alt="image-20211228163434151" loading="lazy"></figure>
</li>
<li>
<p>OCW2：设置中断结束方式和优先级循环方式</p>
<img src="https://i0.hdslb.com/bfs/album/b3d916e9840f1682cfeae19cd84063b5b7d587fd.png" alt="image-20211228163531836" style="zoom:80%;" />
</li>
<li>
<p>OCW3: 设定特殊屏蔽方式及中断查询方式；指定读8259内部寄存器。</p>
<img src="https://i0.hdslb.com/bfs/album/e2d3fa2a1e70872ed451c66bab65e59489998ba4.png" alt="image-20211228164056853" style="zoom:80%;" />
</li>
</ul>
</li>
<li>
<p>8259A应用举例：</p>
<img src="https://i0.hdslb.com/bfs/album/adeb48cfa0fe6ac099599ebdc36cffbf4befd7be.png" alt="image-20211228202940794" style="zoom:80%;" />
</li>
</ol>
<p>【例】如图所示，在PC/AT系统中，使用2片8259A构成级联中断系统。系统分配给主片端口地址为：20H和21H，中断类型号是：08H～0FH；从片端口地址为：A0H和A1H，中断类型号是：70H～77H。编程完成对8259A的初始化。</p>
<img src="https://i0.hdslb.com/bfs/album/da36aa7c6ba271d2933d38a52213df62ccde335e.png" alt="image-20211228204539889" style="zoom:80%;" />
<pre><code>;主片8259A初始化程序
MOV AL,11H  ;设置ICW1，边沿触发，需ICW4
OUT 20H,AL
MOV AL,08H  ;设置ICW2，中断类型号的高5位为00001
OUT 21H,AL
MOV AL,04H  ;设置ICW3，从片连到主片的IR2上
OUT 21H,AL
MOV AL,15H  ;设置ICW4，非缓冲，非AEOI，特殊全嵌套方式
OUT 21H,AL

;从片8259A初始化程序
MOV AL,11H   ;设置ICW1，边沿触发，需ICW4
OUT 0A0H,AL
MOV AL,70H   ;设置ICW2，中断类型号的高5位为01110
OUT 0A1H,AL
MOV AL,02H   ;设置ICW3，设定从片级联于主片的IR2
OUT 0A1H,AL
MOV AL,01H   ;设置ICW4，非缓冲，非AEOI，全嵌套方式
OUT 0A1H,AL 
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[四、信道共享技术]]></title>
        <id>https://notes.yuyzzz.top/post/si-xin-dao-gong-xiang-ji-zhu/</id>
        <link href="https://notes.yuyzzz.top/post/si-xin-dao-gong-xiang-ji-zhu/">
        </link>
        <updated>2021-12-16T08:48:17.000Z</updated>
        <summary type="html"><![CDATA[<p>本章主要介绍了信道复用技术和几种接入方式</p>
]]></summary>
        <content type="html"><![CDATA[<p>本章主要介绍了信道复用技术和几种接入方式</p>
<!-- more -->
<ul>
<li>目的:传输介质共享，提高介质利用率</li>
<li>传输介质的带宽通常远大于单用户需求。</li>
<li>因此需要共用传输介质(信道)→介质访问控制(MAC)</li>
</ul>
<p>信道共享方式：</p>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gwrtkzwp76j30hc0at761.jpg" alt="image.png" style="zoom: 80%;" />
<p>本章主要介绍两大类信道共享技术</p>
<ul>
<li>物理信道划分复用：FDM/TDM/WDM/CDM</li>
<li>多点接入共享:
<ul>
<li>随机接入(ALOHA; CSMA/CD)：用户根据自己的意愿，随机使用信道</li>
<li>受控接入，用户接入信道必须遵守一定的规则，如**集中控制(轮询);**分散控制(令牌环)。</li>
</ul>
</li>
</ul>
<h2 id="41-物理层信道复用">4.1 物理层信道复用</h2>
<h3 id="411-多路复用">4.1.1 多路复用</h3>
<p>把多个低速信道组合成一个高速信道的技术，使得一条高速的主干信道同时为多条低速的接入链路提供服务</p>
<ol>
<li>
<p>频分复用FDM: 频分复用的所有用户在同样时间占用不同的带宽资源。</p>
<p>特点：信号被划分成若干通道(频道、波段)，每个通道互不重叠，独立进行数据传递。每个载波信号形成一个不重叠、相互隔离(不连续)的频带。接收端通过<strong>带通滤波器</strong>来分离信号。</p>
</li>
<li>
<p>时分复用TDM：为多个信道分配互不重叠的时间片段，每个用户分得一个时间片</p>
<ul>
<li>STDM: 同步时分多路复用，将时间片预先分配，大小固定</li>
<li>ATDM: 异步时分多路复用，用ATDM帧传输数据，可动态分配时间片</li>
</ul>
<img src="https://tva1.sinaimg.cn/large/006pkgSjly1gx1u4r55zaj30if0cbgqp.jpg" alt="image.png" style="zoom:70%;" />
</li>
<li>
<p>波分复用WDM：即光的频分复用。多束不同频率的光通过棱柱或光栅，合成到一根共享的光纤上。波长间隔几十nm</p>
</li>
<li>
<p>码分复用CDM：所有用户在同一时间，同一频段，根据不同编码获得信道。</p>
<ul>
<li>
<p>每比特时间被分成m个短的时间段称码片(chip)。通常m=64或m=128(系统中至多容纳m个站)。码分复用需要发送的数据量为原先的 m 倍</p>
</li>
<li>
<p>每个站被指定唯一的m位的码片序列(chip sequence)。所有码片序列都是两两正交（内积运算时把0转化为-1进行计算）</p>
</li>
<li>
<p>发送1时，为码片序列;发送0时，为码片序列的反码。若分配给某站的码片序列为11010111，则该站要发送1时，发11010111，而要发0时，发00101000。</p>
</li>
<li>
<figure data-type="image" tabindex="1"><img src="https://tva1.sinaimg.cn/large/006pkgSjly1gx1utmgmz7j30n50aeahd.jpg" alt="image.png" loading="lazy"></figure>
</li>
<li>
<figure data-type="image" tabindex="2"><img src="https://tva1.sinaimg.cn/large/006pkgSjly1gx1uxfqsmzj30l107843j.jpg" alt="image.png" loading="lazy"></figure>
<p>因为任意两个码片正交</p>
</li>
</ul>
</li>
</ol>
<h3 id="412-多址方式multiple-access">4.1.2 多址方式(Multiple Access)</h3>
<p>通过<strong>不同的移动信道</strong>分隔来进行通话，防止相互干扰</p>
<ol>
<li>频分多址(FDMA)----以频率来区分信道</li>
<li>时分多址(TDMA)----以时隙来区分信道</li>
<li>码分多址(CDMA)----以码片序列来区分信道</li>
</ol>
<h2 id="42-随机接入aloha">4.2 随机接入：ALOHA</h2>
<h3 id="421-纯aloha">4.2.1 纯ALOHA</h3>
<p>原理: 每个站自由的发送数据帧，若冲突，则等待一段随机时间后，重发。<img src="https://tva1.sinaimg.cn/large/006pkgSjly1gx1vgp8xsbj30h708j76m.jpg" alt="image.png" style="zoom:80%;" /></p>
<ul>
<li>吞吐量S(0&lt;=S&lt;=1)：在吞吐量S(0≤S≤1):在帧的发送时间()内成功发送的平均帧数</li>
<li>网络负载G: 在帧发送时间(T0)内总共发送的平均帧数。显然G&gt;=S,若不发生冲突，G=S，G可大于1。</li>
<li><img src="https://tva1.sinaimg.cn/large/006pkgSjly1gx1wenfp8yj30ky07dad4.jpg" alt="image.png" loading="lazy"></li>
</ul>
<h3 id="422-时隙aloha">4.2.2 时隙ALOHA</h3>
<p>将时间分为一段段时隙，每个站只能在时隙开始时自由的发送数据帧，若冲突，则等待一段随机时间后，重发。</p>
<figure data-type="image" tabindex="4"><img src="https://tva1.sinaimg.cn/large/006pkgSjly1gx1wgvjw54j30h0064myi.jpg" alt="image.png" loading="lazy"></figure>
<img src="C:\Users\framezhi\AppData\Roaming\Typora\typora-user-images\image-20211204165248967.png" alt="image-20211204165248967" style="zoom:80%;" />
<h2 id="43-随机接入csma和csmacd">4.3 随机接入：CSMA和CSMA/CD</h2>
<p>多站共用同一通信介质</p>
<p><strong>载波监听多路访问CSMA</strong> (Carrier Sense Multiple Access)：采用附加硬件装置，使每个站在发送数据前监听信道上是否有其它站在发送数据:</p>
<ul>
<li>如果信道忙，则暂不发送。</li>
<li>如果信道空闲，发送; 同时启动2t定时器;</li>
</ul>
<h3 id="431-csma">4.3.1 CSMA</h3>
<ol>
<li>
<p>0-坚持(no-persistent) CSMA</p>
<ul>
<li>
<p>若信道空闲，发送;</p>
</li>
<li>
<p>一旦监听到信道忙，就不再监听，而是推迟一个随机时间后重新再监听。</p>
</li>
<li>
<p><strong>不能充分利用信道</strong></p>
</li>
</ul>
</li>
<li>
<p>1-坚持(1-persistent) CSMA</p>
<ul>
<li>若信道空闲，发送;</li>
<li>若信道忙，仍坚持听下去，一直听到信道空闲为止;然后立即发送数据。</li>
<li><strong>容易冲突</strong></li>
</ul>
</li>
<li>
<p>P-坚持(P-persistent) CSMA</p>
<ul>
<li>若信道空闲，发送;</li>
<li>监听到信道忙，仍坚持听下去，一直听到信道空闲为止;然后以概率P发送数据，而以概率(1一P)延迟一段时间，重新监听信道。</li>
<li>上述2者折衷，但P值不好选。</li>
</ul>
</li>
</ol>
<p>ALOHA与CSMA随机访问过程流程图：</p>
<img src="https://tva1.sinaimg.cn/large/006pkgSjly1gx1ws138g8j307k0cf3zp.jpg" alt="image.png" style="zoom:80%;" />
<p>帧发送流程图</p>
<img src="https://tva1.sinaimg.cn/large/006pkgSjly1gx1wxnq0s9j30830c80tx.jpg" alt="image.png" style="zoom:80%;" />
<h3 id="432-csmacd">4.3.2 CSMA/CD</h3>
<p>带冲突检测的载波监听多路访问协议Carrier SenseMultiple Access with Collision Detection</p>
<ul>
<li>监听到信道空闲就发送数据，并继续监听下去</li>
<li>如果听到发生冲突，立即放弃此数据帧的传送。同时发送Jam信号(通常采用32 bit长的1和0交替的比特块)，使网上所有用户知道发生了冲突。</li>
<li>可分成时隙/非时隙，分成非坚持/p坚持/1坚持等。</li>
<li>监听方法:电信号叠加幅度(考虑信号衰减);曼彻斯特编码过零点偏移。</li>
</ul>
<p>CSMA/CD流程图：</p>
<img src="https://tva1.sinaimg.cn/large/006pkgSjly1gx1x20k4k3j30a40art9u.jpg" alt="image.png" style="zoom:87%;" />
<p>先听后发，边发边听，冲突停止，随机重发</p>
<p>争用期(碰撞窗口2<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>τ</mi></mrow><annotation encoding="application/x-tex">\tau</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.1132em;">τ</span></span></span></span>)</p>
<ul>
<li>假设信号在两个相距最远的站点间传输时间为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>τ</mi></mrow><annotation encoding="application/x-tex">\tau</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.1132em;">τ</span></span></span></span> 。</li>
<li>最坏情况，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>τ</mi></mrow><annotation encoding="application/x-tex">\tau</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.1132em;">τ</span></span></span></span>时间后传到对方，发生冲突，又需t时间传回来。</li>
<li>即站点在2<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>τ</mi></mrow><annotation encoding="application/x-tex">\tau</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.1132em;">τ</span></span></span></span>时间后都没有听到冲突，才可确信抓住了信道。</li>
</ul>
<p>重要特性</p>
<ul>
<li>使用CSMA/CD协议的以太网不能进行全双工通信而只能进行双向交替通信(半双工通信)。</li>
<li>每个站在发送数据之后的一小段时间内，存在着遭遇碰撞的可能性。</li>
<li>这种发送的不确定性使整个以太网的平均通信量远小于以太网的最高数据率。</li>
</ul>
<p>总结：</p>
<ul>
<li>ALOHA及CSMA都存在信道冲突问题，原因是由于各站点发送是随机的。网络负载越大，冲突概率越大，冲突的存在导致报文重传，因此当网络负载太大时吞吐率会下降，进一步增大负载，网络会失去稳定性，造成死锁。</li>
<li>为解决冲突，可采用受控介质访问方式，即各站点访问通道按预先设计好的规则有控制地进行。为了不发生冲突而又能获得较高通道利用率，可对通道采用“按需分配”原则，轮训/令牌属于这一类。</li>
<li>TDM及FDM方式，即预先给每个站点分配所用的通道时间片或频带，就不会有信道冲突。但这两种方式对<strong>突发性很高</strong>的计算机网络数据传输通道利用率不高。</li>
</ul>
<h2 id="44-受控接入">4.4 受控接入</h2>
<p>集中式控制</p>
<ul>
<li>轮询(Polling)(监控网络中用的多些)
<ul>
<li>轮叫轮询</li>
<li>传递轮询</li>
</ul>
</li>
</ul>
<p>分散式控制</p>
<ul>
<li>令牌环网(Token Ring)</li>
</ul>
<ol>
<li>轮叫轮询
<ul>
<li>主机按顺序从站1开始逐个询问，直到站N;一轮完成再从站1重新开始新一轮。</li>
<li>被询问站若有数据发送即可发给主机;若无发一控制帧给主机，表示无数据可发;然后主机询问下一站。</li>
</ul>
</li>
<li>传递轮询
<ul>
<li>主机向站N发出轮询帧。</li>
<li>站N在发送完数据或告诉主机没有数据发送时，将相邻站N-1的地址附上。</li>
<li>N-1检测到自己的地址，知道站N把发送权转移到本站;以此类推，直到站1。站1完成后将主机地址附上，把发送权交回主机。</li>
<li>下一轮循环开始。</li>
</ul>
</li>
<li>令牌环：按一定顺序在各站点间传递令牌(Token:一组规定的数据帧)的介质访问控制方法。得到令牌的站点获得在信道上发送的权利，如果该站点有报文待发，就将令牌置为“忙”，表示通道已被占用，然后发报，发完之后，就将令牌置为“空”，随即将令牌传递给下一站点;如果该站点无报文发送，则随即将刚收到的令牌转发给下一站点。</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[8. 可编程接口芯片]]></title>
        <id>https://notes.yuyzzz.top/post/8-ke-bian-cheng-jie-kou-xin-pian/</id>
        <link href="https://notes.yuyzzz.top/post/8-ke-bian-cheng-jie-kou-xin-pian/">
        </link>
        <updated>2021-12-15T08:53:41.000Z</updated>
        <summary type="html"><![CDATA[<p>介绍了三种可编程接口芯片：并行接口8255A、计数/定时器8253、串行通信接口8251A的基本功能、结构、引脚功能、初始化编程等</p>
]]></summary>
        <content type="html"><![CDATA[<p>介绍了三种可编程接口芯片：并行接口8255A、计数/定时器8253、串行通信接口8251A的基本功能、结构、引脚功能、初始化编程等</p>
<!-- more -->
<h2 id="81-可编程接口芯片概述">8.1 可编程接口芯片概述</h2>
<p>可编程接口芯片：软件编程来设置芯片工作方式，提高芯片功能</p>
<h2 id="82-可编程并行接口芯片8255a">8.2 可编程并行接口芯片8255A</h2>
<h3 id="821-通用并行接口">8.2.1 通用并行接口</h3>
<ol>
<li>
<p>主要作用：</p>
<ul>
<li>在输入/输出为<strong>并行数据</strong>方式的外设与CPU之间可靠地中转数据</li>
<li>扩展微机挂接并口外设数量的能力</li>
</ul>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gwn3wzfbk0j30wn0jigth.jpg" alt="image.png" style="zoom: 50%;" />
</li>
<li>
<p>并行接口一般结构</p>
<ul>
<li>多个可编程并行数据通道（并行端口）。每个端口内含一个<strong>并行数据输入缓冲器</strong>（暂存外设送给CPU 的数据）和一个并行数据输出缓冲器（暂存CPU送给外设的数据）</li>
<li>控制寄存器（存放CPU命令字）</li>
<li>状态寄存器（记录外设或并口本身的工作状态）</li>
<li>内部地址译码电路</li>
</ul>
<img src="https://tva1.sinaimg.cn/large/006pkgSjly1gwn4jsdb6uj30vy0iwtke.jpg" alt="image.png" style="zoom:50%;" />
</li>
<li>
<p>并行接口芯片的主要引脚</p>
<img src="https://tva1.sinaimg.cn/large/006pkgSjly1gx5dcrdvv7j310q0gqn1q.jpg" alt="image.png" style="zoom:57%;" />
<p>与外设相连一侧的引脚：</p>
<ul>
<li>与外设传送数据的数据线（通常为多组8位的双向I/O引脚线）</li>
<li>用于<strong>协调</strong>并行端口与外设<strong>数据交换速度</strong>的联络线</li>
</ul>
<p>CPU一侧相连的引脚</p>
<ul>
<li>与CPU（数据总线）传送数据的数据线（通常为8位： D7~D0）</li>
<li>并口工作状态引脚READY或中断请求引脚INTR</li>
<li>CPU对并口的读/写信号引脚</li>
<li>并口芯片的片选信号引脚（由CPU高位地址线经译码后给出）</li>
<li>并口内部寄存器选择引脚线（通常由CPU低位地址线给出）</li>
<li>使并口芯片复位的引脚</li>
</ul>
</li>
</ol>
<h3 id="822-8255a的内部结构及引脚功能">8.2.2 8255A的内部结构及引脚功能</h3>
<ol>
<li>
<p>8255A的内部结构：共四部分</p>
<img src="https://tva1.sinaimg.cn/large/006pkgSjly1gx5drvwle5j30nq0hytb9.jpg" alt="image.png" style="zoom:67%;" />
<ul>
<li>特点：
<ul>
<li>含3个独立的8位并行输入/输出端口，各端口均具有数据的输出和输入能力</li>
<li>可通过编程，设置各端口工作在某一确定状态下</li>
</ul>
</li>
<li>结构：
<ul>
<li>A组：端口A，端口C的高四位</li>
<li>B组：端口B，端口C的低四位</li>
</ul>
</li>
</ul>
</li>
<li>
<p>8255A的引脚功能：</p>
<img src="https://tva1.sinaimg.cn/large/006pkgSjly1gx5dvxk12ij30ei0jw76v.jpg" alt="image.png" style="zoom: 67%;" />
</li>
<li>
<p>8255内部端口寻址：</p>
<img src="https://tva1.sinaimg.cn/large/006pkgSjly1gx5dy04hi4j30m80c2mzx.jpg" alt="image.png" style="zoom:60%;" />
</li>
<li>
<img src="https://i0.hdslb.com/bfs/album/b65f75adc0785ae8e965996ac5022344393f8bcf.png" alt="image-20211207182847796" style="zoom:50%;" />
</li>
</ol>
<h3 id="823-8255a的工作方式">8.2.3 8255A的工作方式</h3>
<ol>
<li>
<p>方式0：基本输入/输出方式</p>
<ul>
<li>相当于三个独立的8位简单接口</li>
<li>各端口既可设置为输入口，也可设置为输出口，但<strong>不能同时实现输入及输出</strong></li>
<li>C端口可以是一个8位的简单接口，也可以分为两个独立的4位端口</li>
<li>常用于连接简单外设（适于无条件或查询方式）</li>
<li>**应用：**常使A端口和B端口作为8位数据的输入或输出口，使C口的某些位作状态输入</li>
</ul>
</li>
<li>
<p>方式1：单向选通输入/输出方式</p>
<ul>
<li>
<p>三个数据端口分为A、B两组，分别称为A组控制和B组控制。</p>
</li>
<li>
<p>端口A、端口B作数据输入或输出口，端口C作为联络控制信号，被分成两部分，一部分作为端口A和端口B的联络信号，另一部分仍可作为基本的输入输出口。</p>
</li>
<li>
<p>A口、B口在作为输入和输出时的选通控制信号不同。</p>
</li>
<li>
<p>输入：</p>
<p><img src="https://i0.hdslb.com/bfs/album/5f6cf1a526ba1a08cfbc317a596c5a582655c4ea.png" alt="image-20211207184609205" style="zoom: 67%;" /><img src="https://i0.hdslb.com/bfs/album/377c1dcb09ddd66dc4821f29fde4961d3867aa03.png" alt="image-20211207184627073" style="zoom:67%;" /></p>
<ul>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mrow><mi>S</mi><mi>T</mi><mi>B</mi></mrow><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{STB}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8833300000000001em;vertical-align:0em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span>：低电平有效，有效时表示将数据输入8255A的输入缓冲器</li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>I</mi><mi>B</mi><mi>F</mi></mrow><annotation encoding="application/x-tex">IBF</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span></span></span></span>：高电平有效，表示输入缓冲器满，可供CPU读取数据</li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>I</mi><mi>N</mi><mi>T</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">INTR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span></span></span></span>：中断请求信号，高电平有效</li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>I</mi><mi>N</mi><mi>T</mi><mi>E</mi></mrow><annotation encoding="application/x-tex">INTE</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span></span></span></span>：中断允许信号</li>
</ul>
</li>
<li>
<p>输出：</p>
<p><img src="https://i0.hdslb.com/bfs/album/eef8324f47b0efe1ab16d224b43d5d6ee69ec984.png" alt="image-20211207185605179" style="zoom: 50%;" />  <img src="https://i0.hdslb.com/bfs/album/f97d26006d806df9976fa199324f2a494b82f67f.png" alt="image-20211207185624064" style="zoom:50%;" /></p>
<ul>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mrow><mi>O</mi><mi>B</mi><mi>F</mi></mrow><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{OBF}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8833300000000001em;vertical-align:0em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span>：输出缓冲器满，低电平有效</li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mrow><mi>A</mi><mi>C</mi><mi>K</mi></mrow><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{ACK}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8833300000000001em;vertical-align:0em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span>: 响应信号，低电平有效，有效时表示外设已取走8255A的数据</li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>I</mi><mi>N</mi><mi>T</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">INTR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span></span></span></span>：中断请求信号，高电平有效</li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>I</mi><mi>N</mi><mi>T</mi><mi>E</mi></mrow><annotation encoding="application/x-tex">INTE</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span></span></span></span>：中断允许信号</li>
</ul>
</li>
<li>
<p>**应用：**主要用于中断控制方式下的输入输出；C口的8位除用作选通信号外，其余位可工作于方式0下，作为输入或输出口</p>
</li>
</ul>
</li>
<li>
<p>方式2：双向传送</p>
<ul>
<li>双向输入输出方式——可以既作为输入口，又作为输出口</li>
<li>只有A端口可工作在方式2下</li>
<li>应用：用于可采用查询方式或中断控制方式，当A口工作于方式2时，B口可工作于方式1（此时C口的所有位都用作选通控制信号的输入输出），也可工作于方式0（此时C口的剩余位也可工作于方式0）</li>
</ul>
</li>
</ol>
<p>其中：</p>
<ul>
<li>A口可以工作于方式0，1，2</li>
<li>B口可以工作于方式0，1</li>
<li>C口只能工作于方式0</li>
</ul>
<h3 id="824-8255a的编程">8.2.4 8255A的编程</h3>
<ul>
<li>方式控制字：设置A口和B口的工作方式，指定它们作为输入口还是输出口。</li>
<li>端口C的状态控制字：设置C口指定位置“1”或“0”。</li>
<li>通过八位命令字的最高位来区分写入的是哪个控制字：
<ul>
<li>D7=1：对控制寄存器设置；</li>
<li>D7=0：用于对C端口状态进行设定。</li>
</ul>
</li>
</ul>
<ol>
<li>
<p>8255A的控制字：</p>
<ul>
<li>
<p>方式选择控制字：</p>
<img src="https://i0.hdslb.com/bfs/album/5d2cf85360e0212c5060ea7970c255505740068c.png" alt="image-20211208001805846" style="zoom:67%;" />
</li>
<li>
<p>端口C置位/复位控制字</p>
<img src="https://i0.hdslb.com/bfs/album/57eb5161f1bbaa1ac233802838301bb4509dc97d.png" alt="image-20211208002109137" style="zoom:67%;" />
</li>
</ul>
</li>
<li>
<p>8255A的初始化编程：</p>
<p>例：在8086系统中，设8255A的A口输出，B口输入，PC1置位，PC2复位。已知：8255端口地址为60H～63H，试编程对8255A进行初始化。</p>
<p>8255工作方式控制字为：<img src="https://i0.hdslb.com/bfs/album/7b207d7d4a6a9552b63d62260a65cb05f33fd270.png" alt="image-20211208141213380" style="zoom:67%;" /></p>
<pre><code>MOV AL,82H      ;方式控制字10000010B=82H

OUT 63H,AL	    ;将控制字送入8255A控制端口，即控制寄存器中

MOV AL,03H	    ;C口置位控制字00000011B=03H，设置PC1=1

OUT 63H,AL	    ;将控制字送入8255A控制端口，即控制寄存器中

MOV AL,04H	    ;C口置位控制字00000100B=04H，设置PC2=0

OUT 63H,AL	    ;将控制字送入8255A控制端口，即控制寄存器中
</code></pre>
</li>
</ol>
<h3 id="825-8255a的应用">8.2.5 8255A的应用</h3>
<p>例1：设8255A的A口和B口工作在方式0，A口作为输入端口，接有2个开关；B口为输出端口，接有8个发光二极管。系统硬件电路如图所示，不断扫描开关Ki，当开关K0闭合时，点亮LED0、LED2、LED4、LED6，其它LED暗；当开关K1闭合时，点亮LED1、LED3、LED5、LED7，其它LED暗；当开关K0和K1同时闭合时退出。设8255A端口A、端口B、端口C及控制端口的地址分别为200H～203H。试编写程序</p>
<img src="https://i0.hdslb.com/bfs/album/641f6b4af28a953a7c3e4c1c05894894d8ab4158.png" style="zoom:50%;" />
<p>解：8255A的控制字为：</p>
<img src="https://i0.hdslb.com/bfs/album/feadbff24b1e3df6f7afb5663f82da1abff31090.png" alt="image-20211208141923429" style="zoom:67%;" />
<pre><code>CODE  SEGMENT
          ASSUME CS:CODE
START:MOV	AL,90H	    ; 8255初始化
	    MOV	DX,203H
AGAIN:MOV	DX,200H     ;将A口地址送入DX
       IN AL,DX       ;从DX读数据到AX
       TEST AL,03H    ; 检测K0 K1
       JZ EXIT
       TEST AL,01H    ;检测K0      
       JZ DISP_0
       TEST AL,02H    ;检测K1      
       JZ DISP_1
       JMP AGAIN
DIAP_0:	MOV AL,55H     ;偶位上LED亮，奇位上LED暗     
       MOV DX,201H		;B口端口地址送入DX
       OUT DX,AL
       JMP AGAIN
DIAP_1:	MOV AL,0AAH    ;奇位上LED亮，偶位上LED暗       
       MOV DX,201H
       OUT DX,AL
       JMP AGAIN
EXIT: MOV AH,4CH
       INT 21H
CODE	ENDS
       END START
</code></pre>
<h2 id="83-可编程定时器计数器8253">8.3 可编程定时器/计数器8253</h2>
<h3 id="831-定时器计数器基本概念">8.3.1 定时器/计数器基本概念</h3>
<ul>
<li>定时器：能通过对等周期输入时钟脉冲分频值的编程设定，来产生不同频率值输出脉冲的功能部件（可编程分频器）。</li>
<li>计数器：可对输入脉冲个数进行计数的功能部件。</li>
</ul>
<ol>
<li>
<p>内部结构：</p>
<img src="https://i0.hdslb.com/bfs/album/bbbbdb0d4217885c430c41f55d7972c15a66f2ad.png" alt="image-20211208153543515" style="zoom:50%;" />
<ul>
<li>控制寄存器：通过程序写入工作方式。</li>
<li>计数初值寄存器：接收和存放程序设置的计数初始值。</li>
<li>减一计数器：其初值是在程序<strong>将计数初值写入计数初值寄存器时自动复制到其内</strong>的。减一计数器的值会在<strong>每个有效的输入脉冲</strong>CLK作用下自动减一，当其值减到零后会引起输出电平变化。</li>
<li>当前计数值锁存器：当前计数输出寄存器值跟随减1计数寄存器内容变化。收到锁存命令后，当前计数输出寄存器将锁定当前计数值，直到其值被CPU读走之后，才又随减1计数寄存器内容的变化而变化。</li>
</ul>
</li>
<li>
<p>外部有关信号</p>
<ul>
<li>CLK：时钟输入。作为定时器应用和计数器应用时，输入周期或非周期性脉冲信号。</li>
<li>GATE：门控信号,其作用如下：<br>
1）控制CLK端的输入，<br>
2）启动计数器工作。</li>
<li>OUT：输出信号，表征计数器的工作状态。当减1计数器减为0时产生变化。</li>
</ul>
</li>
<li>
<p>定时器和计数器的作用和区别：</p>
<ul>
<li>定时器和计数器的相同之处：都需通过对一个减一计数器初始值的设定来实现定时（分频）或计数。</li>
<li>定时器和计数器的不同之处：
<ul>
<li>定时器方式下:周期重复</li>
<li>计数器方式下:一次计数完成,再次计数需重新触发</li>
<li>定时器方式下:输入时钟必须是等周期</li>
<li>计数器方式下:输入时钟不一定等周期</li>
</ul>
</li>
</ul>
</li>
</ol>
<h3 id="832-8253的内部结构与引脚功能">8.3.2 8253的内部结构与引脚功能</h3>
<ol>
<li>
<p>8253的内部结构：每片8253有3个独立的16位计数通道，每个计数通道最高计数速率可达2.6MHZ。每个计数器可编程设定6种工作方式，使用时可以根据需要选择其中的一种工作方式。每个计数通道可按二进制或十进制来计数</p>
<img src="https://i0.hdslb.com/bfs/album/11f5baea399d6ed006d20249fc601cb0d6e7c341.png" alt="image-20211209232315199" style="zoom:57%;" />
<img src="https://i0.hdslb.com/bfs/album/fdacfad611d734451439497e80248249a4781af2.png" alt="image-20211209232522640" style="zoom:50%;" />
</li>
<li>
<p>8253的引脚功能</p>
<img src="https://i0.hdslb.com/bfs/album/884f145852eac1d7d38527c97e785db03fa1f3aa.png" alt="image-20211209232618680" style="zoom:50%;" />
<img src="https://i0.hdslb.com/bfs/album/af0760924cce16691f0e1e06e0acf2186eed60ba.png" alt="image-20211209232714293" style="zoom:50%;" />
</li>
</ol>
<h3 id="833-8253的工作方式">8.3.3 8253的工作方式</h3>
<p>共6种：</p>
<ol>
<li>
<p>方式0：计数功能</p>
<ul>
<li><strong>软件触发计数</strong>，且计数器只计一遍。控制字写入后，输出端OUT变为低电平。计数初值写入后，下一个CLK脉冲的下降沿，计数初值寄存器内容装入减1计数寄存器，开始计数，输出端OUT维持低电平。</li>
<li>当计数值减到0时，OUT输出端变为高电平，此信号可作为中断请求信号，并可保持到重新写入新的控制字或新的计数值为止。</li>
<li>计数过程中，若GATE信号变为低电平，暂停计数，减1计数寄存器值保持不变；若GATE信号重新变高，则计数器<strong>从暂停值开始继续计数</strong>；若重新写入新的计数初值，则在下一个CLK脉冲的下降沿，减1计数寄存器以新的计数初值重新开始计数。</li>
</ul>
<img src="https://i0.hdslb.com/bfs/album/d0e3cfe8074652c3affe2e1463726485a198a1e4.png" alt="image-20211209234554706" style="zoom:50%;" />
</li>
<li>
<p>方式1：低电平输出</p>
<ul>
<li><strong>硬件触发单稳态方式</strong>，<strong>输出单个负脉冲信号，脉冲的宽度可通过编程来设定</strong>。</li>
<li>写入控制字后，输出端OUT变为高电平，并保持。写入计数初值后，在GATE信号的上升沿之后的下一个CLK脉冲的下降沿，计数初值装入减1计数寄存器，同时OUT端变为低电平，开始计数，当计数值减到0时，输出端OUT变为高电平。</li>
<li>计数过程中，如果CPU又送来新的计数初值，不影响当前计数过程。等到计数器计数到0，OUT端输出高电平且<strong>出现新的一次GATE信号的触发时</strong>，才会将新的计数初值装入，并计数。</li>
<li>如果在输出端OUT输出低电平期间，又来一个GATE信号上升沿触发，则在下一个CLK脉冲的下降沿，将计数初值寄存器内容重新装入减1计数寄存器，并计数。</li>
</ul>
<img src="https://i0.hdslb.com/bfs/album/02aebd5b43d47c85ae0644a4ff1ba4ef86d5c38c.png" alt="image-20211211164354933" style="zoom:50%;" />
</li>
<li>
<p>方式2：周期性负脉冲输出</p>
<ul>
<li>方式2可产生连续的负脉冲信号，可用作频率发生器。负脉冲的宽度为一个时钟周期。</li>
<li>写入控制字后，输出端OUT变为高电平。若GATE为高电平，那么写入计数初值后，在下一个CLK的下降沿计数初值寄存器内容装入减1计数寄存器，开始减1计数。当减1计数寄存器的值为1时，OUT端输出低电平，经过一个CLK时钟周期，OUT端输出高电平，并自动开始一个新的计数过程。</li>
<li>在计数过程中，如果减1计数寄存器未减到1时GATE信号由高变低，则停止计数。<strong>但当GATE由低变高时</strong>，则<strong>重新将计数初值寄存器内容装入减1计数寄存器</strong>，并重新开始计数。（<strong>硬件可重触发</strong>）</li>
<li>如果GATE信号保持高电平时，在计数过程中重新写入计数初值候，要等正在计数的一轮结束并输出一个CLK周期的负脉冲后，才以新的初值进行计数。</li>
</ul>
<img src="https://i0.hdslb.com/bfs/album/07e954151e32b4e58302f420867464052bb65a83.png" alt="image-20211212205954611" style="zoom:50%;" />
</li>
<li>
<p>方式3：周期性方波输出</p>
<ul>
<li>写入控制字后，输出端OUT在计数过程开始前为高电平。</li>
<li>写入计数初值后，在下一个CLK的下降沿将计数初值寄存器的值N装入减1计数器，开始计数：
<ul>
<li>N为偶数，输出端保持N/2的高电平,N/2低电平,</li>
<li>N为奇数，输出端保持 (N+1)/2高电平, (N-1)/2低电平，即不对称方波</li>
</ul>
</li>
<li>减一计数器减至0时如果GATE信号无变化则自动按计数初值进行新一轮的计数过程，并循环往复。</li>
<li>计数过程中向计数初值寄存器重新写入初值，只有当OUT的高电平期或低电平期结束时才开始按新计数初值开始新的计数过程。但是如果在<strong>写入计数初值后，又受到GATE信号上升沿的触发</strong>，那么，就会结束当前输出周期，而在下一个时钟脉冲的下降沿，减1计数寄存器重新得到计数初值，开始新的减1计数过程。</li>
</ul>
<img src="https://i0.hdslb.com/bfs/album/ebe864f0a81ff1d80f0db176826786b009ccd0fa.png" alt="image-20211212210611213" style="zoom:50%;" />
</li>
<li>
<p>方式4：软件触发的单次负脉冲输出</p>
<ul>
<li>方式4是<strong>软件触发</strong>的选通方式。采用方式4可产生单个负脉冲信号，负脉冲宽度为一个时钟周期。</li>
<li>写入控制字后，输出端OUT变为高电平，若GATE为高电平，则在写入计数初值后下一个CLK的下降沿计数初值寄存器内容装入减1计数寄存器，开始减1计数。当减1计数寄存器的值为0时，输出端OUT变为低电平，经过一个CLK时钟周期，输出端OUT变为高电平。</li>
<li>如果在计数时，又写入新的计数值，则在下一个CLK的下降沿此计数初值被写入减1计数寄存器，并以新的计数值作减1计数。</li>
</ul>
<img src="https://i0.hdslb.com/bfs/album/e7e0c398ef8639b36d6596e53977f54c5d7839a3.png" alt="image-20211212224801804" style="zoom:60%;" />
</li>
<li>
<p>方式5：硬件触发的单次负脉冲输出</p>
<ul>
<li>方式5的计数过程<strong>由GATE的上升沿触发</strong>。当控制字写入后，输出端OUT输出高电平，并保持。写入计数初值后，只有在GATE信号的上升沿之后的下一个CLK脉冲的下降沿，计数初值装入减1计数寄存器，开始计数。当计数到0时，输出端OUT变为低电平，并持续一个CLK周期，然后<strong>自动变为高电平</strong>。</li>
<li>计数过程中，若GATE端又来一个上升沿触发，则在下一个CLK脉冲的下降沿，减1计数寄存器将重新获得计数初值，并计数。</li>
<li>计数过程中，若写入新的计数值，但GATE端没有触发脉冲，则当前输出周期不受影响，当前周期结束后，在再次触发的情况下，才将按新的计数初值开始计数；若写入新的计数值，并在当前周期结束前又受到触发，则在下一个CLK脉冲的下降沿，减1计数寄存器将获得新的计数初值，并计数。</li>
</ul>
<img src="https://i0.hdslb.com/bfs/album/7efef9bdb87cdff5db2560447189d4a814d71178.png" alt="image-20211212225124445" style="zoom:60%;" />
</li>
</ol>
<h3 id="834-8253的初始化">8.3.4 8253的初始化</h3>
<ol>
<li>
<p>8253方式控制字</p>
<img src="https://i0.hdslb.com/bfs/album/b6fc6bd957ff9ffa3fd98b865167710dba428eb7.png" alt="image-20211212225322166" style="zoom:60%;" />
</li>
<li>
<p>8253初始化编程</p>
<ul>
<li>8253初始化编程原则
<ul>
<li>在对某个计数器设置初值之前，必须先写入控制字。</li>
<li>在设置计数初始值时，要符合控制字的规定，即只写低位字节，还是只写高位字节，还是高、低位字节都写（分两次写，先低字节后高字节）</li>
</ul>
</li>
<li>8253编程命令
<ul>
<li>一类是写入命令，包括设置控制字、设置计数器的初始值命令和锁存命令。</li>
<li>另一类是读出命令，用来读取计数器的当前值。</li>
</ul>
</li>
<li>8253初始化编程步骤
<ul>
<li>先写控制字到8253的控制端口。</li>
<li>再写计数器初值到相应的计数器端口。</li>
</ul>
</li>
</ul>
</li>
</ol>
<p>例：在8086系统中，设8253的计数器0工作在方式2，二进制计数，计数初值为2000，8253的计数器1工作在方式3，BCD码计数，计数初值为10，8253端口地址为40H～43H。试编写初始化程序。</p>
<pre><code>;计数器0初始化程序
MOV AL,34H	;方式控制字00110100B=34H
OUT 43H,AL	;将控制字送入8253A控制端口43H
MOV AX,2000	;初值送AX寄存器
OUT 40H,AL	;将初值的低8位输出计数通道0端口40H
MOV AL,AH		;初值的高8位送AL寄存器
OUT 40H,AL	;将将初值的高8位输出计数通道0端口40H

;计数器1初始化程序
MOV AL,57H	;方式控制字01010111B=57H
OUT 43H,AL	;将控制字送入8253A控制端口43H
MOV AL,10H	;初值10H送AL寄存器,因为BCD码计数,要送10H
OUT 41H,AL	;将初值的低8位输出计数通道1端口41H
</code></pre>
<h3 id="835-8253应用举例">8.3.5 8253应用举例</h3>
<p>例：设有一输入频率为2MHz信号，利用8253做一个秒信号发生器，其输出接一发光二极管，以0.5秒点亮，0.5秒熄灭的方式闪烁指示。设8253的通道地址为400H～403H。</p>
<p>输出信号周期为1s，则频率为1Hz；分频数N=<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mo>∗</mo><mn>1</mn><msup><mn>0</mn><mn>6</mn></msup><mi mathvariant="normal">/</mi><mn>1</mn></mrow><annotation encoding="application/x-tex">2*10^6/1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span></span></span></span></span><span class="mord">/</span><span class="mord">1</span></span></span></span> = 2000000; 因为8253中的计数器是16位，最大计数为65536，故需采用两个计数器级联的方式实现。可以找到两个数N1和N2，使N=N1*N2，此处让计数器0初值为2000，计数器1初值为1000</p>
<img src="https://i0.hdslb.com/bfs/album/9fc755f9d685dc794443f101b3321cc31f890f66.png" alt="image-20211213102901744" style="zoom:67%;" />
<pre><code>MOV AL,34H		;或36H;34H=00110100B,计数器0、16位、方式2、二进制计数
MOV DX,403H
OUT DX,AL		;写计数器0方式控制字
MOV DX,400H
MOV AX,2000
OUT DX,AL		;写计数器0计数初值低8位
MOV AH,AL			
OUT DX,AL		;写计数器0计数初值高8位
MOV AL,56H  ;56H=01010110B，计数器1、低8位、方式3、二进制计数
MOV DX,403H
OUT DX,AL		;写计数器1方式控制字
MOV DX,401H
MOV AL,1000
OUT DX,AL  		;写计数器1计数初值低8位
</code></pre>
<h2 id="84-串行通信与串行通信接口芯片8251a">8.4 串行通信与串行通信接口芯片8251A</h2>
<img src="https://i0.hdslb.com/bfs/album/b271309c2094e1a547d0f24a6d065f7796faadcf.png" alt="image-20211213104330552" style="zoom:67%;" />
<ul>
<li>并行通信一般是8位以上的数据一起传送，一般用在短距离的数据量大场合。</li>
<li>串行通信是指利用一条传输线将数据一位一位地按顺序分时传输。一般用于长距离的数据偏传送</li>
</ul>
<h3 id="841-串行通信基本概念">8.4.1 串行通信基本概念</h3>
<ol>
<li>
<p>串行数据传输方式</p>
<img src="https://i0.hdslb.com/bfs/album/736ab0f4293f0649a8ed1de9aee047021bdf6f8d.png" alt="image-20211213105130703" style="zoom:50%;" />
</li>
<li>
<p>串行通信数据格式</p>
<ul>
<li>
<p>异步串行通信格式：以字符为单位的传送方式，有效数据的位数由编程员指定。有效数据的<strong>最低位在前，最高位在后</strong>。线路空闲时为高电平，起始位为低电平(0)。而停止位是可编程指定的1、1.5或2个周期的“1”电平,以区别下一个数据帧的起始位，还可包含奇偶校验位</p>
<img src="https://i0.hdslb.com/bfs/album/fd94d6b0a1becd8d57adf502f7935f9b17204239.png" alt="image-20211213105454176" style="zoom:60%;" />
</li>
<li>
<p>同步串行通信格式：用于成块数据的传送。根据启动接收方开始接收有效数据的方式，有外同步检测和内同步检测两种方式：</p>
<ul>
<li>
<p>外同步检测方式：在外电路上增加一根同步信号线，发送方开始发送数据帧时<strong>先发同步信号</strong>，接收方在发方同步信号作用下开始接收数据帧。此种方式数据帧结构简单，但需要外加一根同步信号线。其数据帧格式如下：</p>
<img src="https://i0.hdslb.com/bfs/album/65f24eb31ec907b612a81136c0a7bf175004a08b.png" alt="image-20211213184122137" style="zoom:67%;" />
</li>
<li>
<p>内同步检测方式：通过<strong>在数据帧内部设置的同步字符</strong>来告知接收方开始接收有效数据的方式。不需要外加同步信号线</p>
<ul>
<li>
<p>单同步字符格式：同步字符=1字节，内容由双方决定</p>
<img src="https://i0.hdslb.com/bfs/album/2420a492d80da7402f4da51b234030d163d5ebf6.png" alt="image-20211213184355990" style="zoom:60%;" />
</li>
<li>
<p>双同步字符格式：同步字符=2字节，内容由收发双方决定</p>
<img src="https://i0.hdslb.com/bfs/album/d15b6e018fb0d684b921f956a49bbb550b0d11f3.png" alt="image-20211213184543541" style="zoom:67%;" />
</li>
<li>
<p>SDLC/HDLC格式:</p>
<img src="https://i0.hdslb.com/bfs/album/bb2eaeb80d6961ff88ae22d575fc0754dc41a49f.png" alt="image-20211213184957451" style="zoom:60%;" />
</li>
</ul>
<p>以上帧格式中的CRC检错字符都是1字节的循环冗余校验码，SDLC/HDLC格式中的地址码用于区分同一链路上的不同接收设备。</p>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>传输速率</p>
<ul>
<li>在并行通信中，传输速率用每秒传输的字节数表示</li>
<li>在串行通信中，传输速率用波特率来表示。波特率是指单位时间内传送的二进制数据的位数，是衡量串行数据传送速度的重要指标。波特率的单位是：波特，1波特=1位/秒（bps）。</li>
</ul>
</li>
<li>
<p>发送/接收时钟</p>
<ul>
<li>在发送数据时，发送器在发送时钟的有效沿作用下将移位寄存器的数据按位移位串行输出；</li>
<li>在接收数据时，接收器在接收时钟的有效沿作用下对接收数据按位采样，并按位串行移入移位寄存器。</li>
<li>发送/接收时钟是对数据信号进行同步的，其频率将直接影响设备发送/接收数据的速度。发送/接收时钟频率一般是发送/接收波特率的n倍，n称为波特率因子，一般取1、16、32或64。</li>
</ul>
<img src="https://i0.hdslb.com/bfs/album/a89097dd84c75fc96ce72bc30592489cd20b58c9.png" alt="image-20211213185847496" style="zoom:67%;" />
</li>
</ol>
<h3 id="842-远程串行传输数据考虑的问题">8.4.2 远程串行传输数据考虑的问题</h3>
<ol>
<li>
<p>电平损耗问题；通常将计算机内部的TTL电平在送上通信线之前变换成“0”、“1”值差别较大的电平或电流，通常有以下电流、电平标准</p>
<ul>
<li>
<p>RS-232C标准：其“0”电平为+3V ~ +15V的电平范围；而“1”电平则为-3V~ -15V的电平范围。</p>
<img src="https://i0.hdslb.com/bfs/album/50f48632e0becefa41ee2c210f75717c9e0ec0ef.png" alt="image-20211213190514886" style="zoom:60%;" />
</li>
<li>
<p>RS-422和RS-423标准： “0”= -4V ~ -6V； “1”= +4V~+6V</p>
</li>
<li>
<p>20 mA电流环标准：“0”= 通信回路内无电流（0 mA）；“1”= 通  信回路内有20mA电流。</p>
</li>
</ul>
</li>
<li>
<p>解决普通电话线传送数字信号频带过窄的问题：直接传输数字信号,衰减很大（特别是脉冲信号中的高频分量）。为此一种解决方法是将脉冲信号调制成正弦波来传送。</p>
<img src="https://i0.hdslb.com/bfs/album/acdb27edb12f2ac46a66481f713822713f5cd29e.png" alt="image-20211213191345819" style="zoom:47%;" />
</li>
</ol>
<h3 id="843-rs-232c引脚与信号定义">8.4.3 RS-232C引脚与信号定义</h3>
<p>RS-232C引脚信号的作用</p>
<ul>
<li>在微机中通过RS-232C串口可以实现<strong>两台微机之间的数字信号的直接通信</strong></li>
<li>通过增加调制/解调器达到串行数据的远距离传输</li>
</ul>
<img src="https://i0.hdslb.com/bfs/album/5eaca79fc751e6bdebde4dacab05076ce937adc8.png" alt="image-20211213235356226" style="zoom:50%;" />
<h3 id="844-可编程串行通信接口芯片8251a">8.4.4 可编程串行通信接口芯片8251A</h3>
<ol>
<li>
<p>8251A的内部结构：由5个功能模块组成，包括数据总线缓冲器、接收器、发送器、读/写控制逻辑和调制解调器控制电路。</p>
<img src="https://i0.hdslb.com/bfs/album/ec44364c2a956db3f2486f6918699650b8c4e224.png" alt="image-20211213235736970" style="zoom:70%;" />
</li>
<li>
<p>8251A的基本功能</p>
<ul>
<li>能以同步和异步方式工作</li>
<li>工作于同步方式时，每个字符可定义为5~8位，可以选择进行奇校验、偶校验或不校验。内部能自动检测同步字符实现内同步或通过外部电路获得外同步，波特率为0～64K。</li>
<li>工作于异步方式时，每个字符可定义为5~8位，用1位作为奇偶校验(可选择)。时钟速率可用软件定义为通信波特率的1、16或64倍。能自动为每个被输出的数据增加1个起始位，并能根据软件编程为每个输出数据增加1个、1.5个或2个停止位。异步方式下，波特率为0～19200bps。</li>
<li>8251A能进行出错检测，具有奇偶、溢出和帧错误等检测电路。</li>
<li>具有独立的接收器和发送器，因此，能够以单工、半双工或全双工的方式进行通信。并且提供一些基本控制信号，可以方便地与调制解调器连接。</li>
</ul>
</li>
<li>
<p>8251A的引脚功能</p>
<img src="https://i0.hdslb.com/bfs/album/a58843e2234f8f44f3f01bc1224277285bf03c0d.png" alt="image-20211215104609679" style="zoom:67%;" />
<ul>
<li>
<p>8251A的端口：两个端口地址，数据输入端口和数据输出端口合用一端口地址，状态端口与控制端口合用一端口地址。</p>
<img src="https://i0.hdslb.com/bfs/album/f42dbd0101ff6755374e8daa503edc5358104e3c.png" alt="image-20211215105022056" style="zoom:50%;" />
</li>
<li>
<p>8251A的读写功能：</p>
<img src="https://i0.hdslb.com/bfs/album/bb207cf3da141f373fdb511306cfa9694c49dfaa.png" alt="image-20211215105050807" style="zoom:50%;" />
</li>
</ul>
</li>
<li>
<p>8521A的命令字和状态字</p>
<ul>
<li>
<p>方式选择命令字：</p>
<img src="https://i0.hdslb.com/bfs/album/0478890366f71834466a7613438ef5f05bdf2582.png" alt="image-20211215105308856" style="zoom:60%;" />
</li>
<li>
<p>工作命令字</p>
<img src="https://i0.hdslb.com/bfs/album/a47a56dcb448e1ee32a24682c48a30ed1f51f24f.png" alt="image-20211215105854291" style="zoom:70%;" />
</li>
<li>
<p>状态字</p>
<img src="https://i0.hdslb.com/bfs/album/7578f73f833c66e7e6e96d89c25eaf48158d5012.png" alt="image-20211215110013261" style="zoom:67%;" />
</li>
</ul>
</li>
<li>
<p>8251A的初始化编程</p>
<ul>
<li>
<p>初始化编程步骤</p>
<ul>
<li>第一步：芯片复位后，第一个写入奇地址端口的是方式选择命令字。约定双方的通信方式，数据格式及传输速率等参数。</li>
<li>第二步：如果方式选择命令字规定了8251A工作在同步方式，那么，接下来必须向奇地址端口写入规定的1个或2个同步字符。</li>
<li>第三步：只要不是复位命令，不论同步方式还是异步方式，接下来还需向奇地址端口写入工作命令字。</li>
</ul>
</li>
<li>
<p>复位命令：8251A有两种复位方式：硬件复位和软件复位。软件复位是编程中常采用的方法。软件复位的步骤是：</p>
<ul>
<li>向控制/状态端口连续写入3个0；</li>
<li>写入控制字40H。</li>
</ul>
</li>
<li>
<p>初始化编程举例</p>
<ul>
<li>
<p>异步：</p>
<p>【例】8251A工作在异步方式，波特率系数为16，数据长度为7位，偶校验，2个停止位，则方式选择命令字为：11111010B＝0FAH。现要求使8251A复位出错标志、使请求发送信号有效、使数据终端准备好信号有效、发送允许TxEN有效、接收允许RxE有效，工作命令字应为：00110111B=37H。假设8251A的两个端口地址分别为80H和81H，初始化编程如下：</p>
<pre><code>MOV  AL,  0FAH
OUT  81H,  AL         ;设置方式选择命令字
MOV  AL,  37H
OUT  81H,  AL         ;设置命令字
</code></pre>
</li>
<li>
<p>同步：</p>
<p>【例】8251A工作在同步方式，使用两个同步字符(内同步)、奇校验、每个字符8位，则方式选择命令字应为：00011100=1CH。现要求使8251A复位错标志、允许发送和接收、使CPU已准备好且请求发送，启动搜索同步字符，则工作命令字应该是：10110111=0B7H。又设第一个同步字符为0AAH，第二个同步字符为55H。还使用上例的8251A芯片，这样要先用内部复位命令40H，使8251A复位后，再写入方式选择控制字。具体程序段如下：</p>
<pre><code>MOV  AL, 40H
OUT  81H,  AL		;复位8251A
MOV  AL,  1CH
OUT  81H,  AL		;设置方式选择字 
MOV  AL,  0AAH
OUT  81H,  AL		;写入第一个同步字符 
MOV  AL,  55H
OUT  81H,  AL		;写入第二个同步字符 
MOV  AL,  0B7H
OUT  81H,  AL		;设置命令字
</code></pre>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>8251A应用举例：</p>
<p>【例】试编写程序段，用异步串行通信方式输出STRING开始字符串‘Receiver ready $’，$为字符串的结束标记。设8251A数据端口地址为90H，方式命令状态端口地址为91H</p>
<pre><code>MOV  AL，0 
OUT  91H, AL 
OUT  91H, AL
OUT  91H, AL
MOV  AL，40H 	
OUT  91H, AL       ;写入复位命令
MOV  AL，7EH       ;一个停止位，偶校验，8个数据位
									 ;波特率因子16
OUT  91H, AL       ;写入方式选择命令字
MOV  BX, OFFSET STRING    ;BX指向缓冲区首址

WAIT：IN   AL, 81H               ;读状态字
      TEST  AL, 1                ;测试TxRDY位
      JZ   WAIT                  ;为0，未准备好 等待
      MOV  AL, [BX]             ;取一个字符 
      CMP  AL,	’$’            ;判断是否是结束标志
      JE  EXIT
      OUT  90H,AL                ;输出字符
      INC  BX		
      JMP  WAIT       
EXIT: ……                       ;结束 
</code></pre>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[6. 存储器]]></title>
        <id>https://notes.yuyzzz.top/post/6-cun-chu-qi/</id>
        <link href="https://notes.yuyzzz.top/post/6-cun-chu-qi/">
        </link>
        <updated>2021-12-06T08:56:07.000Z</updated>
        <summary type="html"><![CDATA[<p>简单介绍了半导体存储器；存储器的扩展、译码；CPU与存储器的连接</p>
]]></summary>
        <content type="html"><![CDATA[<p>简单介绍了半导体存储器；存储器的扩展、译码；CPU与存储器的连接</p>
<!-- more -->
<h2 id="61-半导体存储器的分类">6.1 半导体存储器的分类</h2>
<p>内存储器一般半导体存储器组成</p>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gwmv4aqbdbj30v90f7jy6.jpg" alt="image.png" style="zoom:67%;" />
<h2 id="62-半导体存储器的主要技术指标">6.2 半导体存储器的主要技术指标</h2>
<ul>
<li>
<p><strong>存储容量</strong>: 存储容量就是以字或字节为单位来表示存储器存储单元的总数。</p>
</li>
<li>
<p><strong>读写速度</strong>: 半导体存储器的速度一般用<strong>存取时间</strong>和<strong>存储周期</strong>两个指标来衡量。</p>
</li>
<li>
<p><strong>可靠性</strong>: 通常指存储器对温度、电磁场等环境变化的抵抗能力和工作寿命。</p>
</li>
<li>
<p>存取时间：从启动一次存储器操作到完成该操作所经历的时间</p>
</li>
<li>
<p>存取周期：连续启动两次独立的存储器操作(例如连续两次读操作)所需间隔的最小时间。</p>
</li>
</ul>
<h2 id="63-存储器与系统的连接">6.3 存储器与系统的连接</h2>
<p>CPU对存储器进行读/写操作时，首先由地址总线给出地址信号，然后要对存储器发出读操作或写操作的控制信号，最后在数据总线上进行信息交换</p>
<h3 id="631-存储器扩展">6.3.1 存储器扩展</h3>
<ul>
<li>位扩展</li>
<li>子扩展</li>
<li>字位扩展</li>
</ul>
<ol>
<li>
<p>位扩展：</p>
<ul>
<li>用多个存储器器件对字长进行扩充。一个地址同时控制多个存储器芯片</li>
<li>扩展条件：设目标容量为M字×N位，存储器芯片容量为m字×n位，M＝m ，N&gt;n，则需要的存储器芯片数＝N/n。</li>
</ul>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gwmvua0ycfj30qm0j1jwl.jpg" alt="image.png" style="zoom: 70%;" />
</li>
<li>
<p>子扩展：</p>
<ul>
<li>
<p>增加存储器中字的数量</p>
</li>
<li>
<p>设目标容量为M字×N位，存储器芯片容量为m字×n位，M&gt;m ，N＝n，则需要的存储器芯片数＝M/m。</p>
</li>
</ul>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gwmvxgf5pyj30tj0eudm7.jpg" alt="image.png" style="zoom:67%;" />
</li>
<li>
<p>字位扩展</p>
<ul>
<li>字向和位向同时扩充</li>
<li>目标容量为M字×N位，存储器芯片容量为m字×n位，M&gt;m ，N&gt;n，则需要的存储器芯片数＝（M/m）×（N/n）</li>
</ul>
</li>
</ol>
<h3 id="632-存储器地址译码">6.3.2 存储器地址译码</h3>
<p>存储单元地址由片内地址信号和片选信号线状态共同决定</p>
<p>常用片选信号产生方法：</p>
<ul>
<li>
<p><strong>全地址译码</strong>：</p>
<ul>
<li>片选信号由除片内寻址外的<strong>全部高位地址线</strong>产生</li>
<li>特点：寻址范围大，地址连续，不会发生因高位地址不确定而产生的地址重复现象</li>
</ul>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gwmwjr91h9j30jk0ck43f.jpg" alt="image.png" style="zoom:80%;" />
</li>
<li>
<p><strong>部分地址译码</strong>：</p>
<ul>
<li>用除片内寻址外的<strong>高位地址的一部分</strong>来译码产生片选信号</li>
<li>特点：某些高位地址线被省略而不参加地址译码，简化了地址译码电路，但地址空间有重叠。</li>
</ul>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gwmwjcqz8mj30j50biwii.jpg" alt="image.png" style="zoom:80%;" />
</li>
<li>
<p><strong>线选择译码</strong>：</p>
<ul>
<li>直接用高位地址线中的某一条作为存储器芯片的片选控制信号</li>
<li>特点：选择芯片不需要外加逻辑电路，译码线路简单。地址重叠区域多，适用于扩展容量较小的系统。</li>
</ul>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gwmwijfvs2j30go0csadv.jpg" alt="image.png" style="zoom: 80%;" />
</li>
</ul>
<h3 id="633-8086cpu与存储器的连接">6.3.3 8086CPU与存储器的连接</h3>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gwn246wistj30tv0gb0yj.jpg" alt="image.png" style="zoom: 50%;" />
<ul>
<li>空间1MB，分为两个512KB存储体</li>
<li>奇体与数据线D8-15连接，偶体与数据线D0-7连接</li>
<li>地址线A0和控制线/BHE分别作为存储体的选择控制线</li>
</ul>
<ol>
<li>
<p>CPU与存储器的接口</p>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gwn2hyamc1j30vl0g6juk.jpg" alt="image.png" style="zoom: 67%;" /></li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[4. 8086汇编语言程序设计]]></title>
        <id>https://notes.yuyzzz.top/post/4-8086-hui-bian-yu-yan-cheng-xu-she-ji/</id>
        <link href="https://notes.yuyzzz.top/post/4-8086-hui-bian-yu-yan-cheng-xu-she-ji/">
        </link>
        <updated>2021-12-06T08:51:38.000Z</updated>
        <summary type="html"><![CDATA[<p>汇编语言是介于机器语言和高级语言之间的计算机语言，是一种用符号表示的面向机器的程序设计语言。本章主要介绍汇编语言的基础知识、什么是伪指令、系统功能调用、汇编语言程序设计（流程）等</p>
]]></summary>
        <content type="html"><![CDATA[<p>汇编语言是介于机器语言和高级语言之间的计算机语言，是一种用符号表示的面向机器的程序设计语言。本章主要介绍汇编语言的基础知识、什么是伪指令、系统功能调用、汇编语言程序设计（流程）等</p>
<!-- more -->
<h2 id="41-汇编语言基础知识">4.1 汇编语言基础知识</h2>
<h3 id="411-概述">4.1.1 概述</h3>
<ul>
<li>汇编语言（ Language）是一种用符号表示的面向机器的程序设计语言,不同CPU的计算机有不同的汇编语言。</li>
<li>比机器语言易于阅读、编写和修改，能充分利用计算机的硬件资源，占用内存空间少。</li>
<li>常用于计算机控制系统的开发和高级语言编译程序的编制等应用场合。</li>
</ul>
<img src="https://tva1.sinaimg.cn/large/006pkgSjly1gwh1fal2ktj30mo0760up.jpg" alt="image.png" style="zoom:80%;" />
<h3 id="412-汇编语言源程序结构">4.1.2 汇编语言源程序结构</h3>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gwmuxmgrqtj30is087tbf.jpg" alt="image.png" style="zoom:67%;" />
<p>例：编写汇编程序，计算2010H+2011H，并把和存入RESULT单元</p>
<pre><code>DATA  SEGMENT		;定义数据段
    X  DW  2010H     	;定义被加数
    Y  DW  2011H	;定义加数
    RESULT  DW   ? 	;分配和数存放单元
DATA  ENDS       	;数据段定义结束
CODE  SEGMENT
            MAIN  PROC  FAR
	ASSUME  CS:CODE，DS:DATA 
START:  PUSH  DS
        MOV   AX,0
        PUSH  AX
        MOV   AX,DATA 
        MOV   DS,AX
        MOV  AX,X
        ADD  AX,Y
        MOV  RESULT,AX
        RET 
        MAIN  ENDP
CODE  ENDS
    END  START
</code></pre>
<h3 id="413-汇编语言语句">4.1.3 汇编语言语句</h3>
<ol>
<li>
<p>指令性语句：CPU执行的语句，能够生成目标代码，每条指令语句表达了计算机具有的一种基本能力,</p>
<p>格式：<code>[标号:] [前缀] 助记符 [操作数]，[操作数] [;注释]</code></p>
</li>
<li>
<p>指示性语句：CPU不执行，而由汇编程序执行的语句，不生成目标代码，仅仅告诉汇编程序哪些语句属于一个段、是什么类型的段等等</p>
<p>格式：<code>[名字] 伪指令助记符 操作数 [,操作数,] [;注释]</code></p>
</li>
</ol>
<p>标号与符号名都称为名字。标号是可选项，一般设置在程序的入口处或程序跳转点处，表示一条指令的符号地址，在代码段中定义，后面必须跟上冒号“:”。符号名也是一个可选项，可以是常量、变量、段名、过程名、宏名，后面不能跟冒号。</p>
<h3 id="414-汇编语言的数据">4.1.4 汇编语言的数据</h3>
<ol>
<li>常量：
<ul>
<li>数字常量</li>
<li>字符串常量：用引号引起的字符或字符串，如'A'等，汇编时被译成对应的ASCII码</li>
</ul>
</li>
<li>变量：<strong>存储单元的符号地址</strong>，其存储单元的内容在程序运行时可以被修改。变量有如下属性
<ul>
<li>段属性：变量所在段的段地址</li>
<li>偏移属性：变量所在段的段内偏移量</li>
<li>类型属性：变量所占单元的字节数（字节、字和双字）</li>
</ul>
</li>
<li>标号：<strong>指令的符号地址</strong>，可用作控制转移指令的操作数。标号有如下属性：
<ul>
<li>段属性:标号所在段的段地址。</li>
<li>偏移属性:标号所在段的段内偏移地址。</li>
<li>类型属性:也叫距离属性,表示标号可作为段内或段间的转移特性</li>
</ul>
</li>
</ol>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gwi65mb7buj30mo08fjtf.jpg" alt="image.png" style="zoom:80%;" />
<h3 id="415-汇编语言的操作符与表达式">4.1.5 汇编语言的操作符与表达式</h3>
<ol>
<li>
<p>算数运算符和逻辑运算符</p>
<ul>
<li>算术运算符：+，-，*，/，MOD</li>
<li>逻辑运算符：AND，OR，NOT，XOR</li>
</ul>
</li>
<li>
<p>关系运算符</p>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gwi67wa4qzj30fa05440j.jpg" alt="image.png" style="zoom:80%;" />
</li>
<li>
<p>位移运算符：SHL/SHR, 按位操作</p>
</li>
<li>
<p>数值回送操作符</p>
<ul>
<li>
<p>OFFSET   取得其后变量或标号的偏移地址</p>
<p>SEG        取得其后变量或标号的段地址</p>
</li>
<li>
<p>TYPE       取变量的类型</p>
<p>LENGTH   取所定义存储区的长度</p>
<p>SIZE     	取所定义存储区的字节数</p>
</li>
</ul>
</li>
<li>
<p>属性操作符</p>
<ul>
<li>
<p>PTR，格式: <code>类型 PTR 变量/标号</code>，返回具有规定属性的变量或编号，典型应用如下：</p>
<ul>
<li>
<p>重新指定变量类型：</p>
<pre><code>BUFW DW 1234H,5678H

MOV AX, BUFW

MOV AL, BYTE PTR BUFW ;临时改变BUFW的字属性为字节属性
</code></pre>
</li>
<li>
<p>指定内存操作数的类型：</p>
<pre><code>INC BYTE PTR [BX] ;字节属性

INC WORD PTR [BX][SI] ;子属性
</code></pre>
</li>
<li>
<p>和EQU一起定义一个新类型变量: 新变量或新标号的段属性、偏移属性与前一个已定义的变量或标号段属性、偏移属性相同</p>
<pre><code>BUFW DW 1234H, 5678H

BUFB EQU BYTE PTR BUFW 
</code></pre>
</li>
</ul>
</li>
<li>
<p>THIS，格式：<code>THIS 类型</code>，可以像PTR一样建立一个指定类型的地址操作数，该操作数的段地址和偏移地址与下一个存储单元地址相同。</p>
<pre><code>BUFB EQU THIS BYTE

BUFW DW 1234H,5678H
</code></pre>
</li>
<li>
<p>SHORT，格式：<code>SHORT 标号</code>， 用于JMP指令，即:JMP SHORT 标号，指明是短转移。</p>
</li>
<li>
<p>字节分离字符 HIGH/LOW，返回表达式的高字节或低字节</p>
<pre><code>CONST EQU 0ABCDH

MOV AH,HIGH CONST ;(AH)=OABH

MOV CL,LOW CONST  ;(CL)=0CDH
</code></pre>
</li>
</ul>
</li>
<li>
<p>其他运算符</p>
<ul>
<li>方括号：<code>[]</code>, 方括号中内容为操作数的偏移地址</li>
<li>段重设符: <code>段寄存器名:[]</code>, 用于修改默认的段基地址</li>
</ul>
</li>
</ol>
<h2 id="42-伪指令">4.2 伪指令</h2>
<p>伪指令作用：用于定义变量、分配存储区、定义逻辑段、指示程序开始和结束等</p>
<h3 id="421-变量定义伪指令">4.2.1 变量定义伪指令</h3>
<ul>
<li>
<p>用于定义数据区中变量的类型</p>
</li>
<li>
<p>格式: <code>变量名 伪指令助记符 操作数, … ;注释</code>，变量名某些情况下可省略</p>
</li>
<li>
<p>伪指令助记符：</p>
<ul>
<li>DB    定义的变量为字节型</li>
<li>DW    定义的变量为字类型（双字节)</li>
<li>DD    定义的变量为双字型（4字节）</li>
<li>DQ    定义的变量为4字型（8字节）</li>
<li>DT    定义的变量为10字节型</li>
</ul>
<p>定义字符串必须用DB伪指令</p>
<pre><code>DATA1 DB 'ABCD', 66H
</code></pre>
</li>
<li>
<p>重复操作符：为一个数据区的个单元设置相同的初值</p>
<p>格式：<code>[变量名] 伪指令助记符 n DUP（初值，…）</code></p>
<img src="https://tva1.sinaimg.cn/large/006pkgSjly1gwj8nrrpnlj30ii04wq4d.jpg" alt="image.png" style="zoom:80%;" />
</li>
<li>
<p>用&quot;?&quot;预留存储空间</p>
<pre><code>MEM1      DB  34H, ’A’, ?, ?, ?

          DW  20  DUP(?) ; 预留40个字节单元
</code></pre>
</li>
</ul>
<h3 id="422-符号定义伪指令">4.2.2 符号定义伪指令</h3>
<ul>
<li>符号包括汇编语言的变量名、标号名、过程名等。</li>
<li>常用符号定义伪指令有：EQU, &quot;=&quot;, LABEL</li>
</ul>
<ol>
<li>
<p>EQU伪指令</p>
<ul>
<li>
<p>格式：<code>名字 EQU 表达式</code></p>
</li>
<li>
<p>功能：给表达式赋予一个名字。定义后，可用名字代替表达式。在同一源程序中，一个名字只能用EQU定义一次</p>
<pre><code>A    EQU  7

B    EQU  A-2
</code></pre>
</li>
</ul>
</li>
<li>
<p>&quot;=&quot;伪指令</p>
<ul>
<li>
<p>格式：<code>名字=表达式</code></p>
</li>
<li>
<p>功能：与EQU基本相同，不同的是它可以对一个名字重新定义</p>
<pre><code>COUNT = 10

MOV  AL,COUNT

…

COUNT = 5
</code></pre>
</li>
</ul>
</li>
<li>
<p>LABEL伪指令</p>
<ul>
<li>
<p>格式：<code>变量/标号 LABEL 类型</code></p>
<ul>
<li>变量的类型有：BYTE、WORD、DWORD、DQ、DT</li>
<li>标号的类型有：NEAR、FAR。</li>
</ul>
</li>
<li>
<p>功能：定义变量或标号的属性类型，而变量或标号的段属性和偏移属性由该语句所处的位置确定<br>
例: 用LABEL使同一个数据区有一个或一个以上的类型和相关属性</p>
<pre><code>AREAW  LABEL  WORD     ;AREAW与AREAB指向相同的数据区,        

;AREAW类型为字,AREAB类型为字节

AREAB  DB  100 DUP(?)
…
MOV  AX,2011H

MOV  AREAW,AX  ;(AREAW)=2011H
…

MOV  BL,AREAB   ;BL=11H
</code></pre>
</li>
</ul>
</li>
</ol>
<h3 id="423-段定义伪指令">4.2.3 段定义伪指令</h3>
<ol>
<li>
<p>段定义伪指令</p>
<ul>
<li>
<p>说明段的开始和结束</p>
</li>
<li>
<p>说明不同程序模块中同类逻辑段之间的联系形态</p>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gwjb4x1r73j30km09fwjc.jpg" alt="image.png" style="zoom:80%;" />
<p>定位类型：说明段的起始地址有应有怎样的边界值</p>
<ul>
<li>BYTE： 段的起点从存储器任何地址开始,这种类型段间不留空隙，存储器利用率高。</li>
<li>WORD： 段的起点从偶地址开始</li>
<li>PARA：<strong>定位类型的默认值为PARA</strong>。段的起点从节边界开始（16个字节为1节）,所以起始地址必为16的倍数, 段间往往有空隙。</li>
<li>PAGE：段的起点从页边界开始（256个字节为1页），其起始地址必为256的倍数。</li>
</ul>
<p>组合类型：</p>
<ul>
<li>PUBLIC：本段与其他模块中说明为PUBLIC的<strong>同名同类别的段</strong>链接起来，公用一个段地址，形成一个新的逻辑段，所有偏移量调整为相对于新逻辑段起始地址的值。</li>
<li>STACK：本段与其他模块中说明为STACK的<strong>同名的堆栈段</strong>链接起来，公用一个段地址，形成一个新的逻辑段。同时，系统自动初始化SS及SP。</li>
<li>COMMON：同名段从同一个内存地址开始装入。所以，各个逻辑段将发生覆盖。连接以后，该段长度取决于同名段中最长的那个，而内容有效的是最后装入的那个。</li>
<li>MEMORY：与PUBLIC同义，只不过MEMORY定义的段装在所有同名段的最后。若连接时出现多个MEMORY，则最先遇到的段按组合类型MEMORY处理，其他段组合类型按PUBLIC处理。</li>
<li>PRIVATE：不组合，该段与其他段逻辑上不发生关系，即使同名，各段拥有各自的段基值。组合类型的默认值为PRIVATE。</li>
<li>AT exp：段地址为表达式exp的值（长度为16位）。此项不能用于代码段。例如：AT 0530H，表示本段从物理地址0530H开始。</li>
</ul>
<p>类别：必须用单引号括起来</p>
<ul>
<li>当几个程序模块进行连接时，其中具有相同类别名的段按出现的先后顺序被装入连续的内存区。</li>
<li>没有类别名的段，与其他无类别名的段一起连续装入内存。</li>
<li>典型的类型名有：“STACK”，“CODE”，“DATA”</li>
</ul>
<pre><code>DATA  SEGMENT  PUBLIC  'CODE'

   MEM1  DB  11H，22H

DATA  ENDS
</code></pre>
</li>
</ul>
</li>
<li>
<p>设定段寄存器伪指令：说明所定义逻辑段与段寄存器之间的关系</p>
<p>格式：<code>ASSUME 段寄存器名：段名[，段寄存器名：段名，…]</code></p>
<ul>
<li>段寄存器可以是：CS、DS、ES、SS。</li>
<li>ASSUME伪指令只是指示各逻辑段使用段寄存器的情况，<strong>并没有对段寄存器的内容进行赋值</strong>。</li>
<li>DS、ES的值必须在程序段中用指令语句进行赋值，而CS、SS由系统负责设置，程序中也可对SS进行赋值，<strong>但不允许对CS赋值</strong>。</li>
</ul>
</li>
</ol>
<h3 id="424-过程定义伪指令">4.2.4 过程定义伪指令</h3>
<ul>
<li>
<p>用于定义一个过程体</p>
</li>
<li>
<p>格式：</p>
<pre><code>过程名   PROC  [ NEAR / FAR ]                     
┇                    
RET过程名   ENDP
</code></pre>
</li>
<li>
<p>过程名按汇编语言命名规则设定，汇编及链接后，该名称表示过程程序的入口地址，供调用使用</p>
</li>
</ul>
<h3 id="425-模块定义结束伪指令">4.2.5 模块定义结束伪指令</h3>
<ul>
<li>NAME: 为目标程序设定一个名字，格式: <code>NAME 模块名</code>, 如果程序中没有NAME伪指令，则汇编程序将TITLE伪指令定义的标题名前6个字符作为模块名; 如果程序中既没有NAME，又没有TITLE，则汇编程序将汇编语言程序的文件名作为目标程序的模块名。</li>
<li>TITLE: 指定每页上打印的标题，格式:<code>TITLE 标题</code></li>
<li>END: 表示汇编语言程序的结束, 格式: <code>END [标号]</code>，标号仅表示改程序的起始地址，多个模块连接时只有主程序要使用标号</li>
</ul>
<p>一个完整源程序实例：</p>
<pre><code>DSEG    SEGMENT
DATA1   DB  1，2，
DATA2   DW  1234H
DSEG    ENDS
ESEG    SEGMENT
        DB  20  DUP(?)
ESEG    ENDS
SSEG    SEGMENT  STACK  'STACK'
        DB  200  DUP(?)
SSEG    ENDS

 CSEG SEGMENT
           ASSUME  CS：CSEG，DS：DSEG，
                             ES：ESEG，SS：SSEG
 START：MOV  AX，DSEG
                 MOV  DS，AX
                 MOV  AX，ESEG
                 MOV  ES，AX
                 MOV  AX，SSEG
                 MOV  SS，AX
          ┇
 CSEG  ENDS
       END  START
</code></pre>
<h2 id="43-系统功能调用">4.3 系统功能调用</h2>
<ul>
<li>DOS功能调用：高级调用，操作系统提供</li>
<li>BIOS功能调用：低级调用</li>
</ul>
<p>编程时遵循的原则：</p>
<ul>
<li>尽可能使用DOS的系统功能调用，以降低编程的复杂性。</li>
<li>在DOS功能不能实现情况下考虑用BIOS功能调用。</li>
<li>在DOS和BIOS的中断子程不能解决问题时使用IN/OUT指令直接控制硬件。</li>
</ul>
<h3 id="431-dos功能调用">4.3.1 DOS功能调用</h3>
<ul>
<li>
<p>包含多个子功能的功能包，各子功能采用功能号来区分</p>
</li>
<li>
<p>功能调用格式：</p>
<pre><code>[置入口参数]

MOV AH, 功能号  ;功能调用号送入AH寄存器

INT 21H       ;执行软中断z
</code></pre>
</li>
</ul>
<ol>
<li>
<p><strong>从键盘输入单字符并显示</strong></p>
<ul>
<li>
<p>功能调用号：AH=01H</p>
</li>
<li>
<p>输入字符的ASCII码存入AL寄存器。若按下组合键Ctr+Break或CtrH+C，则程序返回DOS。</p>
</li>
</ul>
<pre><code>MOV AH, 01H

INT 21H
</code></pre>
</li>
<li>
<p><strong>字符串输入</strong></p>
<ul>
<li>功能调用号：AH=0AH</li>
<li>DS, DX存放接收缓冲区首地址，分别存放段地址和偏移地址；缓冲区第一字节存放接收字符串最大字符个数</li>
<li>缓冲区第二字节存放实际输入的字符个数(不包括回车符)，第三字节开始存放接收的字符串</li>
<li>输入字符串以回车结束，回车符不计入字符数</li>
</ul>
<p>例: 如下代码允许输入的字符串长度不超过100</p>
<pre><code>DATA SEGMENT
   BUF DB 100
       DB ?
       DB 100 DUP(?)
DATA ENDS

CODE SEGMENT
    ...
    MOV DX,OFFSET BUF
    MOV AH,OAH
    INT	21H
CODE ENDS
</code></pre>
</li>
<li>
<p><strong>单字符输出</strong></p>
<ul>
<li>功能调用号：AH=02H</li>
<li>将要显示的字符的ASCII码保存于寄存器DL</li>
</ul>
<pre><code>MOV DL,'2'
MOV AH,02H
INT 21H
</code></pre>
</li>
<li>
<p><strong>字符串输出显示</strong></p>
<ul>
<li>功能调用号：AH=9</li>
<li>寄存器DS和DX，分别存入被输出字符串首地址的段基值和偏移量。</li>
<li>要求字符串以“$”结束，该字符作为字符串结束符，不输出。</li>
</ul>
<pre><code> DATA	 SEGMENT
 MESS1  DB  'Input String:' 0DH，0AH,'$'	
                                                 ;被显示的字符串必须以‘$’结束
 DATA  ENDS
 CODE  SEGMENT
         ┇
 MOV	DX，SEG  MESS1 ;待输出字符串的偏移地址→ DS：DX
 MOV	DS，DX
 MOV	DX，OFFSET  MESS1
 MOV	AH，09		;功能号O9H→AH
 INT	21H
</code></pre>
</li>
<li>
<p><strong>进程终止</strong>:</p>
<ul>
<li>功能调用号AH=4CH</li>
<li>结束当前程序，返回DOS</li>
</ul>
<pre><code>MOV AH,4CH
INT 21H
</code></pre>
</li>
</ol>
<h2 id="44-汇编语言程序设计">4.4 汇编语言程序设计</h2>
<p><strong>设计步骤：</strong></p>
<ul>
<li>根据实际问题抽象出数学模型</li>
<li>确定算法</li>
<li>画程序流程图</li>
<li>分配内存工作单元和寄存器</li>
<li>程序编码</li>
<li>调试</li>
<li>文档整理</li>
</ul>
<p>汇编语言程序的三种结构：</p>
<ul>
<li>顺序结构</li>
<li>分支结构</li>
<li>循环结构</li>
</ul>
<h3 id="441-顺序结构程序设计">4.4.1 顺序结构程序设计</h3>
<p>程序流程图符号</p>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gwlv4oefd8j30k60bx0tx.jpg" alt="image.png" style="zoom:80%;" />
<p>例：编程将内存数据段字节单元INDAT存放的一个数n (假设0≤ n ≤9)以十进制形式在屏幕上显示出来。</p>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gwlvd4aro6j308f0nyaej.jpg" alt="image.png" style="zoom: 50%;" />
<pre><code>DATA SEGMENT
	INDAT DB 8
DATA ENDS

CODE SEGMENT
 ASSUME CS:CODE, DS:DATA
START:
	MOV AX,DATA
	MOV DS,AX ;初始化DS
	MOV DL,INDAT ;取操作数
	OR DL,30H ;与30H(0)作或运算，获取DL的ASCII码
	MOV AH,02H
	INT 21H
	MOV DL,'D'
	MOV AH,02H
	INT 21H
	MOV AH,4CH
	INT 21H
CODE ENDS
	END START
</code></pre>
<h3 id="442-分支结构">4.4.2 分支结构</h3>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gwlw4js8iwj30ys0egwl2.jpg" alt="image.png" style="zoom:80%;" />
<p>例：编程求分段函数Y的值。已知变量X为16位带符号数，分段函数的值要求保存到字单元Y中。函数定义如下<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gwlw7tryvsj3091044mxt.jpg" alt="image.png" style="zoom:80%;" /></p>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gwmuyj5zfaj30b10fbq3n.jpg" alt="image.png" style="zoom:80%;" />
<pre><code>DATA SEGMENT
	X DW -128
	Y DW ?
DATA ENDS

CODE SEGMENT
 	ASSUME CS:CODE, DS:DATA
START:
	MOV AX, DATA
	MOV DS, AX
	MOV AX, X
	CMP AX, 0
	JG ISPN
	JZ ISZN
	MOV Y,-1
	JMP FINISH
ISPN:MOV Y,1
	JMP FINISH
ISZN:MOV Y,0
	JMP FINISH
FINISH:
	MOV AH,4CH
	INT 21H
CODE ENDS
	END START ;END START标签只是告诉编译器,从程序从这里结束,并且程序从START标号开始执行
</code></pre>
<h3 id="443-循环结构">4.4.3 循环结构</h3>
<p>循环程序由以下三个部分组成</p>
<ul>
<li>初始化部分:完成地址指针、循环计数、结束条件等初值的设置。</li>
<li>循环体部分：完成程序的基本操作；修改循环工作部分的变量地址等；检测和修改循环控制计数器，控制循环的运行和结束。</li>
<li>结束部分：完成循环结束后的处理，如数据分析、结果的存放等。</li>
</ul>
<p>循环程序结构：</p>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gwlx8gpfxrj30ys0kcn3r.jpg" alt="image.png" style="zoom: 50%;" />
<p>例1：编程显示以&quot;!&quot;结尾的字符串, 如'Welcome to MASM!'</p>
<img src="https://tva1.sinaimg.cn/large/006pkgSjly1gwlxdztk4ej30fw0qsq8c.jpg" alt="image.png" style="zoom: 50%;" />
<pre><code>DATA SEGMENT
	MYSTR DB 'Welcome to MASM!'
DATA ENDS
CODE SEGMENT
	ASSUME CS:CODE, DS:DATA
START:
	MOV AX, DATA
	MOV DS, AX
	LEA SI, MYSTR
NEXTCHAR:
	MOV DL, [SI]
	CMP DL, '!'
	JZ FINISH
	MOV AH, 2
	INT 21H
	INT SI
	JMP NEXTCHAR
FINISH:
	MOV AH,2
	INT 21H ;输出'!'
	MOV AH,4CH
	INT 21H

CODE ENDS
	END START
</code></pre>
<p>例2：编程以二进制显示BX的值(假设为无符号数)，如果(BX)=20, 则显示: 0000000000010100B</p>
<pre><code>CODE SEGMENT
	ASSUME CS:CODE
START:
	MOV BX,20
	MOV CX,16 ;LOOP隐含使用CX寄存器作为计数器
NEXTCHAR:
	ROL BX,1  ;从左到右取BX的最高位放在BX的最低位(循环左移)
	MOV DL,BL ;只取低八位就可以
	AND DL,1  ;BX最低位和1与运算,而D7-D1均为0
	OR DL,30H ;得到最低位ASCII码
	MOV AH,2
	INT 21H
	LOOP NEXTCHAR
FINISH:
	MOV DL,'B'
	MOV AH,2
	INT 21H
	MOV AH,4CH
	INT 21H
CODE ENDS
	END START
</code></pre>
<h3 id="444-子程序设计">4.4.4 子程序设计</h3>
<p>采用子程序进行程序设计的注意点:</p>
<ul>
<li>
<p>现场保护和恢复</p>
<ul>
<li>
<p>&quot;现场保护&quot;——子程序运行时，对可能破坏的主程序用到的寄存器、堆栈、标志位、内存数据值进行的保护。</p>
</li>
<li>
<p>&quot;现场恢复&quot;——子程序结束运行返回主程序时，对被保护的寄存器、堆栈、标志位、内存数据值的恢复。</p>
</li>
</ul>
</li>
<li>
<p>子程序可嵌套: 子程序中使用堆栈来保护断点，由堆栈操作的“后进先出”特性保证各个层次子程序断点的正确入栈和返回，实现嵌套。因此在子程序中对堆栈的操作要精确控制。</p>
</li>
<li>
<p>参数传递，主要方法有<strong>寄存器传递、内存变量传递和堆栈传递。</strong></p>
</li>
<li>
<p>编写子程序调用方法说明, 子程序调用方法说明包括</p>
<ul>
<li>子程序功能</li>
<li>入口参数</li>
<li>出口参数</li>
<li>使用的寄存器或存储器及调用实例</li>
</ul>
</li>
</ul>
<p>例1：利用寄存器传递参数。编写子程序，实现以二进制形式显示BX的值（假设为无符号数）</p>
<pre><code>;-------------------------
;子程序名:DISP_BINARY
;功能:以二进制形式显示BX的值(假设为无符号数)
;入口参数:BX
;出口参数:无
;------------------------
DISP_BINARY  PROC
	PUSH  CX		 ;保护现场
	PUSH  DX
	PUSH  AX
	PUSHF
	MOV  CX,16
NEXTCHAR:
	ROL  BX,1	
	MOV  DL,BL
	AND  DL,1
	OR   DL,30H
   	MOV  AH,2
	INT  21H
	LOOP  NEXTCHAR
FINISH:
    MOV  DL,'B'
    MOV  AH,2
    INT  21H
    POPF			;恢复现场
    POP  AX		
    POP  DX
    POP  CX
    RET
DISP_BINARY  ENDP
</code></pre>
<ul>
<li>作为入口参数的寄存器可以保护也可以不保护</li>
<li><strong>作为出口参数的寄存器是不能保护的</strong></li>
<li>寄存器数量有限，只适合少量数据传递</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[3. 8086寻址方式和指令系统]]></title>
        <id>https://notes.yuyzzz.top/post/3-8086-xun-zhi-fang-shi-he-zhi-ling-xi-tong/</id>
        <link href="https://notes.yuyzzz.top/post/3-8086-xun-zhi-fang-shi-he-zhi-ling-xi-tong/">
        </link>
        <updated>2021-12-06T08:47:05.000Z</updated>
        <summary type="html"><![CDATA[<p>本章主要介绍8086的7种寻址方式，和8086的指令系统（即各种指令的功能和用法）</p>
]]></summary>
        <content type="html"><![CDATA[<p>本章主要介绍8086的7种寻址方式，和8086的指令系统（即各种指令的功能和用法）</p>
<!-- more -->
<h2 id="31-概述"><strong>3.1</strong> 概述</h2>
<p>一条指令包括操作数和操作码</p>
<p>指令的一般格式：</p>
<ul>
<li>没有操作数的指令：无操作数指令</li>
<li>两个操作数的指令称为双操作数或二地址指令。</li>
</ul>
<h2 id="32-8086寻址方式">3.2 8086寻址方式</h2>
<h3 id="321-立即寻址">3.2.1 立即寻址</h3>
<ul>
<li>
<p>操作数直接出现在指令中，此时操作数也叫立即数</p>
</li>
<li>
<p>操作数存放在代码段中，操作数紧跟在操作码后面，例如：</p>
</li>
</ul>
<pre><code>MOV AX, 2010H 
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gvymvhe7mej30al07fq33.jpg" alt="image.png" loading="lazy"></figure>
<p>约束条件：</p>
<ul>
<li>立即数只能作源操作数，不能作目标操作数</li>
<li>立即数应和目标操作数长度一致</li>
<li>立即数默认十进制，十六进制加H，八进制加Q，若十六进制以字母开头需加0为前缀</li>
<li>立即数可以用表示+、-、×、/表示的算术表达式，也可以用括号改变运算顺序</li>
<li>立即数是整数</li>
</ul>
<h3 id="322-寄存器寻址">3.2.2 寄存器寻址</h3>
<ul>
<li>操作数在指定寄存器(CPU内部寄存器)中</li>
<li>由于寄存器号较短，故采用寄存器寻址的指令的机器码长度较短</li>
</ul>
<p>约束条件：</p>
<ul>
<li>在一条指令中，寄存器寻址方式既可用于源操作数，也可用于目标操作数，还可以两者都用寄存器寻址方式。</li>
<li>源操作数与目标操作数的长度应一致。</li>
<li>两个操作数不能同时为段寄存器。</li>
<li>目标操作数不能是代码段寄存器。</li>
</ul>
<p>接下来的五种寻址方式的操作数都在存储器中，因此称为存储器寻址，其操作数称为内存操作数</p>
<h3 id="323-直接寻址">3.2.3 直接寻址</h3>
<ul>
<li>指令中<strong>给出操作数的有效地址</strong>，为了与立即数区别，该有效地址必须用<code>[]</code>括起</li>
<li><strong>操作数在存储器中</strong></li>
</ul>
<pre><code>MOV AX, [2010H]
</code></pre>
<p>若:(DS)=2000H, 指令执行后(AX)=1225H</p>
<figure data-type="image" tabindex="2"><img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gw0tog3tr3j30ca0almxm.jpg" alt="image.png" loading="lazy"></figure>
<p>约束条件：</p>
<ul>
<li>若没有前缀指明操作数在哪个段，则默认放在数据段</li>
<li>允许操作数存放在代码段、堆栈段或附加段。此时就需要在指令中指明段超越,如：MOV ES:[1225H], AX</li>
<li>在汇编语言指令中，可以用符号地址代替数值地址</li>
</ul>
<h3 id="324-寄存器间接寻址">3.2.4 寄存器间接寻址</h3>
<ul>
<li>操作数的有效地址放在基址寄存器BX, BP或变址寄存器SI, DI中，指令中指定的寄存器名要用<code>[]</code>括起来</li>
<li>如果有效地址在SI、DI和BX中，则以DS段寄存器的内容为段值；如果有效地址在BP中，则以SS段寄存器的内容为段值</li>
</ul>
<pre><code>MOV AX, [SI]
</code></pre>
<p>若 (DS)=2000H, (SI) = 2010H, 则执行后(AX)=1225H</p>
<figure data-type="image" tabindex="3"><img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gw0u3c9nyhj30dv0bnjrx.jpg" alt="image.png" loading="lazy"></figure>
<h3 id="325-寄存器相对寻址">3.2.5 寄存器相对寻址</h3>
<ul>
<li>
<p>操作数在存储器中，有效地址是基址或变址寄存器与偏移量之和</p>
</li>
<li>
<p>操作数的物理地址=(DS)x 10H+(SI)/(DI)/(BX)+8位或16位偏移量</p>
<p>或：操作数的物理地址=(SS)x 10H+(BP)+8位或16位偏移量</p>
</li>
<li>
<p>8位偏移量的取值范围为：00～0FFH(即+127D～-128D)</p>
</li>
<li>
<p>16位位移量的取值范围为：0000～0FFFFH(即+32767D～-32768D)</p>
</li>
<li>
<p>8086允许以下三种方式表示寄存器相对寻址，他们是等效的</p>
<pre><code>MOV AX，[BX]+8 
MOV AX，8[BX] 
MOV AX，[BX+8]
</code></pre>
</li>
</ul>
<p>若(DS)=2000H, (BX)=2008H,则执行后(AX)=1225H</p>
<figure data-type="image" tabindex="4"><img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gw0uzukszzj30dv0b174t.jpg" alt="image.png" loading="lazy"></figure>
<h3 id="326-基址变址寻址">3.2.6 基址变址寻址</h3>
<ul>
<li>
<p>有效地址是指令中基址寄存器和变址寄存器的和</p>
</li>
<li>
<p>操作数在内存，使用基址寄存器BX时，操作数默认存放在数据段中；使用基址寄存器BP时，操作数默认存放在堆栈段中，允许段超越</p>
<p>操作数的物理地址=（DS）×10H+（SI）/（DI）+（BX）</p>
<p>或 =（SS）×10H+（SI）/（DI）+（BP）</p>
</li>
</ul>
<pre><code>MOV AX, [BX][SI]
</code></pre>
<p>若(DS)=2000H, (BX)=2008H, (SI)=8H, 则执行后(AX)=1225H</p>
<h3 id="327-相对基址变址寻址">3.2.7 相对基址变址寻址</h3>
<ul>
<li>
<p>有效地址是指令中基址寄存器值和变址寄存器值及8位或16位偏移量偏移量之和</p>
</li>
<li>
<p>使用基址寄存器BX时，操作数默认存放在数据段中；使用基址寄存器BP时，操作数默认存放在堆栈段中，允许段超越</p>
<p>操作数的物理地址=（DS）×10H+ (SI)/(DI) +（BX）+ 8位或16位偏移量</p>
<p>或 =（SS）×10H+ (SI)/(DI) +（BP）+ 8位或16位偏移量</p>
</li>
</ul>
<pre><code>MOV AX, 3[BX][SI]
</code></pre>
<p>若(DS)=2000H, (BX)=2008H, (SI)=5H, 则执行后(AX)=1225H</p>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gw0vkfk4orj30re0mcgp9.jpg" alt="image.png" style="zoom:50%;" />
<h2 id="33-8086指令系统">3.3 8086指令系统</h2>
<p>六大指令类型：数据传送指令、算术运算指令、位运算指令、串操作指令、控制转移指令、处理器控制指令</p>
<h3 id="331-数据传送指令">3.3.1 数据传送指令</h3>
<p>指将数据或地址传送到寄存器，存储单元或I/O端口中</p>
<p><strong>数据传送指令的特点：</strong></p>
<ul>
<li>除了POPF和SAHF指令外，其他的数据传送指令的执行结果都不影响标志位</li>
<li>指令中如果列出两个操作数，则指令的执行过程是：目标操作数←源操作数。指令中如果仅列出一个操作数，则另一个操作数为隐含操作数</li>
</ul>
<ol>
<li>
<p>通用数据传送指令</p>
<ul>
<li>
<p><strong>传送指令</strong></p>
<pre><code>MOV 目标操作数, 源操作数
</code></pre>
<p>说明：</p>
<ul>
<li>源操作数可以是立即数、寄存器或内存操作数</li>
<li>目的操作数可以是寄存器、内存操作数</li>
<li>立即数和CS寄存器只能成为源操作数，不能成为目标操作数</li>
<li>IP和FR都不允许成为源操作数和目标操作数</li>
<li>立即数不允许传送到DS、ES或SS</li>
<li>源操作数和目标操作数不能同时是内存操作数，也不能同时是段寄存器</li>
<li>源操作数和目标操作数类型必须相同，为字节或字类型</li>
</ul>
</li>
<li>
<p><strong>数据交换指令</strong>：源操作数与目标操作数的内容互换</p>
<pre><code>XCHG 目标操作数, 源操作数
</code></pre>
<p>说明：</p>
<ul>
<li>源操作数和目标操作数都可以是寄存器或内存操作数</li>
<li>不能同时是内存操作数、不能同时是寄存器AX</li>
<li>段寄存器、寄存器IP或立即数不能作为源操作数和目标操作数</li>
</ul>
</li>
<li>
<p><strong>堆栈操作指令</strong>：操作数的类型只能是<strong>字(两个字节)</strong>，而不是字节，并且不能是立即数</p>
<ul>
<li>
<p><strong>进栈指令</strong>：源操作数入栈，且栈指针SP－2</p>
<pre><code>PUSH 源操作数
</code></pre>
<p>SP = SP -1 操作低字节</p>
<p>SP = SP -2 操作高字节</p>
<p>说明：</p>
<ul>
<li>PUSH命令总是把两个字节一起推入堆栈</li>
<li>源操作数可以是寄存器或内存操作数</li>
</ul>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gw238xakx3j31aw0sih0p.jpg" alt="image.png" style="zoom:43%;" />
</li>
<li>
<p>出栈指令：弹出栈顶两个字节</p>
<pre><code>POP 目标操作数
</code></pre>
<p>说明：</p>
<ul>
<li>执行后SS:SP指针指向目标操作数</li>
<li>SP = SP + 2</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>累加器专用传送指令</p>
<p>XLAT, 将内存表格中指定单元值送入寄存器AL, 把数据段中偏移地址为BX+AL的内存单元的内容送到AL中，即：AL← (BX + AL)</p>
<pre><code>XLAT
XLAT 表格首地址
</code></pre>
<p>约束：</p>
<ul>
<li>BX保存内存表格的首地址；寄存器AL保存表格中某单元在此表格中的偏移量</li>
<li>该指令能访问的内存表格中的数据只能是字节类型的</li>
<li>该指令能访问的内存表格的最大容量是256字节</li>
</ul>
</li>
<li>
<p>地址传送指令</p>
<ul>
<li>
<p>取有效地址指令LEA: 取内存单元mem的<strong>有效地址</strong>，送入16位寄存器中</p>
<pre><code>LEA r16, mem
</code></pre>
</li>
<li>
<p>地址指针装入DS指令LDS: 将内存中32位(逻辑地址)源操作数的低16位送入指定寄存器r16中，高16送入段寄存器DS中</p>
<pre><code>LDS r16, m32
</code></pre>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gw32yzvn21j311y0swwwy.jpg" alt="image.png" style="zoom:40%;" />
</li>
<li>
<p>地址指针装入ES指令LES: 将上述DS换成ES</p>
</li>
</ul>
</li>
<li>
<p>标志传送指令</p>
<ul>
<li>取标志指令LAHF(Load AH from flags): 源操作数隐含为标志寄存器PSW的低8位，目标操作数隐含为寄存器AH</li>
<li>置标志指令SAHF(Store AH onto flags): 将AH的内容写入标志寄存器的0-7位</li>
<li>标志入栈指令PUSHF: 将标志寄存器入栈, ① SP ← SP–2; ② (SP + 1，SP) ← FLAG</li>
<li>标志出栈指令POPF: 将数据出栈到标志寄存器，① FLAG ← (SP+1，SP); ② SP ← SP + 2</li>
</ul>
</li>
<li>
<p>数据类型转换指令</p>
<ul>
<li>
<p>字节转换为字指令CBW：将寄存器AL中数据的符号位扩展到AH中，使字节转换为字</p>
<p>当：(AL)&lt;80H, AH&lt;-00H, (AL)&gt;=80H, AH&lt;-FFH</p>
</li>
<li>
<p>字转换为双字指令CWD: 将寄存器AX中数据的符号位扩展到DX，使字转换为双字</p>
<p>当：(AX)&lt;8000H, DX&lt;-0000H; (AX)&gt;=8000H, DX&lt;-FFFFH</p>
</li>
</ul>
</li>
</ol>
<h3 id="332-算术运算指令">3.3.2 算术运算指令</h3>
<ul>
<li>双操作数指令中，除了源操作数是立即数这种情况外， 其余情况下，必须有一个操作数在寄存器中</li>
<li>单操作数指令中的操作数不允许是立即数</li>
</ul>
<ol>
<li>
<p>加法指令</p>
<ul>
<li>
<p>不带进位的加法指令 ADD；AF、CF、OF、PF、SF、ZF受影响</p>
<pre><code>ADD dest, src
;即(dest)&lt;- (dest)+(src)
</code></pre>
</li>
<li>
<p>带进位的加法指令 ADC；AF、CF、OF、PF、SF、ZF受影响</p>
<pre><code>ADC dest, arc
;即(dest)&lt;- (dest)+(src)+CF
</code></pre>
</li>
<li>
<p>加1指令 INC；AF、OF、PF、SF、ZF受影响</p>
<pre><code>INC dest
;即(dest)&lt;-(dest)+1
</code></pre>
</li>
</ul>
</li>
<li>
<p>减法指令</p>
<ul>
<li>
<p>不带借位的减法指令SUB，当减去一个立即数字节时，应先扩展为16位操作数</p>
<pre><code>SUB dest, arc
</code></pre>
</li>
<li>
<p>带借位的减法SBB：进行减法时同时减去CF；AF、CF、OF、PF、SF、ZF受影响</p>
<pre><code>SBB dest, arc
</code></pre>
</li>
<li>
<p>减1指令DEC, AF、OF、PF、SF、ZF受影响</p>
<pre><code>DEC dest
</code></pre>
</li>
<li>
<p>比较指令CMP，从目的操作数（左边）中减去源操作数(右边)，但结果不送回，而只按减的结果影响标志</p>
<p>AF、CF、OF、PF、SF、ZF受影响，源操作数和目标操作数类型要相同</p>
<pre><code>CMP dest, src
</code></pre>
</li>
<li>
<p>求补指令NEG</p>
<pre><code>NEG dest
</code></pre>
</li>
</ul>
</li>
<li>
<p>乘法指令：字节乘时，高8位存放在AH中，低8位存放在AL中；字乘时，被乘数隐含为AX，高16位存放于DX中，低16位存放于AX中</p>
<ul>
<li>
<p>无符号数乘法指令</p>
<pre><code>MUL src
</code></pre>
<p>CF、OF受影响, AF、PF、SF、ZF 不受影响，DX和AH中分别为乘积高位，如乘积高位不为0，CF和OF为1，表示结果为有效数；若运算结果OF=CF=0，表示其为无效数据。</p>
</li>
<li>
<p>有符号数乘法指令</p>
<pre><code>IMUL src
</code></pre>
<p>CF、OF 受影响，AF、PF、SF、ZF 无意义。如果乘积的高一半为低一半的符号扩展，则CF和OF置0，表示其为无效数据。当CF和OF为1 时，说明AH 或DX 中的内容是乘积的高位</p>
</li>
</ul>
</li>
<li>
<p>除法指令：要求被除数是除数的双倍字长</p>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gw3gb8wuk0j30ts0e6ahb.jpg" alt="image.png" style="zoom:50%;" />
</li>
<li>
<p>BCD码调整指令:</p>
<p>6条，均为隐含寻址方式，隐含操作数为AL或AL、AH；</p>
<p>不能单独使用，要紧跟在相应算术运算指令之后；</p>
<p>执行结果为压缩BCD码和扩展BCD码表示的十进制数</p>
<ul>
<li>
<p>压缩BCD码的加减法调整：</p>
<ul>
<li>DAA: 若AL的低4位&gt;9或AF=1，则进行AL&lt;-(AL)+06H修正，同时AF置1。若AL的高4位&gt;9或CF=1，则进行AL&lt;-(AL)+60H修正，同时CF置1。</li>
<li>DAS: 若AL的低4位&gt;9或AF=1，则进行AL&lt;-(AL)-06H修正，同时AF置1。若AL的高4位&gt;9或CF=1，则进行AL-(AL)-60H修正，同时CF置1。</li>
</ul>
</li>
<li>
<p>非压缩BCD码的加减乘除调整：</p>
<ul>
<li>
<p>AAA: 加法调整</p>
<p>①若AL中低4位&lt;9且AF=0，则跳过②;</p>
<p>②若AL中的低4位&gt;9或AF=1，则进行AL&lt;-(AL)+06H修正，同时，AH&lt;-(AH)+1，AF置1。</p>
<p>③清除AL寄存器的高4位。</p>
<p>④AF值送CF。</p>
</li>
<li>
<p>AAS：减法调整</p>
<p>①若AL中低4位&lt;9且AF=0，则跳过②;</p>
<p>②若AL中的低4位&gt;9或AF=1，则减6，AF置1。</p>
<p>③清除AL寄存器的高4位。AF值送CF。</p>
</li>
<li>
<p>AAM：乘法调整，把AL寄存器的内容除以10，商放在AH寄存器中，余数保存在AL寄存器中，用于MUL之后，把AL中的乘积调整成非压缩BCD码，结果存于寄存器AX中。</p>
</li>
<li>
<p>AAD：除法调整，将AH寄存器的内容乘以10后加上AL的内容，结果回送AL，同时将AH清0。</p>
</li>
</ul>
</li>
</ul>
</li>
</ol>
<h3 id="333-位运算指令">3.3.3 位运算指令</h3>
<ol>
<li>
<p>逻辑运算：按位进行，NOT不影响标志位，其他指令：CF, OF为0，AF无意义，SF, ZF, PF被影响</p>
<ul>
<li>AND：按位与</li>
<li>OR：按位或</li>
<li>NOT：按位非，操作数不能是立即数</li>
<li>XOR：按位异或</li>
<li>TEST：执行与操作，影响标志位，但不保留结果</li>
</ul>
</li>
<li>
<p>位移指令：CF值由运算结果定；移动一位时由指令直接给出，此时OF的值根据符号位确定；两位及以上时移动次数由寄存器CL指定</p>
<ul>
<li>
<p>SHL: 逻辑左移</p>
</li>
<li>
<p>SAL: 算数左移</p>
</li>
<li>
<p>SHR: 逻辑右移</p>
</li>
<li>
<p>SAR: 算数右移</p>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gwf2nyrvgej30m706075f.jpg" alt="image.png" style="zoom: 80%;" />
</li>
<li>
<p>ROL: 循环左移</p>
</li>
<li>
<p>ROR: 循环右移</p>
</li>
<li>
<p>RCL: 带进位循环左移</p>
</li>
<li>
<p>RCR: 带进位循环右移</p>
</li>
</ul>
</li>
</ol>
<h3 id="334-串操作指令">3.3.4 串操作指令</h3>
<p>串操作指令的特点:</p>
<ul>
<li>源串一般存放在数据段，偏移地址由SI指定,允许段重设。</li>
<li>目标串必须在附加段，偏移地址由DI指定。</li>
<li>指令自动修改地址指针，修改方向由DF决定。DF=0 增地址方向；DF=1 减地址方向。</li>
<li>数据块长度值由CX指定。</li>
<li>可增加自动重复前缀以实现自动修改CX内容</li>
</ul>
<ol>
<li>
<p>串传送指令：MOVSB/MOVSW</p>
<ul>
<li>
<p>将源字节（字）串传送给目的字节串（或字串）</p>
</li>
<li>
<p>源字节串（字串）的地址由DS:SI 提供，</p>
<p>目的字节串（字串）的地址由ES:DI 提供。</p>
</li>
<li>
<p>方向标志DF为0，则SI和DI做自动增量变化，即每传送1个字节，自动加1，而每传送1个字, 自动减2；如果DF为1，则SI和DI作自动减量变化，即每传送1个字节，自动减1，而每传送1个字，自动减2</p>
</li>
</ul>
</li>
<li>
<p>串装入指令：LODSB/LODSW</p>
<ul>
<li>将源操作数提供的字节（字）取到AL（AX），所有标志位不受影响</li>
<li>每次重复执行指令会把累加器的内容冲掉，因此，这两条指令只用于循环程序中，而不加重复前缀</li>
</ul>
</li>
<li>
<p>重复前缀：用于重复执行某些指令</p>
<img src="C:\Users\framezhi\AppData\Roaming\Typora\typora-user-images\image-20211115165033876.png" alt="image-20211115165033876" style="zoom:80%;" />
</li>
<li>
<p>串扫描指令：SCASB/SCASW</p>
<ul>
<li>
<p>按照累加器中给出的字节或字对ES:DI所指的字节串或字串进行检索，每检索一次，便对DI作一次修改</p>
</li>
<li>
<p>影响AF、CF、OF、PF、SF、ZF</p>
</li>
<li>
<p>通过加重复前缀实现在字节串中或字串中检索和累加器内容相同的或不同的字节或字</p>
</li>
<li>
<p>REPE SCASB 用来检索和AL内容不同的字节，</p>
<p>REPNZ SCASW 用来检索和AX内容相同的字。</p>
</li>
</ul>
</li>
<li>
<p>串送存指令：STOSB/STOSW</p>
<ul>
<li>将AL（AX）中的字节（或字）存入ES:DI 所指单元</li>
<li>用于将输入的一串数据填入内存一个区域；STOSB和STOSW指令前加重复前缀时，可以使内存一个区域填满某个值。</li>
</ul>
</li>
<li>
<p>串比较指令：CMPSB/CMPSW</p>
<ul>
<li>功能：CMPSB/CMPSW指令对存储器内的2个字节/字串进行比较。</li>
<li>AF、CF、OF、PF、SF、ZF受影响</li>
<li>串比较指令常与条件重复前缀连用，指令的执行不改变操作数，仅影响标志位。</li>
</ul>
</li>
</ol>
<h3 id="335-程序控制指令">3.3.5 程序控制指令</h3>
<ol>
<li>
<p>转移指令：修改指令的<u>偏移地址</u>或<u>段地址及偏移地址</u>实现程序的转移</p>
<p>无条件转移指令：JMP。IP←(IP)+以标号或立即数给出的偏移量，(CS)不变。可以为段内直接转移、段内间接转移、段间直接转移、段间间接转移。</p>
<ul>
<li>
<p>段内转移：转移的目标地址在当前代码段内</p>
<ul>
<li>
<p>段内直接转移：指令中直接给出目标地址</p>
<img src="https://tva1.sinaimg.cn/large/006pkgSjly1gwfyiomzuqj30mi028js5.jpg" alt="image.png" style="zoom:80%;" />
</li>
<li>
<p>段内间接转移：由指令中的寄存器或存储器操作数指出目标地址</p>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gwfyjjxd3tj30ba01mweh.jpg" alt="image.png" style="zoom:80%;" />
</li>
</ul>
</li>
<li>
<p>段间转移：转移的目标地址不在当前代码段内</p>
<ul>
<li>
<p>段间直接转移：指令中直接给出目标地址；IP&lt;-标号所在存储单元的偏移地址，CS&lt;-标号所在存储单元的段地址。格式: JMP FAR PTR 标号</p>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gwfyn1e3bsj30k300z74e.jpg" alt="image.png" style="zoom:80%;" />
</li>
<li>
<p>段间间接转移：由指令中的32位存储器操作数指出目标地址, IP&lt;-操作数指出的双字存储单元的低16位数值，CS&lt;-操作数指出的双字存储单元的高16位数值。格式: JMP DWORD PTR 存储单元</p>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gwfyndlm0vj30hw00tjrd.jpg" alt="image.png" style="zoom:80%;" />
</li>
</ul>
</li>
</ul>
<p>条件转移指令：</p>
<ul>
<li>
<p>根据单个标志位状态判断的转移指令</p>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gwfytl3iobj30i10dljvg.jpg" alt="image.png" style="zoom:80%;" />
</li>
<li>
<p>根据两个无符号数的比较结果判断的转移指令</p>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gwfyu32s9mj30jr0awad0.jpg" alt="image.png" style="zoom:80%;" />
</li>
</ul>
</li>
<li>
<p>循环控制指令</p>
<ul>
<li>
<p>控制程序在以当前IP为中心的-128~+127范围内循环</p>
</li>
<li>
<p>循环次数由CX寄存器指定</p>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gwgy7ae5y1j30hc03s404.jpg" alt="image.png" style="zoom:80%;" />
</li>
</ul>
</li>
<li>
<p>过程调用和返回</p>
<p>调用指令的执行过程</p>
<ul>
<li>将调用指令的下一条指令的地址（断点）压入堆栈</li>
<li>获取子过程的入口地址（子过程第1条指令的偏移地址）</li>
<li>（执行子过程，含相应参数的保存及恢复）</li>
<li>将断点偏移地址由堆栈弹出，返回原程序</li>
</ul>
<p>段内调用：子过程与原调用程序在同一代码段，在调用之前只需保护断点的偏移地址(IP)。直接调用时，转移地址不能用变量，而只能用相对于IP的标号</p>
<ul>
<li>段内直接调用：格式：<code>CALL 过程名</code>；①SP&lt;-(SP)-2; ②SS:SP&lt;-(IP); ③IP&lt;-(IP)+16位偏移量。</li>
<li>段内间接调用：格式：<code>CALL 寄存器</code>；①SP&lt;-(SP)-2; ②SS:SP&lt;-(IP); ③IP&lt;-寄存器的值</li>
</ul>
<p>段间调用：子过程与原调用程序不在同一代码段，在调用之前需保护断点的段基地址和偏移地址。先将断点的CS压栈，再压入IP</p>
<ul>
<li>
<p>段间直接调用：格式：<code>CALL FAR PTR 过程名</code></p>
<p>①SP&lt;-(SP)-2;②SS:SP&lt;-(CS); ③SP&lt;-(SP)-2;④SS:SP&lt;-(IP); ⑤IP&lt;-过程入口偏移地址; ⑥CS&lt;-过程入口段地址</p>
</li>
<li>
<p>段间间接调用：格式：<code>CALL DWORD PTR 存储单元地址</code></p>
<p>①SP&lt;-(SP)-2; ②SS:SP&lt;-(CS); ③SP&lt;-(SP)-2; ④SS:SP&lt;-(IP);</p>
<p>⑤IP&lt;-双字存储单元低16位数据; ⑥CS&lt;-双字存储单元高16位数据</p>
</li>
</ul>
<p>返回指令：从堆栈中弹出断点地址，返回原程序，RET指令一般位于子程序的最后。RET指令的类型和过程调用指令CALL的类型(段内返回类型/段间返回类型)要一致。</p>
<ul>
<li>无参数段内返回</li>
<li>有参数段内返回</li>
<li>无参数段间返回</li>
<li>有参数段间返回</li>
</ul>
</li>
<li>
<p>中断指令</p>
<ul>
<li>中断指令：格式：<code>INT n</code>，产生一个中断类型号为n的软中断</li>
<li>溢出中断指令：格式：<code>INTO</code>, 当OF=1，产生中断类型号为4的中断</li>
<li>中断返回指令：格式：<code>IRET</code>, 从中断服务程序返回断点处，并将标志寄存器的值从堆栈弹出，继续执行原程序。</li>
</ul>
</li>
</ol>
<h3 id="336-处理器控制指令">3.3.6 处理器控制指令</h3>
<ol>
<li>
<p>标志位操作指令</p>
<img src="https://tva1.sinaimg.cn/large/006pkgSjly1gwh199jchej30mc0botc5.jpg" alt="image.png" style="zoom:80%;" />
</li>
<li>
<p>外部同步指令</p>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[三、数据链路层]]></title>
        <id>https://notes.yuyzzz.top/post/san-shu-ju-lian-lu-ceng/</id>
        <link href="https://notes.yuyzzz.top/post/san-shu-ju-lian-lu-ceng/">
        </link>
        <updated>2021-11-10T08:52:50.000Z</updated>
        <summary type="html"><![CDATA[<p>数据链路层为OSI模型中的第二层，位于物理层和网络层之间。本章主要说明如何实现数据链路层的功能：<strong>成帧，差错控制，流量控制，透明传输，链路控制</strong>等</p>
]]></summary>
        <content type="html"><![CDATA[<p>数据链路层为OSI模型中的第二层，位于物理层和网络层之间。本章主要说明如何实现数据链路层的功能：<strong>成帧，差错控制，流量控制，透明传输，链路控制</strong>等</p>
<!-- more -->
<p>数据链路层的功能：在不可靠的物理链路上实现可靠的数据传输</p>
<ul>
<li>数据成帧：传输单位：帧，帧同步</li>
<li>差错控制：纠错；检错</li>
<li>流量控制：收、发方速率适配</li>
<li>透明传输：无论上层什么数据，链路层都可同样传输</li>
<li>链路控制：收发方确认对方是否准备好；数据链路的建立、维持、释放</li>
<li>寻址：MAC地址</li>
</ul>
<h2 id="31-成帧">3.1 成帧</h2>
<ul>
<li>帧定界问题（将比特流分成帧）</li>
<li>透明传输（任意字符都可以传输）</li>
</ul>
<h3 id="311-字符计数法">3.1.1 字符计数法</h3>
<p>在帧头部使用一个字符来标识帧内字符数目，出错后难以纠错</p>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gw4dyjr3vdj30wq0cidq8.jpg" alt="image.png" style="zoom:50%;" />
<h3 id="312-带字符填充的首尾定界法">3.1.2 带字符填充的首尾定界法</h3>
<p>填充ASCII字符：</p>
<ul>
<li>ASCII字符：帧头DLE STX，帧尾DLE ETX
<ul>
<li>DLE (Data Link Escape);</li>
<li>STX (Start of Text);</li>
<li>ETX (End of Text)</li>
</ul>
</li>
<li>如果字符中出现DLE，就添一个DLE，称为字符填充。</li>
<li>缺点：完全依赖8位字符，特别是ASCII字符。</li>
</ul>
<h3 id="313-带位填充的首尾定界法">3.1.3 带位填充的首尾定界法</h3>
<ul>
<li>特殊位模式01111110作为定界符</li>
<li>规定：
<ul>
<li>数据中若有连续5个“1”，发方就添“0”。</li>
<li>收方遇到01111110知帧始或帧尾，遇到连续5个“1”，则去掉后面的一个“0”。</li>
</ul>
</li>
</ul>
<h3 id="314-物理层编码违例定界法">3.1.4 物理层编码违例定界法</h3>
<p>适用于在传输编码策略中采用冗余技术的网络。</p>
<p>例如：用两个物理位译码成数据的一位</p>
<ul>
<li>数据位1：高－低电平对</li>
<li>数据位0：低—高电平对</li>
<li>无效物理编码：高—高电平对、低—低电平对</li>
<li>使用无效物理编码作为定界符</li>
</ul>
<h2 id="32-差错校验和校正">3.2 差错校验和校正</h2>
<h3 id="321-产生差错的原因">3.2.1 产生差错的原因</h3>
<ul>
<li>噪声干扰</li>
<li>数据处理引起：
<ul>
<li>压缩、解压</li>
<li>调制、解调</li>
</ul>
</li>
<li>信道失真</li>
<li>其他原因</li>
</ul>
<p>差错类型：</p>
<ul>
<li>单个错误：分散在各个块中</li>
<li>突发错误：集中在某个块中</li>
</ul>
<h3 id="322-处理策略差错编码">3.2.2 处理策略(差错编码)</h3>
<ul>
<li>检错码: 加入冗余位，使接收方知道有差错发生，但不知是什么差错，然后让发送方重传。</li>
<li>纠错码: 在每一个要发送的数据块上附加足够的冗余信息, 使接收方能够推导出已发出字符应该是什么.纠错码要比检错码增加更多的冗余位。</li>
</ul>
<h3 id="323-海明码">3.2.3 海明码</h3>
<p>海明距离：两个码字中不同位的个数。 D(1101, 0111)=2</p>
<ul>
<li>检错：为检测出d比特错，需使用海明距离为d+1的编码</li>
<li>纠错：为纠正d比特错，需使用海明距离为2d+1的编码</li>
</ul>
<p>海明码编码：</p>
<ul>
<li>
<p>海明码只能检测出2位错，纠1位错</p>
</li>
<li>
<p>海明码默认进行偶校验(1的个数如果为奇数则在前面加个1，使1的个数变成偶数，否则加0)</p>
</li>
<li>
<p>设要传输的数据位是m位，冗余位是r位，则总传输位数<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>=</mo><mi>m</mi><mo>+</mo><mi>r</mi></mrow><annotation encoding="application/x-tex">n=m+r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span></span></span></span>, 应满足, $ 2^{r} \geq m+r+1$</p>
</li>
<li>
<p>编码格式：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>r</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>r</mi><mn>2</mn></msub><mo separator="true">,</mo><msub><mi>m</mi><mn>3</mn></msub><mo separator="true">,</mo><msub><mi>r</mi><mn>4</mn></msub><mo separator="true">,</mo><msub><mi>m</mi><mn>5</mn></msub><mo separator="true">,</mo><msub><mi>m</mi><mn>6</mn></msub><mo separator="true">,</mo><msub><mi>m</mi><mn>7</mn></msub><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">r_1, r_2, m_3, r_4, m_5, m_6, m_7...</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">7</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span></span></span></span>；其中r为校验位，m为信息位，信息位第k位，和相应2的整次幂的校验位有关。</p>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gw6k5qntfpj30qs0eaafv.jpg" alt="image.png" style="zoom:50%;" />
<p>校验位<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>r</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">r_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的计算：各相关信息位的异或</p>
<p>收方：</p>
<ul>
<li>设C=0，</li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>r</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">r_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>与相关信息位的异或为0，C+=0</li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>r</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">r_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 与相关信息位的异或为1，C+=i</li>
<li>C为出错位置。</li>
</ul>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gw6kn5mn3ij31180nq487.jpg" alt="image.png" style="zoom:50%;" />
</li>
</ul>
<h3 id="324-crc编码法">3.2.4 CRC编码法</h3>
<p>CRC码即多项式编码，也称<strong>循环冗余码</strong>，k+1位编码可写成k阶多项式</p>
<p>CRC编码法：</p>
<ul>
<li>发收方规定一个生成多项式G(x)，设为r阶，规定最高阶和最低阶系数为1</li>
<li>将要发送的帧表示成M(x)多项式</li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>x</mi><mi>r</mi></msup><mi>M</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">x^rM(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span>对应于帧的二进制数后加r个0</li>
<li>用G(x)模2除<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>x</mi><mi>r</mi></msup><mi>M</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">x^rM(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span>，得商和余数</li>
<li>采用“模2减”，用<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>x</mi><mi>r</mi></msup><mi>M</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">x^rM(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span>减去余数作为M(x)按G(x)的CRC校验码。</li>
</ul>
<p>关于模2运算</p>
<img src="https://img-blog.csdnimg.cn/20181112111518141.png"  />
<p>模2除法：采用模2减法，不借位</p>
<ol>
<li>除数与被除数最高几位（与除数位数相同）做异或，商1。（除数首位必须为1）</li>
<li>余数先去掉首位，若此时余数最高位为1，商1，并对以它为除数继续模2除。 若最高位为0，则商0，重复步骤2。</li>
<li>直到余数位数小于除数位数时，运算结束。</li>
</ol>
<h2 id="33-停止等待协议">3.3 停止等待协议</h2>
<h3 id="331-无限制单向数据传输协议">3.3.1 无限制单向数据传输协议</h3>
<p>条件：</p>
<ol>
<li>一个机器发数据，另一机器收数据；</li>
<li>网络层总是准备好分组传送</li>
<li>通道无错</li>
<li>DLL层处理速度无穷大。</li>
</ol>
<h3 id="332-单向停-等协议">3.3.2 单向停-等协议</h3>
<p>条件：</p>
<ol>
<li>一个机器发数据，另一机器收数据</li>
<li>网络层总是准备好分组传送</li>
<li>通道无错</li>
<li>DLL层处理速度有限</li>
</ol>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gw6nrzb9kej314u0pun0z.jpg" alt="image.png" style="zoom:50%;" />
<h3 id="333-有错-单向数据传输协议">3.3.3 有错、单向数据传输协议</h3>
<p>条件：</p>
<ol>
<li>一个机器发数据，另一机器收数据</li>
<li>网络层总是准备好分组传送</li>
<li>通道有错</li>
<li>DLL层处理速度有限</li>
</ol>
<p>数据帧或确认帧丢失：超时重传</p>
<p>收到重复帧：可给帧独一无二的序号</p>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gw6nwzk51pj31280r0q7z.jpg" alt="image.png" style="zoom:50%;" />
<img src="/Users/zhaoyuan/Library/Application Support/typora-user-images/image-20211107162433929.png" alt="image-20211107162433929" style="zoom:50%;" />
<ul>
<li>此图中没有表示出当收方又到一个错帧，向发方回应NAK帧</li>
<li>计数器为了解决死锁问题，重发时间选择重要，一般选为略 大于“从发完数据帧到收到回答帧所需的平均时间”。</li>
<li>超时重传时间设置太短，解决办法：对发送的每一帧加序号。</li>
<li>本协议只需一位做序号。</li>
</ul>
<p>确认帧必须表明这样两个含义：</p>
<ul>
<li>第n – 1号帧和这以前的各帧都收到了</li>
<li>我期望收到第n号帧。确认帧还可能包含这样的含义：当A和B都有数据帧向对方发送时，确认信息可以放 在数据帧中捎带地发送给对方。</li>
</ul>
<p>捎带确认：为了减少发送确认帧，可以暂时延迟确认，以便将确认帧钩在一个外发的数据帧，若无法捎带，当一个控制捎带确认的计时器超时后，单独发送确认帧</p>
<h2 id="34-窗口滑动协议">3.4 窗口滑动协议</h2>
<p>条件：</p>
<ol>
<li>双向传输数据</li>
<li>网络层总是准备好分组传送</li>
<li>通道有错</li>
<li>DLL层处理速度有限</li>
</ol>
<h3 id="341-窗口任何一端都有两个窗口">3.4.1 窗口(任何一端都有两个窗口)</h3>
<p><strong>发送窗口(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>W</mi><mi>T</mi></msub></mrow><annotation encoding="application/x-tex">W_T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>)：存放着已发送但还未确认的帧序号</strong></p>
<ol>
<li>发帧(帧存入缓冲区)，上界加1</li>
<li>收到窗口下界ACK信息，下界加1</li>
<li>收到窗口外的ACK信息，丢掉</li>
</ol>
<p><strong>接收窗口(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>W</mi><mi>R</mi></msub></mrow><annotation encoding="application/x-tex">W_R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.00773em;">R</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>)：存放应接收的帧序号</strong></p>
<ol>
<li>
<p>收到接收窗口外的序号帧，丢掉</p>
</li>
<li>
<p>收到接收窗口下界序号帧，接收窗口向前移一步</p>
</li>
</ol>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gw7rvullggj30wk0non2q.jpg" alt="image.png" style="zoom:67%;" />
<ul>
<li>
<p>每个待发送的帧被赋予一个序列号Seq，取值范围为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn><mo>∼</mo><msup><mn>2</mn><mi>n</mi></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">0\sim2^{n}-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.747722em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>(n位字段)</p>
</li>
<li>
<p>建立缓冲区：</p>
<p>发送窗口：缓存已发送、待确认的帧</p>
<ul>
<li>顺序接收来自网络层的分组，成帧，赋予序列号</li>
<li>最多保存w个已发送、待确认的帧</li>
<li>窗口达到最大值W时强制关闭网络层</li>
</ul>
<p>接收窗口：缓存期待接收帧（序号）</p>
<ul>
<li>对进入窗口的帧顺序提交网络层，进行确认</li>
<li>落在窗口外的帧被丢弃</li>
</ul>
</li>
</ul>
<h3 id="342-三种窗口滑动协议">3.4.2 三种窗口滑动协议</h3>
<ol>
<li>
<p>一位滑动窗口协议(停止等待协议)</p>
<ul>
<li>发送窗口(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>W</mi><mi>T</mi></msub></mrow><annotation encoding="application/x-tex">W_T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>)=1</li>
<li>接收窗口(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>W</mi><mi>R</mi></msub></mrow><annotation encoding="application/x-tex">W_R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.00773em;">R</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>)=1</li>
</ul>
<p>信道利用率：$ U=\frac{T_f}{T_f+R}<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">，</mi></mrow><annotation encoding="application/x-tex">，</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0em;vertical-align:0em;"></span><span class="mord cjk_fallback">，</span></span></span></span>T_f<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">为</mi><mi mathvariant="normal">帧</mi><mi mathvariant="normal">传</mi><mi mathvariant="normal">输</mi><mi mathvariant="normal">时</mi><mi mathvariant="normal">间</mi><mi mathvariant="normal">，</mi></mrow><annotation encoding="application/x-tex">为帧传输时间，</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0em;vertical-align:0em;"></span><span class="mord cjk_fallback">为</span><span class="mord cjk_fallback">帧</span><span class="mord cjk_fallback">传</span><span class="mord cjk_fallback">输</span><span class="mord cjk_fallback">时</span><span class="mord cjk_fallback">间</span><span class="mord cjk_fallback">，</span></span></span></span>T_f=\frac{L}{B}$, L为帧长度, B为数据传输速率，R为RTT(来回时间)</p>
<p>提高信道利用率的方法：增加滑动窗口的长度W，即：$ U=\frac{W*T_f}{T_f+R}$</p>
<img src="/Users/zhaoyuan/Library/Application Support/typora-user-images/image-20211108160316913.png" alt="image-20211108160316913" style="zoom:50%;" />
</li>
<li>
<p>连续ARQ协议(又称Go-Back-N)</p>
<ul>
<li>发送窗口(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>W</mi><mi>T</mi></msub></mrow><annotation encoding="application/x-tex">W_T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>)&gt;1：缓存在发送窗口中的出错帧及后续帧全部重发</li>
<li>接收窗口(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>W</mi><mi>R</mi></msub></mrow><annotation encoding="application/x-tex">W_R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.00773em;">R</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>)=1：对出错帧不确认，丢弃错帧和后续帧</li>
</ul>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gw7tpfb08qj30xs0gytdq.jpg" alt="image.png" style="zoom:50%;" />
<img src="/Users/zhaoyuan/Library/Application Support/typora-user-images/image-20211108170022116.png" alt="image-20211108170022116" style="zoom:50%;" />
</li>
<li>
<p>选择重传ARQ协议(SR)</p>
<ul>
<li>发送窗口(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>W</mi><mi>T</mi></msub></mrow><annotation encoding="application/x-tex">W_T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>)&gt;1：缓存在发送窗口中的出错帧及后续帧全部重发</li>
<li>接收窗口(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>W</mi><mi>R</mi></msub></mrow><annotation encoding="application/x-tex">W_R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.00773em;">R</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>)&gt;1：对出错帧不确认，丢弃错帧和后续帧</li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>W</mi><mi>T</mi></msub><mo>≤</mo><msup><mn>2</mn><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup><mo separator="true">,</mo><msub><mi>W</mi><mi>R</mi></msub><mo>≤</mo><msup><mn>2</mn><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup><mi mathvariant="normal">；</mi><msub><mi>W</mi><mi>T</mi></msub><mo>+</mo><msub><mi>W</mi><mi>R</mi></msub><mo>≤</mo><msup><mn>2</mn><mi>n</mi></msup><mo separator="true">,</mo><msub><mi>W</mi><mi>T</mi></msub><mo>≤</mo><msub><mi>W</mi><mi>R</mi></msub><mi mathvariant="normal">。</mi><msub><mi>W</mi><mi>T</mi></msub><mi mathvariant="normal">最</mi><mi mathvariant="normal">大</mi><mi mathvariant="normal">时</mi><mi mathvariant="normal">有</mi><msub><mi>W</mi><mi>T</mi></msub><mo>=</mo><msub><mi>W</mi><mi>R</mi></msub><mo>=</mo><mo>(</mo><msup><mn>2</mn><mi>n</mi></msup><mo>)</mo><mi mathvariant="normal">/</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">W_T≤ 2^{n-1}, W_R≤ 2^{n-1}； W_T+W_R ≤ 2^n , W_T ≤ W_R 。W_T 最大时有W_T =W_R =(2^n)/2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.008548em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.00773em;">R</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.964108em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mord cjk_fallback">；</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.00773em;">R</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.00773em;">R</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">。</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">最</span><span class="mord cjk_fallback">大</span><span class="mord cjk_fallback">时</span><span class="mord cjk_fallback">有</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.00773em;">R</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord">/</span><span class="mord">2</span></span></span></span> (见习题)</li>
</ul>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gw7u2qnv8bj30v20b80xv.jpg" alt="image.png" style="zoom:50%;" />
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gw7udao80nj30xe0f4n1y.jpg" alt="image.png" style="zoom:50%;" />
<p>否定确认NAK: 对出错帧回送否定确认，使发放不必等到超时重传，加快出错帧的重传</p>
</li>
</ol>
<h3 id="343-arq协议的作用">3.4.3 ARQ协议的作用</h3>
<p>(Automatic Repeat-reQuest)：</p>
<ul>
<li>在不可靠的链路上实现可靠交付，所有重传对上面透明</li>
<li>支持流量控制: 当收方来不及接收可以暂时不发送确认帧</li>
</ul>
<p>差错控制策略比较：</p>
<ul>
<li>Go-back-n：
<ul>
<li>发送方需要较大缓冲区，便于重传</li>
<li>重传帧较多，因此适合信道出错率较小的情况</li>
</ul>
</li>
<li>选择重传
<ul>
<li>接收方需要较大缓冲区，以便将按正确顺序将帧提交到网络层</li>
<li>重传帧较少，使用于信道质量不好的情况</li>
</ul>
</li>
</ul>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gwa5bkbeodj310u0n2gwj.jpg" alt="image.png" style="zoom:50%;" />
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[2. 8086微型计算机系统]]></title>
        <id>https://notes.yuyzzz.top/post/2-8086-wei-xing-ji-suan-ji-xi-tong/</id>
        <link href="https://notes.yuyzzz.top/post/2-8086-wei-xing-ji-suan-ji-xi-tong/">
        </link>
        <updated>2021-10-31T08:01:17.000Z</updated>
        <summary type="html"><![CDATA[<p>介绍了微型计算机的概念、8086的结构、寻址方式、引脚功能、硬件组成等</p>
]]></summary>
        <content type="html"><![CDATA[<p>介绍了微型计算机的概念、8086的结构、寻址方式、引脚功能、硬件组成等</p>
<!--more-->
<h2 id="21-概述">2.1 概述</h2>
<ol>
<li>微型计算机（简称微机）：将计算机的核心器件中央处理器（运算器和控制器）集成在一块半导体芯片上，配以存储器、I/O接口电路及系统总线等设备的计算机</li>
<li>微型计算机系统：以微型计算机系统为主体，配以系统软件和外设后成为微型计算机系统</li>
</ol>
<h3 id="211-微型计算机系统的硬件组成">2.1.1 微型计算机系统的硬件组成</h3>
<ol>
<li>
<p><strong>冯·诺伊曼</strong>计算机的特点：硬件由<strong>运算器、控制器、存储器、输入设备和输出设备</strong>五大基本部件组成</p>
<ul>
<li>运算器（ALU）：运算器的核心是算术逻辑单元，是完成各种<strong>算术和逻辑</strong>运算的部件。</li>
<li>控制器（CU）：发出各种控制信息。</li>
<li>存储器（M）：记忆程序和数据的部件。</li>
<li>输入设备（IN）：将程序和数据输入的部件。</li>
<li>输出设备（OUT）：将结果数据和其它信息输出的部件。</li>
</ul>
</li>
<li>
<p>五大部件之间的信息流动：</p>
<ul>
<li><strong>数据信息</strong>：用双线表示，包括原始数据、中间结果、计算结果和程序指令</li>
<li><strong>控制信息</strong>：用单线表示，它是由控制器发出，指挥和协调其它各部件动作的信号</li>
</ul>
</li>
<li>
<p>现代微计算机系统硬件组成：</p>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gvtzqqh2gkj30t00eogpg.jpg" alt="image-20211011161129147.png" style="zoom:67%;" />
<ul>
<li>微处理器：包括运算器和控制器</li>
<li>协处理器：用于特定任务的处理，以减轻微处理器的负担</li>
<li>总线控制逻辑：总线是连接计算机各部分的数据通路，分为：<strong>片内总线，片级总线，系统总线</strong>，系统总线包含的信号线必须满足下列各种输入/输出操作的需要：
<ul>
<li>访问分布于主板之外的存储器；</li>
<li>访问I/O接口；</li>
<li>适应外部中断方式；</li>
<li>适应存储器直接与外部设备交换信息。</li>
</ul>
</li>
</ul>
</li>
</ol>
<h3 id="212-微型计算机系统的工作原理">2.1.2 微型计算机系统的工作原理</h3>
<ol>
<li><strong>指令、指令系统和程序</strong>
<ul>
<li>指令：二进制代码，由**操作码(操作类型)和操作数(操作对象或其地址)**组成</li>
<li>指令系统：一台计算机所能识别和执行的全部指令的集合，是表征计算机性能的重要因素</li>
<li>程序：一个指令序列</li>
</ul>
</li>
<li><strong>机器语言、汇编语言和高级语言</strong>
<ul>
<li>机器语言：由二进制代码组成，计算机能够直接识别，故机器语言程序被称为目标程序</li>
<li>汇编语言：由字母和符号表示的二进制代码，能够直接访问与硬件相关的存储器或I/O端口，汇编语言必须翻译成机器语言程序才能执行，这个翻译过程称为“汇编”，这种<strong>把汇编源程序翻译成目标程序的语言加工程序称为汇编程序。</strong></li>
<li>高级语言</li>
</ul>
</li>
<li>微机系统的工作原理：存储程序和程序控制</li>
</ol>
<h3 id="213-微型计算机系统的启动过程">2.1.3 微型计算机系统的启动过程</h3>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gvtzr3fnyxj317q0nme2j.jpg" alt="image-20211011170200071.png" style="zoom:47%;" />
<h2 id="22-8086微处理器的结构">2.2 8086微处理器的结构</h2>
<p>8086是Intel系列的16位微处理器，有16根数据线和20根地址线</p>
<h3 id="221-8086的内部结构">2.2.1 8086的内部结构</h3>
<p>按照功能分成<strong>总线接口部件BIU(Bus Interface Unit)和指令执行部件EU(Excution Unit)</strong></p>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gvtzn7hr5xj30x00qeguz.jpg" alt="image-20211011232337646.png" style="zoom:67%;" />
<ol>
<li>BIU
<ul>
<li>组成：
<ul>
<li>4个16位的<strong>段地址寄存器</strong>CS、DS、ES、SS</li>
<li>1个16位的<strong>指令指针寄存器</strong>IP：保存下一条要取出的指令所在存储单元的<strong>16位偏移地址</strong></li>
<li>一个20位的<strong>地址加法器</strong>：将20位地址寻址的1MB的物理空间划分成由16位地址寻址的不超过64KB的逻辑空间，逻辑空间就是逻辑段，简称段；存储物理地址，可根据<strong>16位段地址和16位段内偏移地址</strong>计算得到</li>
<li>一个可以预存4字节/6字节（8088/8086）指令的<strong>指令队列缓冲器</strong>：FIFO，暂存BIU从存储器预取的指令</li>
<li>总线控制逻辑：发出总线控制信号</li>
</ul>
</li>
<li>作用：根据指令的要求合成20位的地址信号，产生与外部总线数据传输需要的控制信号时序，实现与外部的数据交换</li>
</ul>
</li>
<li>EU
<ul>
<li>组成：
<ul>
<li>通用寄存器组</li>
<li>专用寄存器组</li>
<li>算术逻辑单元ALU</li>
<li>16位的标志寄存器</li>
<li>EU控制系统</li>
</ul>
</li>
<li>作用：执行指令</li>
</ul>
</li>
<li>指令流水线结构：在执行一条指令的同时又读取下一条指令的机制</li>
</ol>
<h3 id="222-8086微处理器寻址内存地址的方法">2.2.2 8086微处理器寻址内存地址的方法</h3>
<p><strong>将段地址寄存器的内容左移四位, 然后再与段内偏移地址值相加；</strong></p>
<p>可作为<strong>段地址寄存器的有：CS、DS、ES、SS；</strong></p>
<p>段内偏移地址值则可通过寻址方式得到。</p>
<h3 id="223-8086微处理器的内部寄存器">2.2.3 8086微处理器的内部寄存器</h3>
<ol>
<li><strong>通用寄存器</strong>：<strong>AX, BX, CX, DX</strong></li>
</ol>
<ul>
<li>
<p>共性：可按16位一次读写，也可按高8位低8位读写，可以存放数据、地址</p>
</li>
<li>
<p>个性：</p>
<ul>
<li>
<p>AX(AH+AL): 累加器(Accumulator)</p>
</li>
<li>
<p>BX(BH+BL): 基地址寄存器(Base), 在<strong>间接寻址中作为偏移地址寄存器</strong>；在<strong>基址寻址中作为基地址寄存器</strong></p>
</li>
<li>
<p>CX(CH+CL): 计数寄存器(Count)</p>
</li>
<li>
<p>DX(DH+DL): 数据寄存器(Data), 在乘除法指令中固定充当辅助的操作数寄存器；</p>
<p>​												  在输入/输出指令中固定作为外设口地址寄存器。</p>
</li>
</ul>
</li>
</ul>
<ol start="2">
<li>
<p><strong>专用寄存器</strong>：<strong>SP, BP, SI, DI</strong>, <strong>只能以16位为单位进行操作</strong></p>
<ul>
<li>SP: 栈顶指针(stack pointer), 寻址堆栈区栈顶的当前偏移地址。当执行完入栈/出栈指令后，SP的值会自动减2/加2。</li>
<li>BP: 基数指针(base pointer), 提供多种寻址方式的偏移地址或基地址，还用于配合SS提供堆栈区的非栈顶单元偏移地址。</li>
<li>SI: 源地址寄存器(Source Index)</li>
<li>DI: 目的地址寄存器(Destination Index)</li>
</ul>
</li>
<li>
<p><strong>指令指针 IP</strong>(Instruction Pointer): 固定配合CS来指定内存中将要执行的指令，用于提供相对于CS值的偏移地址。一条指令执行完后，IP的值会自动增加，以指向位于存储器中的下一条指令</p>
</li>
<li>
<p><strong>段寄存器</strong>: <strong>CS, SS, DS, ES</strong></p>
<ul>
<li>CS：代码段寄存器（Code Segment）,固定与IP一起寻址内存代码区。</li>
<li>SS：堆栈段寄存器(Stack Segment)，固定与SP或BP寻址内存的堆栈区。</li>
<li>DS：数据段寄存器(Data Segment)，可与SI、DI、BP等寻址内存数据区。</li>
<li>ES：附加段寄存器(Extra data Segment)，可与SI、DI、BP等寻址内存数据区</li>
</ul>
</li>
<li>
<p><strong>标志寄存器</strong>(Flag Register)</p>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gvu6z4ku6jj30y009ojsy.jpg" alt="image.png" style="zoom:67%;" />
<p>(1) 运算/操作结果标志位</p>
<ul>
<li>CF：进位标志(Carry Flag),运算结果产生进/借位时CF=1，反之CF=0</li>
<li>PF：齐偶标志(Parity Flag),运算结果中低8位有偶数个1时PF=1，奇数个1时PF=0。</li>
<li>AF：辅助进位标志(Auxiliary Flag)：两个字节运算若结果中低半个字节有进/借位时(第3位向第四位发生了进位)AF=1。</li>
<li>ZF：零标志(Zero Flag),运算结果为0时ZF=1，反之=0。</li>
<li>SF：符号标志(Sign Flag),运算结果最高位为0时SF=0，反之=1。</li>
<li>OF：溢出标志(Overflow Flag),运算结果产生溢出时OF=1，反之=0。</li>
</ul>
<p>(2) 控制标志位(用户设置)</p>
<ul>
<li>DF：地址方向标志(Direction Flag)，用于数据块传送。DF=0，内存地址朝增加方向变化； DF=1，内存地址朝减小方向变化。</li>
<li>IF：中断允许标志(Iterrupt Flag)：用于响应中断，IF=0，只响应不可屏蔽中断；IF=1，那么会响应所有类型的中断。</li>
<li>TF：自陷标志(Trap Flag)：用于程序的单步调试。TF=1，每执行一条指令就中断一下，以便运行检测程序；TF=0连续执行。</li>
</ul>
</li>
</ol>
<h2 id="23-80868088引脚功能">2.3 8086/8088引脚功能</h2>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><msub><mi>D</mi><mn>0</mn></msub><mo>∼</mo><mi>A</mi><msub><mi>D</mi><mn>15</mn></msub></mrow><annotation encoding="application/x-tex">AD_{0} \sim AD_{15}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathdefault">A</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathdefault">A</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">5</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>低16位的地址/数据复用引脚线，双向，三态，采用分时复用来实现对数据线和地址线的复用</p>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gvuu4q0fxpj30ro0lmwiz.jpg" alt="image.png" style="zoom:50%;" />
<ul>
<li>最小工作模式：CPU控制总线</li>
<li>最大工作模式：总线控制器控制总线</li>
</ul>
<p>将<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>MN</mtext><mi mathvariant="normal">/</mi><mover accent="true"><mtext>MX</mtext><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\text{MN}/\overline{\text{MX}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.13333em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord">MN</span></span><span class="mord">/</span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord">MX</span></span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span>引脚接高电平(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>MN/MX=1</mtext></mrow><annotation encoding="application/x-tex">\text{MN/MX=1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord">MN/MX=1</span></span></span></span></span>)，CPU将工作于最小模式，反之它们将工作于最大模式。当CPU处于不同的工作模式时，部分控制引脚的作用将有所不同，而且构成的系统结构和规模也有所不同</p>
<h3 id="231-80868088最小工作模式下引脚功能">2.3.1 8086/8088最小工作模式下引脚功能</h3>
<ol>
<li>地址总线(Address Bus) ：A0~A19 (其中A0～A15与D0~D15复用, A16～A19与S3~S6复用)</li>
<li>数据总线：D0 ~ D15（8086与A0 ~ A15共用）</li>
<li>控制总线：
<ul>
<li>外部中断线：
<ul>
<li>INTR(Interrupt Request): 外部可屏蔽中断输入信号,由外部中断控制器提供</li>
<li>NMI(Nonmaskable Interrupt): 外部非屏蔽中断输入信号，由外部非屏蔽中断源提供</li>
<li>INTA(Interrput Acknowledge): CPU中断响应应答信号(输出)，回送给外部中断控制器</li>
</ul>
</li>
<li>数据传送控制信号线：
<ul>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>ALE</mtext><mo separator="true">,</mo><mover accent="true"><mtext>DEN</mtext><mo stretchy="true">‾</mo></mover><mo separator="true">,</mo><mtext>DT</mtext><mi mathvariant="normal">/</mi><mover accent="true"><mtext>R</mtext><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\text{ALE}, \overline{\text{DEN}}, \text{DT}/\overline{\text{R}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.13333em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord">ALE</span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord">DEN</span></span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord text"><span class="mord">DT</span></span><span class="mord">/</span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord">R</span></span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span>: 地址锁存器和数据收发器控制信号</li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mtext>RD</mtext><mo stretchy="true">‾</mo></mover><mi mathvariant="normal">；</mi><mover accent="true"><mtext>WR</mtext><mo stretchy="true">‾</mo></mover><mi mathvariant="normal">；</mi><mtext>M</mtext><mi mathvariant="normal">/</mi><mover accent="true"><mtext>IO</mtext><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{\text{RD}}；\overline{\text{WR}}；\text{M}/\overline{\text{IO}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.13333em;vertical-align:-0.25em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord">RD</span></span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mord cjk_fallback">；</span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord">WR</span></span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mord cjk_fallback">；</span><span class="mord text"><span class="mord">M</span></span><span class="mord">/</span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord">IO</span></span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span>：读/写控制信号及读写对象(存储器/外设)选择信号</li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mtext>RD</mtext><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{\text{RD}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8833300000000001em;vertical-align:0em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord">RD</span></span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span>：16位数据线结构下奇地址（高字节）存储单元选择信号，用于选通高8位数据（输出，8088无效）</li>
<li>READY：CPU等待存储器或外设就绪信号（输入）</li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mtext>TEST</mtext><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{\text{TEST}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8833300000000001em;vertical-align:0em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord">TEST</span></span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span>：清除WAIT指令产生的暂停态，使程序继续顺序执行（输入）</li>
</ul>
</li>
<li>总线请求/应答总线
<ul>
<li>HOLD：总线请求（输入）</li>
<li>HLDA：总线请求应答（输出）</li>
</ul>
</li>
</ul>
</li>
<li>状态信号线：S3；S4；S5；S6与A16~A19共用，在地址信号锁存后有效
<ul>
<li>S6：反映CPU目前是否占用总线。“0”= 占用；“1”= 没占用</li>
<li>S5：反映中断允许标志位IF的状态。S5 = IF</li>
<li>S4、S3：反映目前正在使用的段寄存器。00=ES；01=SS；10=CS；11=DS</li>
</ul>
</li>
<li>复位（RESET）线上维持四个时钟周期以上的高电平后，CPU内部的寄存器将处于复位态：DS=ES=SS=IP=FR=0；CS=FFFFH，指令队列空复位与开机时的状态相同,CPU首条指令的地址是FFFF0H</li>
</ol>
<h3 id="232-80868088最大工作模式下引脚功能">2.3.2 8086/8088最大工作模式下引脚功能</h3>
<ol>
<li>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Q</mi><msub><mi mathvariant="normal">S</mi><mn>1</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">Q</mi><msub><mi mathvariant="normal">S</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">\mathrm{QS_1, QS_2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathrm">Q</span><span class="mord"><span class="mord mathrm">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathrm mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathrm">Q</span><span class="mord"><span class="mord mathrm">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathrm mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span>: 指令状态信号(Queue Status), 反映指令队列的状态</p>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gvutz8phxsj30y60ayagl.jpg" alt="image.png" style="zoom:60%;" />
</li>
<li>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><msub><mi mathvariant="normal">S</mi><mn>2</mn></msub><mo stretchy="true">‾</mo></mover><mo separator="true">,</mo><mover accent="true"><msub><mi mathvariant="normal">S</mi><mn>1</mn></msub><mo stretchy="true">‾</mo></mover><mo separator="true">,</mo><mover accent="true"><msub><mi mathvariant="normal">S</mi><mn>0</mn></msub><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\mathrm{\overline{S_2}, \overline{S_1},\overline{S_0}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0777700000000001em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathrm mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathrm mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathrm mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>: 用于产生不同控制信号</p>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gvuu2k5d3tj30mc0io46c.jpg" alt="image.png" style="zoom:67%;" />
</li>
<li>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mtext>LOCK</mtext><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{\text{LOCK}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8833300000000001em;vertical-align:0em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord">LOCK</span></span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span>: 总线封锁信号，低电平有效。有效时：禁止其他总线主设备在以下两种情况下占用系统总线</p>
<ul>
<li>CPU执行带LOCK前缀的指令</li>
<li>中断响应未结束时</li>
</ul>
</li>
<li>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mrow><mi mathvariant="normal">R</mi><mi mathvariant="normal">Q</mi></mrow><mo stretchy="true">‾</mo></mover><mi mathvariant="normal">/</mi><mover accent="true"><mrow><mi mathvariant="normal">G</mi><msub><mi mathvariant="normal">T</mi><mn>0</mn></msub></mrow><mo stretchy="true">‾</mo></mover><mo separator="true">,</mo><mover accent="true"><mrow><mi mathvariant="normal">R</mi><mi mathvariant="normal">Q</mi></mrow><mo stretchy="true">‾</mo></mover><mi mathvariant="normal">/</mi><mover accent="true"><mrow><mi mathvariant="normal">G</mi><msub><mi mathvariant="normal">T</mi><mn>1</mn></msub></mrow><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\mathrm{\overline{{RQ}}/\overline{GT_0}, \overline{{RQ}}/\overline{GT_1}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.13333em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">R</span><span class="mord mathrm">Q</span></span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span><span class="mord mathrm">/</span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathrm">G</span><span class="mord"><span class="mord mathrm">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathrm mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">R</span><span class="mord mathrm">Q</span></span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span><span class="mord mathrm">/</span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathrm">G</span><span class="mord"><span class="mord mathrm">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathrm mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>: 总线请求/允许信号, 提供两个主控部件共享局部总线的请求/允许联络信号，请求和允许信号共用同一根引脚线。其中RQ/GT0 的优先权高于RQ/GT1。</p>
</li>
</ol>
<h2 id="24-8086微型计算机系统硬件组成">2.4 8086微型计算机系统硬件组成</h2>
<p>时钟发生器8284, 地址锁存器8282, 数据收发器8286</p>
<h3 id="241-最小模式系统硬件组成">2.4.1 最小模式系统硬件组成</h3>
<figure data-type="image" tabindex="1"><img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gvuukv4imnj30jn0acgmw.jpg" alt="image.png" loading="lazy"></figure>
<p>地址线与数据线复用的实现</p>
<ol>
<li>CPU先将20位地址信号送上地址线A0 ~ A19</li>
<li>产生地址锁存信号ALE将20位地址信号锁存在外部提供的地址锁存器中。</li>
<li>在CPU内部将部分地址线引脚切换到内部数据线（8086将A0 ~ A15切换为D0 ~ D15；8088则将A0 ~ A7切换为D0 ~ D7），还有部分切换为状态输出线（A16 ~ A19成为S3~S6）</li>
<li>在入/出控制信号<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">D</mi><mi mathvariant="normal">T</mi><mi mathvariant="normal">/</mi><mover accent="true"><mi mathvariant="normal">R</mi><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\mathrm {DT/\overline{R}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.13333em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathrm">D</span><span class="mord mathrm">T</span><span class="mord mathrm">/</span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathrm">R</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span></span>,数据选通信号<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mrow><mi mathvariant="normal">D</mi><mi mathvariant="normal">E</mi><mi mathvariant="normal">N</mi></mrow><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\mathrm{\overline{DEN}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8833300000000001em;vertical-align:0em;"></span><span class="mord"><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathrm">D</span><span class="mord mathrm">E</span><span class="mord mathrm">N</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span></span>作用下，选通外部数据线上的收发器使外部数据进入</li>
</ol>
<h3 id="242-最大模式系统硬件组成">2.4.2 最大模式系统硬件组成</h3>
<figure data-type="image" tabindex="2"><img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gvuux1iil2j30k00a7jsv.jpg" alt="image.png" loading="lazy"></figure>
<h3 id="243-8086的存储器结构">2.4.3 8086的存储器结构</h3>
<ol>
<li>
<p>8086存储器：</p>
<ul>
<li>存储单元：<strong>按字节编址</strong>，低字节在前，高字节在后</li>
<li>数据可以是字节，字(两个字节)，双字(四个字节)</li>
<li>存储容量为1MB，物理地址范围：00000H~FFFFFH</li>
</ul>
<p>如图：（20110H）=3412H表示字单元20110H的内容是3412H；（20110H）=78563412H表示双字单元20110H的内容是78563412H。</p>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gvv8b5va0kj30es0rat9y.jpg" alt="image.png" style="zoom: 50%;" />
</li>
<li>
<p>存储器的分段管理</p>
<ul>
<li>将整个存储器分为多个逻辑段</li>
<li>每个逻辑段容量<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>≤</mo><mn>64</mn><mi>K</mi><mi>B</mi></mrow><annotation encoding="application/x-tex">\leq64KB</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">6</span><span class="mord">4</span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span></span></span></span></li>
<li>各个逻辑段可以紧密连接，也可以重叠</li>
<li>寻址操作采用段地址加段内偏移地址的二级寻址方式，对任意一个地址，可以唯一地被包含在一个逻辑段中，也可以包含在多个相互重叠的逻辑段中</li>
</ul>
<figure data-type="image" tabindex="3"><img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gvyhdfp7knj309y09lwex.jpg" alt="image.png" loading="lazy"></figure>
</li>
<li>
<p>存储器的地址</p>
<ul>
<li>段地址
<ul>
<li>将16个字节的存储空间称为一节</li>
<li>分段时要求各个逻辑段从节的整数边界开始，这样段首地址低4位应该是“0000”，因此就把段首地址的高16位称为“段基址（段地址）”</li>
<li>段地址是无符号的16位二进制数，存放在段寄存器DS、CS、SS或ES中，这些段分别称为数据段、代码段、堆栈段和附加段。</li>
</ul>
</li>
<li>偏移地址
<ul>
<li>某一存储单元相对于段首地址的偏移量称为偏移地址（也称有效地址EA）</li>
<li>偏移地址也是无符号的16位二进制数，存放在IP、SP、BX、SI、DI、BP中或直接出现在指令中。</li>
</ul>
</li>
<li>逻辑地址：在分段存储器中，通过段地址和偏移地址来表示的存储单元的地址称为逻辑地址，记为：<code>段地址:偏移地址</code></li>
<li>物理地址：存储器的绝对地址，20位，8086存储器物理地址范围为00000H~FFFFFH</li>
</ul>
</li>
</ol>
<h3 id="244-寻址外设端口的方法">2.4.4 寻址外设端口的方法</h3>
<p>8086的I/O采用独立编址（I/O端口和存储单元分开编址），地址线<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><msub><mi>D</mi><mn>0</mn></msub><mo>∼</mo><mi>A</mi><msub><mi>D</mi><mn>15</mn></msub></mrow><annotation encoding="application/x-tex">AD_{0} \sim AD_{15}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathdefault">A</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathdefault">A</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">5</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>作为端口地址，访问I/O端口时，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><msub><mi>D</mi><mn>19</mn></msub><mo>∼</mo><mi>A</mi><msub><mi>D</mi><mn>16</mn></msub></mrow><annotation encoding="application/x-tex">AD_{19} \sim AD_{16}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathdefault">A</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">9</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathdefault">A</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">6</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>为0000</p>
<h2 id="25-8086微型计算机系统总线时序">2.5 8086微型计算机系统总线时序</h2>
<ul>
<li><strong>指令周期</strong>：CPU执行一条指令所需要的时间，由一个或多个总线周期组成</li>
<li><strong>总线周期</strong>：CPU每完成一次总线操作（与外部更换一次数据；一次读或一次写）称为一个“总线周期”</li>
<li><strong>时钟周期</strong>：CPU主时钟周期，是8086/8088CPU内部的最小计时单位</li>
</ul>
<h3 id="251-最小模式下周期时序">2.5.1 最小模式下周期时序</h3>
<ol>
<li>
<p>读周期时序：</p>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gvyj9a81igj311u0tik02.jpg" alt="image.png" style="zoom: 50%;" />
</li>
<li>
<p>写周期时序</p>
<img src="https://tva1.sinaimg.cn/large/006pkgSjgy1gvyjubky6rj30x00syn4n.jpg" alt="image.png" style="zoom:50%;" /></li>
</ol>
]]></content>
    </entry>
</feed>